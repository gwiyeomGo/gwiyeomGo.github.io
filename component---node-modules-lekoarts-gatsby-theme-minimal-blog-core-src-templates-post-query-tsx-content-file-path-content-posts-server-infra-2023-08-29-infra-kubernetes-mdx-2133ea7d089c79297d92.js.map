{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-infra-2023-08-29-infra-kubernetes-mdx-2133ea7d089c79297d92.js","mappings":"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","sources":["webpack://gwiyeom-blog/./content/posts/server/infra/2023-08-29-infra-kubernetes.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    hr: \"hr\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    a: \"a\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"쿠버네티스\"), \"\\n\", React.createElement(_components.p, null, \"오픈소스 오케스트레이션 시스템 중 하나\\n오케스트레이션: 여러 개의 컴퓨터 시스템, 애플리케이션 및/또는 서비스를 조율하고 관리하는 것\\nex)\"), \"\\n\", React.createElement(_components.p, null, \"파드(pod) : 배포할 수 있는 가장 작은 단위\\n컨테이너 = 프로세스\\n파드 = 논리적 호스트\\n노드 = 물리적 호스트 (여러 개의 파드를 실행 가능)\"), \"\\n\", React.createElement(_components.p, null, \"파드 셋 관리\\n컨트롤러\\n카인드 : 도커 컨테이너를 노드로 사용하여 로컬 쿠버네티스 클러스터를 실행\\n-> 카인드 쓰려면 도커 설치해야함..\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"kubectl 설치\\ncli 로 쿠버네티스 클러스터에 명령 보냄\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"brew install kubectl\"), \"\\n\", React.createElement(_components.code, null, \"kubectl version\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/\"\n  }, \"https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://yuls-with-ai.tistory.com/419\"\n  }, \"https://yuls-with-ai.tistory.com/419\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"kind(kubernetes in Docker)\\n\", React.createElement(_components.code, null, \"go install sigs.k8s.io/kind@latest\")), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.p, null, \"도커 이미지를 빌드하고\\nKind 클러스터에 로드한 다음\\nHelm을 사용하여 파드를 배포하고\\n로컬에서 실행할 수 있는 상태가 됩니다\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Kind 클러스터 생성 정보 확인\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Kind를 사용하여 로컬에서 Kubernetes 클러스터를 생성\\n\", React.createElement(_components.code, null, \"kind create cluster\"), \"\\nKubernetes 클러스터 정보 확인허는 명령어로 Kind 클러스터의 정보를 확인합니다.\\n\", React.createElement(_components.code, null, \"kubectl cluster-info\"), \"\\n현재 로컬 머신의 Docker 엔진에서 실행 중인 컨테이너 목록이 표시\\n\", React.createElement(_components.code, null, \"docker ps\")), \"\\n\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"0\"\n  }, \"\\n\", React.createElement(_components.li, null, \"도커 어플리케이션을 실행\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"도커 이미지 빌드(현재 디렉토리에서 Docker 이미지를 빌드)\\n\", React.createElement(_components.code, null, \"docker build -t github.com/test/proglog:0.0.1\")), \"\\n\", React.createElement(_components.li, null, \"Kind 클러스터에 이미지 로드\\n이전에 빌드한 Docker 이미지를 Kind 클러스터에 로드합니다. 클러스터 내에서 이 이미지를 사용할 수 있\\n\", React.createElement(_components.code, null, \"kind load docker-image github.com/test/proglog:0.0.1\")), \"\\n\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"2\"\n  }, \"\\n\", React.createElement(_components.li, null, \"파드 배포\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Helm 차트를 템플릿으로 변환합니다. 이 명령은 Helm 차트를 템플릿으로만 보여주며, 실제로 배포하지는 않습니다.\\n\", React.createElement(_components.code, null, \"helm template proglog deploy/proglog\")), \"\\n\", React.createElement(_components.li, null, \"Helm 차트를 사용하여 Kubernetes 클러스터에 프로그램을 배포합니다. Helm은 차트에 정의된 리소스를 클러스터에 배포하고 관리합니다.\\n\", React.createElement(_components.code, null, \"helm install proglog deploy/proglog\")), \"\\n\", React.createElement(_components.li, null, \"배포한 파드의 상태를 확인\\n\", React.createElement(_components.code, null, \"kubectl get pods\")), \"\\n\", React.createElement(_components.li, null, \"Kubernetes 파드에 로컬 포트 포워딩을 설정합니다. 이를 통해 로컬 머신에서 해당 파드의 포트로 접속할 수 있게 됩니다.\\n\", React.createElement(_components.code, null, \"kubectl port-forward pod/proglog-0 8400\")), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.p, null, \"20240517\"), \"\\n\", React.createElement(_components.p, null, \"쿠버네티스를 사용해 개발 서버를 운영중이다.\\n개발 과정에서 redis 에 접속해 데이터를 조회해애 했다\\n실제 수거 간사님들이 로그인해서 업무를 조회할때 redis 의 값이 저장되기 떄문에\\n모두 잘 들어오셔서 업무에 차질이 없도록 확인해야 했다\"), \"\\n\", React.createElement(_components.p, null, \"터미널에서\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"개발서버 접속\\n\", React.createElement(_components.code, null, \"ssh [user]@oo.oo.oo.oo \")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"쿠버네티스에 실행 중인 pod 목록을 조회\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"kubectl --context={context_name} -n {context_name} get pods\"), \"\\n로 조회시 목록이 나오며 NAME 으로 단건 조회 접속 가능하다\"), \"\\n\", React.createElement(_components.p, null, \"단건:\", React.createElement(_components.code, null, \"kubectl --context={context_name} -n {context_name} get pods | grep {pod-name}\")), \"\\n\", React.createElement(_components.ol, {\n    start: \"3\"\n  }, \"\\n\", React.createElement(_components.li, null, \"pod 의 redis-cli 에 접속하자\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"kubectl --context={context_name} -n {context_name} exec -it {pod-name} redis-cli\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"kubectl --context={context_name} -n {context_name} exec -it {pod-name}  -- /bin/bash\")), \"\\n\", React.createElement(_components.p, null, \"redis-cli,-- /bin/bash, sh 등 cli 를 이동\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/gwiyeomgo.github.io/gwiyeomgo.github.io/content/posts/server/infra/2023-08-29-infra-kubernetes.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","p","hr","ul","li","code","a","ol","_provideComponents","components","React","href","start","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}