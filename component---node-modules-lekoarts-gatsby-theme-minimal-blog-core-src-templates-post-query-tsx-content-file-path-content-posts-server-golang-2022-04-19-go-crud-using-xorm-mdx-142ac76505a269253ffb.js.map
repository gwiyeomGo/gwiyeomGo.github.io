{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-golang-2022-04-19-go-crud-using-xorm-mdx-142ac76505a269253ffb.js","mappings":"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","sources":["webpack://gwiyeom-blog/./content/posts/server/golang/2022-04-19-go-crud-using-xorm.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    blockquote: \"blockquote\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    ol: \"ol\",\n    a: \"a\",\n    strong: \"strong\",\n    h1: \"h1\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h3, null, \"CRUD\"), \"\\n\", React.createElement(_components.h3, null, \"1. xorm 에서 CRUD 하기\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"type User struct {\\r\\n    Id int64 `xorm:\\\"id pk autoincr\\\" ` //pk\\r\\n    Name string\\r\\n\\t\\tAge int64\\r\\n    Created time.Time `xorm:\\\"created\\\"` //Created tag will automatically inserted current time when you insert one record\\r\\n    Updated time.Time `xorm:\\\"updated\\\"`\\r\\n\\t\\tDeletedAt time.Time `xorm:\\\"deleted\\\"` //Deleted will not really remove one record from table but only tag as deleted via current time.\\r\\n}\\r\\n\\r\\ntype Detail struct {\\r\\n    Id int64\\r\\n    UserId int64 `xorm:\\\"index\\\"` // index는 column name\\r\\n}\\r\\n\\r\\ntype UserDetail struct {\\r\\n    User   `xorm:\\\"extends\\\"`\\r\\n    Detail `xorm:\\\"extends\\\"` //Detail struct\\r\\n}\\n\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Create\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"var user User \")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"engine.Insert(&user)// INSERT user (created...) VALUES (?...)\")), \"\\n\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Find ,Get\"), \"\\n\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Update\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"affected, err := engine.ID(1).Update(&user)// UPDATE user SET ... Where id = ?\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"AllCols , Cols\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Saved 상태,Registed 상태가 존재\"), \"\\n\", React.createElement(_components.li, null, \"Saved 상태의 수정 프로세스\", \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"수정할 값만 body로 요청\"), \"\\n\", React.createElement(_components.li, null, \"값 bind 후 유효성 검사 => require 값을 피하기위해 상태가 Saved 일경우 Validate 안하도록 조건 추가\"), \"\\n\", React.createElement(_components.li, null, \"신청 id 로 내용을 조회  => db에 기록된 신청 상태가 Registered면 에러가 나도록 변경\"), \"\\n\", React.createElement(_components.li, null, \"Saved 면 update 하도록 씀\\r\\n=> xorm update\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"if cols == \\\"*\\\" {\\r\\n    builder = builder.AllCols()\\r\\n} else if len(cols) > 0 {\\r\\n    builder = builder.Cols(cols)\\r\\n}\\r\\n\\n\")), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Delete\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"engine.ID(1).Delete(&user)// UPDATE user SET ..., deleted_at = ? WHERE id = ?\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"engine.ID(1).Unscoped().Delete(&user)// Then this record will be really deleted\")), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"2. gorm 에서 CRUD 하기\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"type User struct {\\r\\n  ID   int64  `gorm:\\\"primary_key\\\"` //pk\\r\\n\\tName  string `gorm:\\\"not null\\\"`\\r\\n  Age  int64  `gorm:\\\"default:18\\\"` //default tag로 기본값 지정\\r\\n\\tActive bool\\r\\n\\tDeletedAt soft_delete.DeletedAt //delete flag로 초까지 ,gorm.DeletedAt 분까지\\r\\n}\\n\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Create\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"user := User{Name: \\\"test\\\", Age: 18, }\\r\\nresult := db.Create(&user)\\r\\ndb.Select(\\\"Name\\\", \\\"Age\\\", \\\"CreatedAt\\\").Create(&user)\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"db.Select(\\\"Name\\\", \\\"Age\\\", \\\"CreatedAt\\\").Create(&user)// INSERT INTO \"), \"users\", React.createElement(_components.code, null, \" (\"), \"name\", React.createElement(_components.code, null, \",\"), \"age\", React.createElement(_components.code, null, \",\"), \"created_at\", React.createElement(_components.code, null, \") VALUES (\\\"jinzhu\\\", 18, \\\"2020-07-04 11:05:21.775\\\")\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"UPDATE\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"user.Age = 100\\r\\ndb.Save(&user)// UPDATE users SET name='test', age=100,  updated_at = '2013-11-17 21:34:10' WHERE id=111\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"user.Id =1\"), \"\\r\\n\", React.createElement(_components.code, null, \"db.Model(&user).Where(\\\"active = ?\\\", true).Update(\\\"name\\\", \\\"hello\\\")// UPDATE users SET name='hello', updated_at='2013-11-17 21:34:10' WHERE id=1 AND active=true\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Delete\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"db.Delete(&User{}, 1)// DELETE FROM users WHERE id = 1;//Delete with primary key GORM allows to delete objects using primary key\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Delete Flag\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"UPDATE users SET deleted_at = /* current unix second */ WHERE ID = 1;\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"soft_delete는 뭐지?\"), \"\\n\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://gorm.io/ko_KR/docs/many_to_many.html\"\n  }, React.createElement(_components.strong, null, \"Many To Many\"))), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"//Member has and belong to many roles, `member_roles`는 join table 이다\\r\\ntype MemberEntity struct {\\r\\n\\t...\\r\\n\\tRoles          []rbac.RoleEntity `gorm:\\\"many2many:member_roles;\\\"` //두 모델 사이에 조인 테이블을 추가\\r\\n}\\n\")), \"\\n\", React.createElement(_components.h1, null, \"How to insert multiple data at once\"), \"\\n\", React.createElement(_components.p, null, \"배경\\r\\n특정 구독자에게 한번에 메세지를 보내고\\r\\n보낸 기록을 남기기위해\\r\\n구독자 정보를 db 에 남기는 작업이 필요했다\\r\\n한번에 10명 이상의 사용자에게 전송이 예상되기때문에 한번에 insert 를 하는 방법을 찾아봤다\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"//xorm\\r\\nif rowsAffected, err := common.GetDB(ctx).InsertMulti(recipients); err != nil {\\r\\n    return errors.Wrap(err, \\\"\\\")\\r\\n} else if rowsAffected == 0 {\\r\\n    return errors.New(\\\" \\\"등록에 실패하였습니다.\\\")\\r\\n}\\n\")), \"\\n\", React.createElement(_components.h3, null, \"출처\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://gobook.io/read/gitea.com/xorm/manual-en-US/chapter-07/1.deleted.html\"\n  }, \"delete 설명\"), React.createElement(_components.a, {\n    href: \"https://gobook.io/read/gitea.com/xorm/manual-en-US/chapter-02/4.columns.html\"\n  }, \"field tag\"), \"\\r\\n\", React.createElement(_components.a, {\n    href: \"https://www.popit.kr/golang-xorm-%ED%8E%B8%EB%A6%AC%ED%95%9C-%EA%B8%B0%EB%8A%A5-%EC%86%8C%EA%B0%9C/\"\n  }, \"Golang xORM 편리한 기능 소개 | Popit\"), \"\\r\\n\", React.createElement(_components.a, {\n    href: \"https://gorm.io/docs/update.html\"\n  }, \"gorm예시\"), \"\\r\\n\", React.createElement(_components.a, {\n    href: \"https://gorm.io/docs/delete.html#Delete-Flag\"\n  }, \"delete예시\"), \"\\r\\n\", React.createElement(_components.a, {\n    href: \"https://stackoverflow.com/questions/21108084/how-to-insert-multiple-data-at-once\"\n  }, \"How to insert multiple data at once\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/Users/gwiyeom/Documents/etc/gwiyeomgo.github.io/content/posts/server/golang/2022-04-19-go-crud-using-xorm.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h3","pre","code","blockquote","p","ul","li","ol","a","strong","h1","_provideComponents","components","React","href","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}