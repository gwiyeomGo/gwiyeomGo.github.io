"use strict";(self.webpackChunkgwiyeom_blog=self.webpackChunkgwiyeom_blog||[]).push([[1552],{5411:function(e,n,t){t.r(n),t.d(n,{Head:function(){return o.p},default:function(){return m}});var l=t(6540),a=t(8453);function r(e){const n=Object.assign({h3:"h3",p:"p",pre:"pre",code:"code",br:"br",h2:"h2",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",a:"a"},(0,a.RP)(),e.components);return l.createElement(l.Fragment,null,l.createElement(n.h3,null,"배경"),"\n",l.createElement(n.p,null,"기존 후원자 중복 검사를 위해 아래 조건의 기부 데이터를 추출을 요청받았다"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"기간 2022년 1월~2022년 5월 25일, \n물품기증 1~4회\n연령대: 35세~65세\n성별: 여성\n개인정보 필요 항목\n이름\n휴대폰번호\n생년월일\n기증횟수\n기부금영수증 발행여부(발행/미발행)\n이메일주소\n주소(상세주소포함)\n우편번호\n")),"\n",l.createElement(n.h3,null,"어디서 해당 정보를 확인할 수 있지?"),"\n",l.createElement(n.p,null,"현재는 기부,기부 공제자,배송지,회원 테이블에서 조인을 통해서 얻어야 했다."),"\n",l.createElement(n.h3,null,"처음에는.."),"\n",l.createElement(n.p,null,"아래 쿼리처럼 서브쿼리를 사용해서\n특정기간에 기부했던 회원 정보를 추출했고(쿼리 A)\n추출된 회원 id 로 기부 데이터를 추출했다."),"\n",l.createElement(n.p,null,"(쿼리 A)"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"select  \nm.*, \ndonation_count as '기증횟수'\nfrom(SELECT \n  member_id, count(member_id) as donation_count FROM donations as d\n  GROUP BY member_id HAVING  count(*) > 1 ) as dc\ninner join members as m\non dc.member_id = m.id\n ...\nand donation_count between 1 and 4\n")),"\n",l.createElement(n.p,null,"(쿼리 B)"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"SELECT\na.*,\nb.*,\nc.*\nFROM donations as a\nleft join deliveries as b on a.id = b.donation_id\nleft join donors as c on a.id = c.donation_id\nand a.member_id IN ( ... m.id 컬럼만 추출되도로 쿼리 A 를 수정 후 입력 )\n\n")),"\n",l.createElement(n.p,null,"(쿼리 A) 의 경우 서브쿼리를 썼는데 하나의 쿼리에서 같은 테이블을 여러번 써서 겨우 데이터를 추출했다.\n다시 찾아보니 서브쿼리를 쓰지 않고 ",l.createElement(n.code,null,"group by")," 를 써서  ",l.createElement(n.code,null,"기부횟수"),"를 구할 수 있었다."),"\n",l.createElement(n.p,null,"(쿼리 C)"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"select\nm.*,\ncount(m.id) as '기증횟수'\nfrom donations as d\ninner join members as m\non d.member_id = m.id\nand ...\ngroup by m.id\nhaving count(m.id) between 1 and 4\n")),"\n",l.createElement(n.p,null,"(쿼리 C) 처럼 ",l.createElement(n.code,null,"group by m.id having count(m.id) between 1 and 4"),l.createElement(n.br),"\n","회원당 기부 횟수를 알 수 있고 having 써서 조건까지 걸 수 있다."),"\n",l.createElement(n.h2,null,"20221102  GROUP BY 확장"),"\n",l.createElement(n.p,null,"scheduled_date 는 20220912 의 형태의 string 이다\n년월로 group 를 만들어서 년/월에 예약된 발송건수를 알 수 있다"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"SELECT DATE_FORMAT(scheduled_date,'%Y%m') yearAndMonth ,COUNT(*) count\nFROM `news`\nGROUP BY DATE_FORMAT(scheduled_date,'%Y%m')\nHAVING yearAndMonth is not null;\n")),"\n",l.createElement(n.table,null,l.createElement(n.thead,null,l.createElement(n.tr,null,l.createElement(n.th,null,"yearAndMonth"),l.createElement(n.th,null,"count"))),l.createElement(n.tbody,null,l.createElement(n.tr,null,l.createElement(n.td,null,"202209"),l.createElement(n.td,null,"6")),l.createElement(n.tr,null,l.createElement(n.td,null,"202211"),l.createElement(n.td,null,"1")))),"\n",l.createElement(n.h3,null,"group by having"),"\n",l.createElement(n.p,null,l.createElement(n.a,{href:"https://m.blog.naver.com/kim87838/110157966081"},"https://m.blog.naver.com/kim87838/110157966081"),"\n",l.createElement(n.a,{href:"https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=battledocho&logNo=220034040242"},"https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=battledocho&logNo=220034040242"),"\n",l.createElement(n.a,{href:"https://wikidocs.net/132671"},"https://wikidocs.net/132671")))}var c=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.RP)(),e.components);return n?l.createElement(n,e,l.createElement(r,e)):r(e)},o=t(7292);function m(e){return l.createElement(o.A,e,l.createElement(c,e))}o.A}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-database-mysql-2022-06-08-mysql-group-by-having-mdx-8605b9842a529061ba95.js.map