{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-git-2023-05-26-git-github-actions-build-release-mdx-6fcee4d6e9f1e5a7a0c1.js","mappings":"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","sources":["webpack://gwiyeom-blog/./content/posts/git/2023-05-26-git-github-actions-build-release.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    ol: \"ol\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    blockquote: \"blockquote\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"매번 module 을 사용하고 relase tag 를 생성해 최신버전으로 배포한다\\r\\n코드를 머지하면 자동으로  배포하고 싶다\"), \"\\n\", React.createElement(_components.h1, null, \"사용기술\"), \"\\n\", React.createElement(_components.p, null, \"github/actions \", React.createElement(_components.a, {\n    href: \"https://github.com/features/actions\"\n  }, \"https://github.com/features/actions\"), \"\\r\\ncodecov \", React.createElement(_components.a, {\n    href: \"https://about.codecov.io/\"\n  }, \"https://about.codecov.io/\")), \"\\n\", React.createElement(_components.h1, null, \"작업내용\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"GitHub Actions를 사용하여 Go 코드를 빌드하고 테스트커버리지를 확인하자\"), \"\\n\", React.createElement(_components.li, null, \"GitHub Actions를 사용하여 Go 코드를 자동으로 릴리스하고 버전을 증가시키자\"), \"\\n\", React.createElement(_components.li, null, \"README.md\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"![Build Status](https://github.com/{사용자명}/{repository 명}/actions/workflows/build.yml/badge.svg)\\r\\n[![codecov](https://codecov.io/gh/beautiful-store/gosiren/branch/main/graph/badge.svg?token={???})](https://codecov.io/gh/{사용자명}/{repository 명})\\r\\n![GitHub go.mod Go version](https://img.shields.io/github/go-mod/go-version/{사용자명}/{repository 명})\\r\\n![GitHub release (latest SemVer)](https://img.shields.io/github/v/release/{사용자명}/{repository 명})\\n\")), \"\\n\", React.createElement(_components.p, null, \"codecov 는 토큰이 필요한거 같다 (아직 알아보는 중)\"), \"\\n\", React.createElement(_components.h1, null, \"build.yml\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"# This workflow will build a golang project\\r\\n# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go\\r\\n\\r\\nname: Go\\r\\n\\r\\non:\\r\\n  push:\\r\\n    branches: [ \\\"main\\\" ]\\r\\n  pull_request:\\r\\n    branches: [ \\\"main\\\" ]\\r\\n\\r\\njobs:\\r\\n\\r\\n  build:\\r\\n    runs-on: ubuntu-latest\\r\\n    steps:\\r\\n    - uses: actions/checkout@v3\\r\\n\\r\\n    - name: Set up Go\\r\\n      uses: actions/setup-go@v3\\r\\n      with:\\r\\n        go-version: 1.19\\r\\n\\r\\n    - name: Build\\r\\n      run: go build -v ./...\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"test 실행을 원한다면\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"    - name: Run coverage\\r\\n      run: go test -race -coverprofile=coverage.txt -covermode=atomic\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"coverage 추가를 원한다면\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"    - name: Upload coverage to Codecov\\r\\n      uses: codecov/codecov-action@v3\\n\")), \"\\n\", React.createElement(_components.h1, null, \"release.yml\"), \"\\n\", React.createElement(_components.p, null, \"배포시 relase 태그를 자동으로 올리려면 해당 파일도 추가함\\r\\n만약 build.yml 이랑 같이 사용한다면\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \" - name: Build\\r\\n        uses: ./build.yml\\n\")), \"\\n\", React.createElement(_components.p, null, \"이렇게 파일에 쓴다\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"actions/create-release@v1\"), \" 은 릴리스 생성과 버전 태그 설정을 한 번에 처리해준다\\r\\n따라서 relase 전\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \" tag_name: v1.0.0  # 릴리스 버전을 여기에 지정합니다.\\r\\n release_name: Release v1.0.0\\n\")), \"\\n\", React.createElement(_components.p, null, \"값을 꼭 변경해야 한다\"), \"\\n\", React.createElement(_components.p, null, \"(참고)\\r\\n\", React.createElement(_components.code, null, \"secrets.GITHUB_TOKEN\"), \"은 워크플로우가 실행되는 동안 자동으로 생성되고,레포지토리와 관련된 권한을 가지고 있습니다.\\r\\n따라서 별도로 토큰을 생성하거나 설정할 필요는 없습니다.\"), \"\\n\", React.createElement(_components.p, null, \"main 브랜치에 변경 사항이 푸시되고 머지될 때마다 릴리즈 버전이 자동으로 증가하여 새로운 릴리즈가 생성\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"name: Auto Release Workflow\\r\\n\\r\\non:\\r\\n  push:\\r\\n    branches: [ \\\"main\\\" ]\\r\\n\\r\\njobs:\\r\\n\\r\\n  build:\\r\\n    runs-on: ubuntu-latest\\r\\n    steps:\\r\\n       - name: Checkout code\\r\\n        uses: actions/checkout@v3\\r\\n\\r\\n      - name: Build\\r\\n        uses: ./build.yml\\r\\n\\r\\n      - name: Create Release\\r\\n        id: create_release\\r\\n        uses: actions/create-release@v1\\r\\n        env:\\r\\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\\r\\n        with:\\r\\n          tag_name: v1.0.0\\r\\n          release_name: Release v1.0.0\\r\\n          draft: false\\r\\n          prerelease: false\\r\\n\\n\")), \"\\n\", React.createElement(_components.p, null, \"프로젝트 루트 디렉토리에 .github/workflows 폴더를 생성합니다.\\r\\n.github/workflows 폴더 내에 새로운 YAML 파일을 생성합니다. 예를 들어, release.yml로 파일 이름을 지정할 수 있습니다.\\r\\nYAML 파일 내에서 다음과 같은 구성을 추가합니다:\"), \"\\n\", React.createElement(_components.h1, null, \"packge.json 스크립트로 배포\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"[에러]could not read Username for '\", React.createElement(_components.a, {\n    href: \"https://github.com\"\n  }, \"https://github.com\"), \"': No such device or address\\r\\n\", React.createElement(_components.a, {\n    href: \"https://github.com/tschaub/gh-pages/issues/384\"\n  }, \"https://github.com/tschaub/gh-pages/issues/384\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"에서 찾았다..\\r\\n\", React.createElement(_components.code, null, \"git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY\"), \"\\r\\n지정해서 배포 성공\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/Users/gwiyeom/Documents/react/gwiyeomgo.github.io/content/posts/git/2023-05-26-git-github-actions-build-release.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","a","ol","li","pre","code","ul","blockquote","_provideComponents","components","React","href","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}