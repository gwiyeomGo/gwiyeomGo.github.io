{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-c-github-gwiyeomgo-github-io-content-posts-server-database-mysql-2023-01-03-mysql-json-data-replace-and-insert-mdx-5b91c638410e0adada9d.js","mappings":"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","sources":["webpack://gwiyeom-blog/./content/posts/server/database/mysql/2023-01-03-mysql-jsonData-replace-and-insert.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h3: \"h3\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    blockquote: \"blockquote\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h3, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"어드민 서비스 와 기부 서비스는 분리되어 있습니다.\\r\\n어드민 서비스에 조직도\"), \"\\n\", React.createElement(_components.h3, null, \"개선 내용\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"|id|name|connect|\\r\\n|---|---|---|\\r\\n|1|강동|{\\\"code\\\":\\\"200122\\\"}'|\\r\\n\\n\")), \"\\n\", React.createElement(_components.h3, null, \"json data 를 replace 해서 조회하기\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"기존의 connect 컬럼의 json string 데이터의 code key 값을 변경\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"select id, name, json_replace(connect, '$.code', \\\"300123\\\") from employees where id = 1;\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"|id|name|connect|\\r\\n|---|---|---|\\r\\n|1|강동|'{\\\"code\\\":\\\"300123\\\"}'|\\n\")), \"\\n\", React.createElement(_components.h3, null, \"json data 에 key 와 value 추가 해서 조회하기\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"select id, name, JSON_INSERT(connect, '$.type', \\\"STORE\\\") from employees where id = 1;\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"|id|name|connect|\\r\\n|---|---|---|\\r\\n|1|강동|'{\\\"code\\\":\\\"200122\\\",\\\"type\\\":\\\"STORE\\\"}'|\\n\")), \"\\n\", React.createElement(_components.h3, null, \"json data 에 key 와 value 추가해서 table update\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"UPDATE test\\r\\nset `connect` =\\r\\nJSON_INSERT(connect, '$.type', 'STORE')\\r\\nwhere id = 1;\\n\")), \"\\n\", React.createElement(_components.h3, null, \"작업을하다가 ... 기능 개발로 기존 data 를 바꿔야 하는 상황...\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"|id|name|connect|\\r\\n|---|---|---|\\r\\n|1|강동|'{\\\"code\\\":\\\"100008\\\"}'|\\r\\n|2|군포|'{\\\"code\\\":\\\"200122\\\"}'|\\r\\n|3|대전|'{\\\"code\\\":\\\"200026\\\"}'|\\n\")), \"\\n\", React.createElement(_components.p, null, \"code 가 1로 시작하면 type \\\"CENTER\\\" 로 update\\r\\ncode 가 2로 시작하면 type \\\"STORE\\\" 로 update\"), \"\\n\", React.createElement(_components.p, null, \"이렇게 Where 절에서 JSON_EXTRACT 에 \", React.createElement(_components.code, null, \">=\"), \" 와 \", React.createElement(_components.code, null, \"<\"), \" 로 100000 이상 200000 미만인 경우 CENTER 로 type 을 추가\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"UPDATE test\\r\\n set `connect` = JSON_replace(connect, '$.type', 'CENTER')\\r\\nWHERE JSON_EXTRACT(connect, '$.code') >= '100000' AND  JSON_EXTRACT(connect, '$.code') <'200000';\\n\")), \"\\n\", React.createElement(_components.p, null, \"이렇게  경우에 따라 update 를 추가하면 귀찮으니 한번에 업데이트 하려면?\\r\\n\", React.createElement(_components.code, null, \"case when \"), \"을 사용해 보자\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"UPDATE test\\r\\n SET `connect` =\\r\\n CASE\\r\\n WHEN JSON_EXTRACT(connect, '$.code') <'200000'\\r\\n\\tTHEN  JSON_insert(connect, '$.type', 'CENTER')\\r\\n WHEN JSON_EXTRACT(connect, '$.code') >= '200000'\\r\\n\\tTHEN  JSON_insert(connect, '$.type', 'STORE')\\r\\nEND;\\n\")), \"\\n\", React.createElement(_components.p, null, \"이렇게 하면 조건에 따라 update 된다.\"), \"\\n\", React.createElement(_components.h3, null, React.createElement(_components.a, {\n    href: \"https://database.guide/json_set-vs-json_insert-vs-json_replace-in-mysql-whats-the-difference/\"\n  }, \"JSON_SET() vs JSON_INSERT() vs JSON_REPLACE() in MySQL: What’s the Difference?\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"JSON_SET() replaces existing values and adds nonexisting values.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"JSON_INSERT() inserts values without replacing existing values.\"), \"\\n\", React.createElement(_components.li, null, \"JSON_REPLACE() replaces only existing values.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"JSON_SET 는 데이터가 존재하지 않는 컬럼에도 값을 추가한다\"), \"\\n\", React.createElement(_components.h3, null, \"참고\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://stackoverflow.com/questions/36264369/mysql-5-7-appending-key-value-to-nested-json-object\"\n  }, \"https://stackoverflow.com/questions/36264369/mysql-5-7-appending-key-value-to-nested-json-object\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"C:/github/gwiyeomgo.github.io/content/posts/server/database/mysql/2023-01-03-mysql-jsonData-replace-and-insert.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h3","p","pre","code","ul","li","a","blockquote","_provideComponents","components","React","href","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}