{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-c-github-gwiyeomgo-github-io-content-posts-server-network-rest-2022-05-03-rest-compare-row-count-of-two-tables-mdx-41202802135d12d23555.js","mappings":"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","sources":["webpack://gwiyeom-blog/./content/posts/server/network/rest/2022-05-03-rest-compareRowCountOfTwoTables.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h3, null, \"배경\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"applications table\"), \"\\n\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"id\"), React.createElement(_components.th, null, \"contents\"), React.createElement(_components.th, null, \"상태\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, \"1\"), React.createElement(_components.td, null, \"테스트1\"), React.createElement(_components.td, null, \"Saved\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"2\"), React.createElement(_components.td, null, \"테스트2\"), React.createElement(_components.td, null, \"Registered\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"3\"), React.createElement(_components.td, null, \"테스트3\"), React.createElement(_components.td, null, \"Approved\")))), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"reports table\"), \"\\n\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"id\"), React.createElement(_components.th, null, \"contents\"), React.createElement(_components.th, null, \"상태\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, \"1\"), React.createElement(_components.td, null, \"테스트1\"), React.createElement(_components.td, null, \"Saved\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"2\"), React.createElement(_components.td, null, \"테스트2\"), React.createElement(_components.td, null, \"Registered\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"3\"), React.createElement(_components.td, null, \"테스트3\"), React.createElement(_components.td, null, \"Rejected\")))), \"\\n\", React.createElement(_components.p, null, \"모든 상태 값\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"상태\"), React.createElement(_components.th, null, \"한글\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, \"Saved\"), React.createElement(_components.td, null, \"임시저장\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"Registered\"), React.createElement(_components.td, null, \"신청\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"Reworked\"), React.createElement(_components.td, null, \"재작업\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"Approved\"), React.createElement(_components.td, null, \"승인\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"Rejected\"), React.createElement(_components.td, null, \"반려\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"Rejected\"), React.createElement(_components.td, null, \"반려\")))), \"\\n\", React.createElement(_components.p, null, \"기관에는 여러명의 소속 직웝이 있다.\\r\\n기관은 물품을 선택할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"신청의 상태가 Registered,reworked,approved 이고\\r\\n보고서의 상태가 Registered,Approved 이면\\r\\n해당 기관의 담당자는 물품을 신청할 수 있다.\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"POST\"), React.createElement(_components.th, null, \"PUT\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, \"입력값이 승인된 기관인지 확인\"), React.createElement(_components.td)), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"입력값이 승인된 물품인지 확인\"), React.createElement(_components.td)), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"입력값이 사업분야가 물품의 사업분야와 일치하는지 확인\"), React.createElement(_components.td, null, \"신청이 존재하는지 확인\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"기관,물품으로 신청된 내용 있는지 확인,없다\"), React.createElement(_components.td, null, \"신청된 데이터의 기관과 신청서의 기관이 일치하는지 확인\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"입력값이 등록을 원하면,신청 가능한지 확인\"), React.createElement(_components.td, null, \"입력값이 등록을 원하면,신청 가능한지 확인\")))), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"\\r\\nfunc (s *ApplicationCUD) validateForCreation(c echo.Context) error {\\r\\n\\tcontext.Log(c).Traceln(\\\"\\\")\\r\\n\\r\\n\\torg := internal.Org{Id: s.OrgId, Status: enum.Approved.String()}\\r\\n\\tif b, err := org.GetOne(c); err != nil {\\r\\n\\t\\treturn err\\r\\n\\t} else if !b {\\r\\n\\t\\treturn errors.ApiInternalServerError(fmt.Sprintf(errors.MessageNoDataFound+\\\"(단체:%d)\\\", s.OrgId))\\r\\n\\t}\\r\\n\\r\\n\\tgoods := internal.Goods{Id: s.GoodsId, Status: enum.Registered.String()}\\r\\n\\tif b, err := goods.GetOne(c); err != nil {\\r\\n\\t\\treturn err\\r\\n\\t} else if !b {\\r\\n\\t\\treturn errors.ApiInternalServerError(fmt.Sprintf(errors.MessageNoDataFound+\\\"(물품개설:%d)\\\", s.GoodsId))\\r\\n\\t} else if goods.Expired || goods.Closed {\\r\\n\\t\\treturn errors.ApiInternalServerError(fmt.Sprintf(errors.MessageNotAvailable+\\\"(물품개설:%d)\\\", s.GoodsId))\\r\\n\\t}\\r\\n\\r\\n\\tif goods.BusinessField != \\\"*\\\" && org.BusinessField != goods.BusinessField {\\r\\n\\t\\treturn errors.ApiInternalServerError(fmt.Sprintf(errors.MessageParamsNotSame+\\\"(사업분야:%d)\\\", org.BusinessField))\\r\\n\\t} else if goods.BusinessRegion != \\\"00\\\" && org.BusinessRegion != goods.BusinessRegion {\\r\\n\\t\\treturn errors.ApiInternalServerError(fmt.Sprintf(errors.MessageParamsNotSame+\\\"(지역:%d)\\\", org.BusinessRegion))\\r\\n\\t}\\r\\n\\r\\n\\tapplications := internal.Application{OrgId: s.OrgId, GoodsId: s.GoodsId}\\r\\n\\tif results, err := applications.GetList(c); err != nil {\\r\\n\\t\\treturn err\\r\\n\\t} else if len(*results) > 0 {\\r\\n\\t\\treturn errors.ApiInternalServerError(fmt.Sprintf(errors.MessageExist + \\\"(신청)\\\"))\\r\\n\\t}\\r\\n\\r\\n\\tif s.Status == enum.Registered.String() {\\r\\n\\t\\tavailable, err := ApplicationRepository{}.IsApplicationAvailable(c, s.OrgId, 0)\\r\\n\\t\\tif err != nil {\\r\\n\\t\\t\\treturn err\\r\\n\\t\\t} else if !available {\\r\\n\\t\\t\\treturn errors.ApiInternalServerError(fmt.Sprintf(errors.MessageExist+\\\"(단체:%d)\\\", s.OrgId))\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\treturn nil\\r\\n}\\r\\n\\r\\nfunc (s *ApplicationCUD) validateForUpdating(c echo.Context) error {\\r\\n\\tcontext.Log(c).Traceln(\\\"\\\")\\r\\n\\r\\n\\torg := internal.Org{Id: s.OrgId, Status: enum.Approved.String()}\\r\\n\\tif b, err := org.GetOne(c); err != nil {\\r\\n\\t\\treturn err\\r\\n\\t} else if !b {\\r\\n\\t\\treturn errors.ApiInternalServerError(fmt.Sprintf(errors.MessageNoDataFound+\\\"(단체:%d)\\\", s.OrgId))\\r\\n\\t}\\r\\n\\r\\n\\tgoods := internal.Goods{Id: s.GoodsId, Status: enum.Registered.String()}\\r\\n\\tif b, err := goods.GetOne(c); err != nil {\\r\\n\\t\\treturn err\\r\\n\\t} else if !b {\\r\\n\\t\\treturn errors.ApiInternalServerError(fmt.Sprintf(errors.MessageNoDataFound+\\\"(물품개설:%d)\\\", s.GoodsId))\\r\\n\\t} else if goods.Expired || goods.Closed {\\r\\n\\t\\treturn errors.ApiInternalServerError(fmt.Sprintf(errors.MessageNotAvailable+\\\"(물품개설:%d)\\\", s.GoodsId))\\r\\n\\t}\\r\\n\\r\\n\\tif goods.BusinessField != \\\"*\\\" && org.BusinessField != goods.BusinessField {\\r\\n\\t\\treturn errors.ApiInternalServerError(fmt.Sprintf(errors.MessageParamsNotSame+\\\"(사업분야:%d)\\\", org.BusinessField))\\r\\n\\t} else if goods.BusinessRegion != \\\"00\\\" && org.BusinessRegion != goods.BusinessRegion {\\r\\n\\t\\treturn errors.ApiInternalServerError(fmt.Sprintf(errors.MessageParamsNotSame+\\\"(지역:%d)\\\", org.BusinessRegion))\\r\\n\\t}\\r\\n\\r\\n\\tapplication := internal.Application{Id: s.Id}\\r\\n\\tif b, err := application.GetOne(c); err != nil {\\r\\n\\t\\treturn err\\r\\n\\t} else if !b {\\r\\n\\t\\treturn errors.ApiInternalServerError(fmt.Sprintf(errors.MessageNoDataFound+\\\"(단체:%d)\\\", s.OrgId))\\r\\n\\t}\\r\\n\\r\\n\\tif application.OrgId != s.OrgId {\\r\\n\\t\\treturn errors.ApiInternalServerError(fmt.Sprintf(errors.MessageParamsNotSame+\\\"(단체:%d)\\\", s.OrgId))\\r\\n\\t} else if application.GoodsId != s.GoodsId {\\r\\n\\t\\treturn errors.ApiInternalServerError(fmt.Sprintf(errors.MessageParamsNotSame+\\\"(물품개설:%d)\\\", s.GoodsId))\\r\\n\\t}\\r\\n\\r\\n\\tif s.Status == enum.Registered.String() {\\r\\n\\t\\tavailable, err := ApplicationRepository{}.IsApplicationAvailable(c, s.OrgId, s.Id)\\r\\n\\t\\tif err != nil {\\r\\n\\t\\t\\treturn err\\r\\n\\t\\t} else if !available {\\r\\n\\t\\t\\treturn errors.ApiInternalServerError(fmt.Sprintf(errors.MessageExist+\\\"(단체:%d)\\\", s.OrgId))\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\treturn nil\\r\\n}\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"func (ApplicationRepository) IsApplicationAvailable(c echo.Context, orgID int64, id int64) (bool, error) {\\r\\n\\tcontext.Log(c).Traceln(\\\"\\\")\\r\\n\\r\\n\\tapplicationStatus := []string{enum.Registered.String(), enum.Reworked.String(), enum.Approved.String()}\\r\\n\\tbuilder := context.DB(c).Table(\\\"applications\\\").Where(\\\"del is null or del = 0\\\").In(\\\"status\\\", applicationStatus)\\r\\n\\tif orgID != 0 {\\r\\n\\t\\tbuilder = builder.And(\\\"org_id = ?\\\", orgID)\\r\\n\\t}\\r\\n\\tif id != 0 {\\r\\n\\t\\tbuilder = builder.And(\\\"id !=?\\\", id)\\r\\n\\t}\\r\\n\\r\\n\\tvar applications []map[string]string\\r\\n\\tif err := builder.Find(&applications); err != nil {\\r\\n\\t\\tcontext.Log(c).Errorln(err.Error())\\r\\n\\t\\treturn false, errors.ApiInternalServerError(err.Error())\\r\\n\\t}\\r\\n\\r\\n\\treportStatus := []string{enum.Registered.String() enum.Reworked.String(), enum.Approved.String()}\\r\\n\\treport := context.DB(c).Table(\\\"reports\\\").Where(\\\"del is null or del = 0\\\").And(\\\"org_id = ?\\\", orgID).In(\\\"status\\\", reportStatus)\\r\\n\\tif id != 0 {\\r\\n\\t\\treport.And(\\\"application_id !=?\\\", id)\\r\\n\\t}\\r\\n\\tvar reports []map[string]string\\r\\n\\tif err := report.Find(&reports); err != nil {\\r\\n\\t\\tcontext.Log(c).Errorln(err.Error())\\r\\n\\t\\treturn false, errors.ApiInternalServerError(err.Error())\\r\\n\\t}\\r\\n\\r\\n\\tif len(applications) == len(reports) {\\r\\n\\t\\treturn true, nil\\r\\n\\t}\\r\\n\\r\\n\\treturn false, nil\\r\\n}\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"C:/github/gwiyeomgo.github.io/content/posts/server/network/rest/2022-05-03-rest-compareRowCountOfTwoTables.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h3","ul","li","table","thead","tr","th","tbody","td","p","pre","code","_provideComponents","components","React","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}