{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-database-mysql-2021-04-22-mysql-index-mdx-0d127bd533494d3ac775.js","mappings":"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","sources":["webpack://gwiyeom-blog/./content/posts/server/database/mysql/2021-04-22-mysql-Index.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h3: \"h3\",\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    ol: \"ol\",\n    li: \"li\",\n    ul: \"ul\",\n    blockquote: \"blockquote\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h3, null, \"1. Full table scan\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://en.wikipedia.org/wiki/Full_table_scan\"\n  }, \"Full table scan\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"A full table scan (also known as a sequential scan) is a scan made on a database where each row of the table is read in a sequential (serial) order and the columns encountered are checked for the validity of a condition\\n\")), \"\\n\", React.createElement(_components.p, null, \"전체 테이블 검색(순차 검색이라고도 함)은 데이터베이스에서 테이블의 각 행을 순차적(시리얼) 순서로 읽고 발견된 열이 조건의 유효성을 검사하는 검색입니다\"), \"\\n\", React.createElement(_components.h3, null, \"2.index 정의\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://en.wikipedia.org/wiki/Database_index\"\n  }, \"Database index\")), \"\\n\", React.createElement(_components.p, null, \"A database index is a \", React.createElement(_components.a, {\n    href: \"https://en.wikipedia.org/wiki/Data_structure\"\n  }, \"data structure\"), \" that improves the speed of data retrieval operations(데이터 검색 작업) on a database table (at the cost of)(-을 희생하여,비용을 지불하여) additional writes and storage space to maintain the index data structure.\"), \"\\n\", React.createElement(_components.p, null, \"데이터베이스 인텍스는\\n데이터베이스 테이블에서\\n데이터 검색 작업의 속도를 증진시키는 자료 구조이다\\n추가 쓰기와 저장공간을 희생하여\\n인덱스 데이터 구조를 유지하기 위해서\"), \"\\n\", React.createElement(_components.p, null, \"Indexes (are used to)(~ 하는데 사용되다) quickly (locate)(위치하고 있다) data without having to search every row in a database table every time a database table is accessed.\"), \"\\n\", React.createElement(_components.p, null, \"인덱스들은 빠르게 데이터를 위치하는데 사용된다.\\n데이터베이스 테비을에 모든 행을 검색하는 것 없이\\n데이터베이스 테이블에 액세스할 때마다.\"), \"\\n\", React.createElement(_components.h3, null, \"2022-02-09\"), \"\\n\", React.createElement(_components.h3, null, \"배경\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"api 가 전체 멤버를 조회하고 있다.\"), \"\\n\", React.createElement(_components.li, null, \"회원은 10만건 이상의 데이터이다\"), \"\\n\", React.createElement(_components.li, null, \"조회시 로딩이 오래 걸린다.\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"기존 쿼리를 db에 조회한다\\n\", React.createElement(_components.a, {\n    href: \"../2022-08-01-mysql-slow-query.mdx\"\n  }, \"시간확인 slow-query\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"쿼리 튜닝?\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"개선 방법\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"인덱스는 특별한 종류의조회 테이블데이터베이스 검색 엔진에서 테이블에서 데이터 검색 속도를 높이는 데 사용\\n(특히 select 쿼리와, where 절의 속도를 높입)\\n(but INSERT 그리고 UPDATE 쿼리 성능 저하)\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"검색조건에 사용되는 id ,meber_id 등 에 index를 걸어준다\"), \"\\n\", React.createElement(_components.h3, null, \"인덱스 생성 구문\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"CREATE INDEX index_name\\nON table_name (column1, column2, ...);\\n//출처: https://www.w3schools.com/sql/sql_create_index.asp\\n\")), \"\\n\", React.createElement(_components.p, null, \"(tip)중복 값을 허용하지 않는 \", React.createElement(_components.code, null, \"UNIQUE INDEX\"), \" 도 존재함, 인덱스 생성 구문은 데이터베이스마다 다름\"), \"\\n\", React.createElement(_components.h3, null, \"index 를 어느 컬럼에 걸어야할까?\"), \"\\n\", React.createElement(_components.p, null, \"지금 개발팀에서는 slow-query 가 발생할 경우 개발자에게 알림이 온다\\n찾아보니 index 를 걸어야하는 특정 컬럼들이 존재한다고 한다\"), \"\\n\", React.createElement(_components.h3, null, \"mysql 책 기록\"), \"\\n\", React.createElement(_components.p, null, \"디스크 읽기 방식?\\n랜덤 I/O\\n순차 I/O\"), \"\\n\", React.createElement(_components.p, null, \"데이터베이스의 성능 튜닝은 어떻게 디스크 I/O 를 줄이느냐가 관건\\n디스크의 성능은 디스크의 헤더의 위치 이동 없이 얼마나 많은 데이터를 한 번에 기록하느냐\"), \"\\n\", React.createElement(_components.p, null, \"일반적으로 쿼리를 튜닝하는 것은 랜덤 I/O 자체를 줄여주는 것이 목적\\n쿼리를 처리하는 데 꼭 필요한 데이터만 읽도록 쿼리 개선\"), \"\\n\", React.createElement(_components.p, null, \"인덱스 레인지 스캔은 데이터를 읽기 위해 주로 랜덤 I/O 사용\\n풀 데이터 스캔은 순차 I/O 를 사용\\n그래서 큰 테이블의 레코드 대부분을 읽는 작업에서는 인덱스를 사용하지 않고\\n풀 테이블 스캔을 사용하도록 유도할 때도 있다.\"), \"\\n\", React.createElement(_components.p, null, \"인덱스란?\\n색인?\"), \"\\n\", React.createElement(_components.p, null, \"SortedList 는 저장되는 값을 할상 정렬된 상태를 유지하는 자료구조\\nDBMS 의 인덱스도 저장되는 컬럼의 값을 이용해 항상 정렬 상태를 유지\"), \"\\n\", React.createElement(_components.p, null, \"-> 인덱스가 많은 테이블은 당연히 insert,update,delete 문장의 처리가 느리다\\n하지만 찾아보기용표(인덱스)를 가지고 있기 때문에 select 문장은 매우 빠름\"), \"\\n\", React.createElement(_components.p, null, \"ArrayList 값을 저장되는 순서 그대로 유지하는 자룓구조\\n데이터 파일은 저장된 순서대로 별도의 정렬 없이 그대로 저장\"), \"\\n\", React.createElement(_components.h3, null, \"참고\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://medium.com/javarevisited/indexes-when-to-use-and-when-to-avoid-them-39c56e5a7329\"\n  }, \"https://medium.com/javarevisited/indexes-when-to-use-and-when-to-avoid-them-39c56e5a7329\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/gwiyeomgo.github.io/gwiyeomgo.github.io/content/posts/server/database/mysql/2021-04-22-mysql-Index.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h3","p","a","pre","code","ol","li","ul","blockquote","_provideComponents","components","React","href","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}