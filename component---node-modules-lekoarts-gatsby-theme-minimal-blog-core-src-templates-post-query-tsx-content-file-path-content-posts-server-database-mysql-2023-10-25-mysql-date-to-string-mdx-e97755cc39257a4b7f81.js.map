{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-database-mysql-2023-10-25-mysql-date-to-string-mdx-e97755cc39257a4b7f81.js","mappings":"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","sources":["webpack://gwiyeom-blog/./content/posts/server/database/mysql/2023-10-25-mysql-date-to-string.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    ul: \"ul\",\n    li: \"li\",\n    blockquote: \"blockquote\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"배경\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"datetime 인 컬럼을 varchar 로 변경해야 했다\"), \"\\n\", React.createElement(_components.li, null, \"datetime 컬럼에  '%Y-m%-d %H:%i:%s' 형태 데이터 존재함\"), \"\\n\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"sent_date (datetime 타입) 데이터 => varchar 로 타입 변경\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"DATE_FORMAT(date,format )\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"-- 백업 위해 컬럼 추가\\r\\nALTER TABLE test_table ADD sent_date_varchar VARCHAR(20);\\r\\n\\r\\n-- 업데이트\\r\\nUPDATE test_table SET sent_date_varchar = DATE_FORMAT(sent_date,'%Y%m%d%H%i%s')  WHERE id > 0 and sent_date is not null;\\r\\n\\r\\n-- 컬럼 이름 변경\\r\\n\\r\\nALTER TABLE test_table\\r\\nCHANGE COLUMN `sent_date` `sent_date_old` DATETIME NULL DEFAULT NULL ,\\r\\nCHANGE COLUMN `sent_date_varchar` `sent_date` VARCHAR(20) NULL DEFAULT NULL ;\\r\\n\\r\\n-- 삭제\\r\\nALTER TABLE store_news DROP COLUMN sent_date_old;\\n\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"sent_date varchar  형태 변환\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"STR_TO_DATE( str, format )\"), \"\\n\", React.createElement(_components.li, null, \"DATE_FORMAT( date , format )\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"date 타입은 DATE 또는 DATETIME\"), \"\\n\", React.createElement(_components.li, null, \"날짜가 VARCHAR 을 STR_TO_DATE 으로 DATE 또는 DATETIME 형식으로 변경 후 사용\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"SELECT sent_date as '기존 str',\\r\\n    DATE_FORMAT(\\r\\n        STR_TO_DATE(sent_date, '%Y%m%d%H%i%s'),\\r\\n        '%Y-%m-%d %H:%i:%s') as '변경 str' from store_news ;\\n\")), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"기존 str\"), React.createElement(_components.th, null, \"변경 str\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, \"'20221117180000'\"), React.createElement(_components.td, null, \"'2022-11-17 18:00:00'\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"'20221121180000'\"), React.createElement(_components.td, null, \"'2022-11-21 18:00:00'\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"'20221130180000'\"), React.createElement(_components.td, null, \"'2022-11-30 18:00:00'\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"NULL\"), React.createElement(_components.td, null, \"NULL\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"'20221118180000'\"), React.createElement(_components.td, null, \"'2022-11-18 18:00:00'\")))), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"(mysql 버전 '8.0.33') 에서 DATE_FORMAT 에  시간 형식 string 데이터를 넣었는데 동작했다... 원래 되는건가?\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"SELECT DATE_FORMAT('20231215180000', '%Y-%m-%d %H:%i:%s')  as changestr;\\r\\nSELECT DATE_FORMAT('2023-12-15 18:00:00', '%Y%m%d%H%i%s')  as changestr;\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"(tip 버전 확인)\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"SELECT VERSION();\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/Users/gwiyeom/Documents/etc/gwiyeomgo.github.io/content/posts/server/database/mysql/2023-10-25-mysql-date-to-string.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","ul","li","blockquote","p","pre","code","table","thead","tr","th","tbody","td","_provideComponents","components","React","className","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}