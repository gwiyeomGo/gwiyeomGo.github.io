{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-client-typescript-2024-03-13-typescript-record-mdx-dbc7c4c677b5825e5d23.js","mappings":"mNAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,IAAK,MACLC,KAAM,OACNC,EAAG,IACHC,EAAG,MACFC,EAAAA,EAAAA,MAAsBZ,EAAMa,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBb,EAAYG,GAAI,KAAM,gBAAiB,KAAMU,EAAAA,cAAoBb,EAAYI,GAAI,KAAM,KAAMS,EAAAA,cAAoBb,EAAYK,GAAI,KAAM,OAAQ,KAAMQ,EAAAA,cAAoBb,EAAYK,GAAI,KAAM,YAAa,MAAO,KAAMQ,EAAAA,cAAoBb,EAAYM,GAAI,KAAM,KAAMO,EAAAA,cAAoBb,EAAYK,GAAI,KAAM,2CAA4C,KAAMQ,EAAAA,cAAoBb,EAAYK,GAAI,KAAM,4CAA6C,KAAMQ,EAAAA,cAAoBb,EAAYK,GAAI,KAAM,8EAA+E,MAAO,KAAMQ,EAAAA,cAAoBb,EAAYO,IAAK,KAAMM,EAAAA,cAAoBb,EAAYQ,KAAM,KAAM,sJAAuJ,KAAMK,EAAAA,cAAoBb,EAAYM,GAAI,KAAM,KAAMO,EAAAA,cAAoBb,EAAYK,GAAI,KAAM,+BAAgC,MAAO,KAAMQ,EAAAA,cAAoBb,EAAYO,IAAK,KAAMM,EAAAA,cAAoBb,EAAYQ,KAAM,KAAM,qSAAsS,KAAMK,EAAAA,cAAoBb,EAAYG,GAAI,KAAM,MAAO,KAAMU,EAAAA,cAAoBb,EAAYS,EAAG,KAAMI,EAAAA,cAAoBb,EAAYU,EAAG,CAC5gDI,KAAM,mEACL,mEAAoE,KAAMD,EAAAA,cAAoBb,EAAYU,EAAG,CAC9GI,KAAM,8EACL,+EACL,CAKA,MAJA,SAAoBf,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOgB,QAASC,GAAaf,OAAOC,OAAO,CAAC,GAAGS,EAAAA,EAAAA,MAAsBZ,EAAMa,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWjB,EAAOc,EAAAA,cAAoBf,EAAmBC,IAAUD,EAAkBC,EAC9H,E,UCnBe,SAASkB,EAAiBlB,GACvC,OAAOc,EAAAA,cAAoBK,EAAAA,EAAenB,EAAOc,EAAAA,cAAoBM,EAAqBpB,GAC5F,CAHAmB,EAAAA,C","sources":["webpack://gwiyeom-blog/./content/posts/client/typescript/2024-03-13-typescript-record.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    ol: \"ol\",\n    li: \"li\",\n    ul: \"ul\",\n    pre: \"pre\",\n    code: \"code\",\n    p: \"p\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"record 사용 예시\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"템플릿\"), \"\\n\", React.createElement(_components.li, null, \"객체 타입 지정\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"'name', 'age', 'email'이라는 세 개의 키를 가진 객체\"), \"\\n\", React.createElement(_components.li, null, \"'name', 'age', 'email' 각 키의 값은 문자열 또는 숫자\"), \"\\n\", React.createElement(_components.li, null, \"만약 name과 email 은 string,age 만 number 로 엄격하게 지정 하고 싶다면 type 또는 interface 사용\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"type User = Record<'name' | 'age' | 'email', string | number>;\\n\\nconst user: User = {\\n  name: 'test',\\n  age: 21,\\n  email: 't@test.com',\\n};\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"문자열 키와 User 타입의 값으로 이루어진 객체\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"type User = {\\n  name :string,\\n  age : number,\\n  email: string\\n}\\n//type userMap = Record<'userA' | 'userB' , User>;\\nconst users: Record<string, User> = {\\n  'userA': { name: 'userA', age: 30, email: 'userA@t.com' },\\n  'userB': { name: 'userB', age: 25, email: 'userB@t.com' },\\n};\\n\")), \"\\n\", React.createElement(_components.h1, null, \"참고\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://www.squash.io/how-to-use-the-record-type-in-typescript/\"\n  }, \"https://www.squash.io/how-to-use-the-record-type-in-typescript/\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://itnext.io/use-typescript-record-types-for-better-code-ce1768c6cb53\"\n  }, \"https://itnext.io/use-typescript-record-types-for-better-code-ce1768c6cb53\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/gwiyeomgo.github.io/gwiyeomgo.github.io/content/posts/client/typescript/2024-03-13-typescript-record.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","ol","li","ul","pre","code","p","a","_provideComponents","components","React","href","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}