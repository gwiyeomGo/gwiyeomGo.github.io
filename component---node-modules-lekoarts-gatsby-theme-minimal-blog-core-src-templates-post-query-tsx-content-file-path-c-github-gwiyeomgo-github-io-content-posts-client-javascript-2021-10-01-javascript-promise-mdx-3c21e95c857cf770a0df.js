"use strict";(self.webpackChunkgwiyeom_blog=self.webpackChunkgwiyeom_blog||[]).push([[52],{1294:function(e,r,n){n.r(r),n.d(r,{Head:function(){return c.F},default:function(){return a}});var t=n(7294),l=n(1151);function o(e){const r=Object.assign({h1:"h1",p:"p",a:"a",pre:"pre",code:"code",h3:"h3"},(0,l.ah)(),e.components);return t.createElement(t.Fragment,null,t.createElement(r.h1,null,"배경"),"\n",t.createElement(r.p,null,"현재 업무에서 나도모르는 사이에 promise를 쓰고 있었다.\r\nAPI를 통해 데이터를 받은 후에 대한 결과를 받기 위해서 사용했다."),"\n",t.createElement(r.h1,null,t.createElement(r.a,{href:"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise")),"\n",t.createElement(r.p,null,"The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value\r\nPromise 객체는 비동기 작업이 맞이할 미래의 완료 또는 실패와 그 결과 값을 나타냅니다"),"\n",t.createElement(r.h1,null,"Promise 생성자 함수는 비동기 작업을 수행할 콜백 함수를 인자로 전달"),"\n",t.createElement(r.pre,null,t.createElement(r.code,null,"const test = new Promise((resolve, reject) => {\r\n  setTimeout(() => {\r\n    resolve('Success');\r\n  }, 1000);\r\n});\n")),"\n",t.createElement(r.h3,null,"Promise 상태"),"\n",t.createElement(r.pre,null,t.createElement(r.code,null,"|상태|의미|구현|\r\n|---|---|---|\r\n|pending|비동기 처리가 아직 수행되지 않은 상태|resolve 또는 reject 함수가 아직 호출되지 않은 상태|\r\n|fulfilled|비동기 처리가 수행된 상태 (성공)|resolve 함수가 호출된 상태|\r\n|rejected|비동기 처리가 수행된 상태 (실패)|reject 함수가 호출된 상태|\r\n|settled|비동기 처리가 수행된 상태 (성공 또는 실패)|resolve 또는 reject 함수가 호출된 상태|\r\n\n")),"\n",t.createElement(r.h1,null,"Promise 4가지 정적 메소드"),"\n",t.createElement(r.pre,null,t.createElement(r.code,null,"\r\n1. 성공: new Promise((resolve,reject) => { resolve('Success') })\r\n\r\n` Promise.resolve(123).then((value)=>{console.lgo(value}) //123`\r\n2. 실패: new Promise((resolve,reject) => { reject(new Error()) })\r\n\r\n`Promise.reject()`\r\n\r\n\r\n프라미스를 사용하면 비교적 안전하고 관리하기 쉬운 코드를 작성할 수 있습니다.\r\n프라미스는 콜백을 예측 가능한 패턴으로 사용할 수 있게 하며,프라미스 없이 콜백만 사용했을 때 나타날 수 있는 엉뚱한 현상이나 찾기 힘든 버그를 상당수 해결합니다.\r\n\r\n프라미스는 성공 또는 실패 둘 중 하나만 발생\r\n프라미스는 객체=> 전달 가능\r\n프라미스는 비동기 코드를 단순화하고 콜백이 두 번 이상 실행되는 문제를 방지\r\n단 resolve,reject를 꼭 호출해야됨\r\n프로미스가 결정되지 않은 문제를 자동으로 해결하지는 못함\r\n\r\nnew Promise(); // 대기 상태\r\n\r\nnew Promise((resoleve,reject)=>{\r\n\tresolve(); \r\n\t//성공 상태\r\n\treject(); \r\n\t//실패 상태\r\n})\r\n\r\n\r\n\r\n### 참고\r\n[Promise.resolve()](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve)\r\nhttps://learnjs.vlpt.us/async/02-async-await.html\r\nhttps://han41858.tistory.com/11\r\nhttps://programmingsummaries.tistory.com/325\n")))}var s=function(e){void 0===e&&(e={});const{wrapper:r}=Object.assign({},(0,l.ah)(),e.components);return r?t.createElement(r,e,t.createElement(o,e)):o(e)},c=n(8804);function a(e){return t.createElement(c.Z,e,t.createElement(s,e))}c.Z}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-c-github-gwiyeomgo-github-io-content-posts-client-javascript-2021-10-01-javascript-promise-mdx-3c21e95c857cf770a0df.js.map