{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-c-github-gwiyeomgo-github-io-content-posts-server-golang-2022-05-23-go-testcase-mdx-b932bda038038676126a.js","mappings":"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","sources":["webpack://gwiyeom-blog/./content/posts/server/golang/2022-05-23-go-testcase.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    hr: \"hr\",\n    pre: \"pre\",\n    code: \"code\",\n    h4: \"h4\",\n    ul: \"ul\",\n    li: \"li\",\n    blockquote: \"blockquote\",\n    ol: \"ol\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"TDD(Test Driven Development)?\"), \"\\n\", React.createElement(_components.p, null, \"‘테스트 주도 개발’을 말한다.\\r\\n작은 단위로 테스트 케이스를 작성하고\\r\\n이를 통과하는 코드를 추가하는 단계를 반복하여 구현하는 것\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://hanamon.kr/tdd%EB%9E%80-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A3%BC%EB%8F%84-%EA%B0%9C%EB%B0%9C/\"\n  }, \"참고\")), \"\\n\", React.createElement(_components.h1, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"우리는  애자일 기방법론 중 XP 의 Test First 개념을 적용하여\\r\\nTest Case 를 작성합니다.\\r\\n이번 글에서는 golang 에서 test case 작성하는 내용을 쓰려고 한다.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h1, null, \"1.테스트 케이스를 위한 환경 구성 (테스트 픽스처 설정)\"), \"\\n\", React.createElement(_components.p, null, \"테스트 데이터베이스와 테스트 픽스처 설정\\r\\n테스트 코드를 실행하기 위해서는 테스트 데이터베이스와 데이터는 테스트 픽스처가 필요합니다.\\r\\n테스트 픽스텨는 System Under Test를 실행하기 위해 필요한 모든 것을 말합니다.\"), \"\\n\", React.createElement(_components.p, null, \"0.별도 관리가 필요 없는 메모리 데이터베이스 : sqlite\\r\\nSQLite는 MySQL나 PostgreSQL와 같은 데이터베이스 관리 시스템이지만, 서버가 아니라 응용 프로그램에 넣어 사용하는 비교적 가벼운 데이터베이스\"), \"\\n\", React.createElement(_components.p, null, \"이 데이터 베이스를 사용하기 위해서는 3개의 파일을 변경하고 추가해야 합니다.\"), \"\\n\", React.createElement(_components.p, null, \"첫번째 init_test.go 파일을 생성합니다.\\r\\ninit_test.go 파일에는 다음 3가지 설정을 합니다.\\r\\n0.config \", React.createElement(_components.a, {\n    href: \"https://github.com/jinzhu/configor\"\n  }, \"https://github.com/jinzhu/configor\"), \"\\r\\nconfig.InitConfig(\\\"config/config.json\\\")\\r\\n1.echo 프레임 워크 설정\\r\\n2.DB 엔진 설정\\r\\nxormEngine = common.InitTest()\"), \"\\n\", React.createElement(_components.p, null, \"init_test.go 전체 코드\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"//package controllers\\r\\nimport (\\r\\n\\t\\\"github.com/go-playground/validator/v10\\\"\\r\\n\\t\\\"github.com/go-xorm/xorm\\\"\\r\\n\\t\\\"github.com/labstack/echo\\\"\\r\\n\\t_ \\\"github.com/mattn/go-sqlite3\\\"\\r\\n\\t\\\"goods-donation-service/common\\\"\\r\\n\\t\\\"goods-donation-service/config\\\"\\r\\n)\\r\\n\\r\\nvar (\\r\\n\\techoApp          *echo.Echo\\r\\n\\txormEngine       *xorm.Engine\\r\\n\\thandleWithFilter func(handlerFunc echo.HandlerFunc, c echo.Context) error\\r\\n)\\r\\n\\r\\nfunc init() {\\r\\n\\tconfig.InitConfig(\\\"config/config.json\\\")\\r\\n\\tconfig.Config.Encrypt.GoodsEncryptKey = \\\"+KbPeShVmYq3t6w9z$C&F)J@NcQfTjWn\\\"\\r\\n\\r\\n\\txormEngine = common.InitTest()\\r\\n\\r\\n\\techoApp = echo.New()\\r\\n\\techoApp.Validator = &CustomValidator{validator: validator.New()}\\r\\n\\tdb := common.InitContextDB(xormEngine)\\r\\n\\r\\n\\thandleWithFilter = func(handlerFunc echo.HandlerFunc, c echo.Context) error {\\r\\n\\t\\treturn db(handlerFunc)(c)\\r\\n\\t}\\r\\n}\\r\\n\\r\\ntype CustomValidator struct {\\r\\n\\tvalidator *validator.Validate\\r\\n}\\r\\n\\r\\nfunc (cv *CustomValidator) Validate(i interface{}) error {\\r\\n\\treturn cv.validator.Struct(i)\\r\\n}\\r\\n\\r\\n\\n\")), \"\\n\", React.createElement(_components.p, null, \"두번째 test.go 파일에 sqlite를 사용하겠다고 코드를 추가합니다.\\r\\ncomon 디렉토리에 test.go파일에 sqlite를 사용하겠다고 코드를 입력합니다.\\r\\nengine, err := xorm.NewEngine(\\\"sqlite3\\\", \\\":memory:\\\")\"), \"\\n\", React.createElement(_components.p, null, \"test.go 전체 코드\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"package common\\r\\n\\r\\n\\r\\nimport (\\r\\n\\t\\\"github.com/go-xorm/xorm\\\"\\r\\n\\tlog \\\"github.com/sirupsen/logrus\\\"\\r\\n\\t\\\"os\\\"\\r\\n\\t\\\"runtime\\\"\\r\\n\\t\\\"xorm.io/core\\\"\\r\\n)\\r\\n\\r\\nfunc InitTest() *xorm.Engine {\\r\\n\\truntime.GOMAXPROCS(1)\\r\\n\\t// Log as JSON instead of the default ASCII formatter.\\r\\n\\tlog.SetFormatter(&log.JSONFormatter{})\\r\\n\\r\\n\\t// Output to stdout instead of the default stderr\\r\\n\\t// Can be any io.Writer, see below for File example\\r\\n\\tlog.SetOutput(os.Stdout)\\r\\n\\r\\n\\t// Only log the warning severity or above.\\r\\n\\tlog.SetLevel(log.InfoLevel)\\r\\n\\r\\n\\tengine, err := xorm.NewEngine(\\\"sqlite3\\\", \\\":memory:\\\")\\r\\n\\tif err != nil {\\r\\n\\t\\tpanic(err)\\r\\n\\t}\\r\\n\\tengine.ShowSQL(true)\\r\\n\\tengine.Logger().SetLevel(core.LOG_INFO)\\r\\n\\r\\n\\treturn engine\\r\\n}\\r\\n\\r\\n\\n\")), \"\\n\", React.createElement(_components.p, null, \"세번째 fixture_test.go 파일을 생성합니다.\\r\\nfixture_test.go 에서는 테스트 코드를 작성할 때 사용할 TABLE을 설정합니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"\\txormEngine.Sync2(\\r\\n\\t\\tnew(entities.User),\\r\\n\\t\\tnew(entities.Company),\\r\\n\\t)\\r\\n\\n\")), \"\\n\", React.createElement(_components.p, null, \"또한 YML에 데이터 TABLE에 추가하는 코드를 설정합니다.\\r\\nfixtures, err := testfixtures.NewFolder(xormEngine.DB().DB, &testfixtures.SQLite\", \", \\\"../testdata/db_fixtures\\\")\\r\\n../testdata/db_fixtures 경로에 있는 yml 파일을 sqlite DB에 (메모리 DB)에 추가하겠다.\"), \"\\n\", React.createElement(_components.p, null, \"fixture_test.go 전체 코드\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"package controllers\\r\\n\\r\\nimport (\\r\\n\\t\\\"fmt\\\"\\r\\n\\t_ \\\"github.com/mattn/go-sqlite3\\\"\\r\\n\\t\\\"goods-donation-service/entities\\\"\\r\\n\\t\\\"gopkg.in/testfixtures.v2\\\"\\r\\n)\\r\\n\\r\\ntype DatabaseFixture struct {\\r\\n}\\r\\n\\r\\nfunc (DatabaseFixture) setUpDefault() {\\r\\n\\txormEngine.Sync2(\\r\\n\\t\\tnew(entities.User),\\r\\n\\t\\tnew(entities.Company),\\r\\n\\t)\\r\\n\\r\\n\\tfixtures, err := testfixtures.NewFolder(xormEngine.DB().DB, &testfixtures.SQLite{}, \\\"../testdata/db_fixtures\\\")\\r\\n\\tfmt.Println(\\\"=== RUN DatabaseFixture.setUpDefault\\\")\\r\\n\\r\\n\\tif err != nil {\\r\\n\\t\\tpanic(err)\\r\\n\\t}\\r\\n\\ttestfixtures.SkipDatabaseNameCheck(true)\\r\\n\\r\\n\\tif err := fixtures.Load(); err != nil {\\r\\n\\t\\tpanic(err)\\r\\n\\t}\\r\\n\\tfmt.Println(\\\"=== FINISH DatabaseFixture.setUpDefault\\\")\\r\\n}\\r\\n\\n\")), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h1, null, \"2.golang 코드로 testcase 작성하기\"), \"\\n\", React.createElement(_components.h4, null, \"1. 테스트 케이스 환경 만들기\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"../mysql/2021-06-19-mysql-sqlite/\"\n  }, \"db 설정-YML 데이터 추가\")), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"2. 함수 단위 테스트 케이스 작성\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"1.controller_test.go 파일 만들기\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"아래 코드는 \", React.createElement(_components.code, null, \"controller.go\"), \" 파일의 내용이다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"func (controller Controller) Init(g *echo.Group) {\\r\\n\\tg.POST(\\\"\\\", controller.Create, middlewares.CheckPermission([]string{\\\"*\\\"}))\\r\\n\\tg.GET(\\\"/:id\\\", controller.Get, middlewares.CheckPermission([]string{\\\"*\\\"}))\\r\\n}\\r\\n\\r\\nfunc (Controller) Create(ctx echo.Context) error {\\r\\n    ...\\r\\n}\\n\")), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Create 함수에 커서를 두고 => goland 의 단축키 \", React.createElement(_components.code, null, \"Ctrl+Shift+T\"), \" 동작하면\\r\\n\", React.createElement(_components.code, null, \"controller_test.go\"), \" 파일에 \", React.createElement(_components.code, null, \"TestController_Create\"), \" 테스트 케이스를 작성할 수 있는 파일이 생성된다.\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"func TestController_Create(t *testing.T) {\\r\\n    //go의 경우 test case 를 go 형식의 파일 이름에 쓴다면 작성할 수 있다.\\r\\n}\\n\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"2.controller_test.go 파일에 코드 작성\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://en.wikipedia.org/wiki/Given-When-Then\"\n  }, \"given when then\"), \"\\r\\n\", React.createElement(_components.code, null, \": Test Code  표현하는 방식\"), \"\\r\\n\", React.createElement(_components.a, {\n    href: \"https://kchanguk.tistory.com/40\"\n  }, \"- 개념 설명 링크\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"given when then 에 맞춰 코드를 작성한다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"t.Run(\\\"CreateWithClassificationByVisit_기부등록\\\", func(t *testing.T) {\\r\\n        //given\\r\\n        requestBody := `{ \\\"name\\\":\\\"수진\\\",\\\"meno\\\":\\\"tset\\\"}`\\r\\n        req := httptest.NewRequest(echo.POST,`/`,strings.NewReader(requestBody))\\r\\n        req.Header.Add(echo.HeaderContentType, echo.MIMEApplicationJSON)\\r\\n        \\r\\n        userClaim := auth.UserClaim{\\r\\n        Id:    3,\\r\\n        Roles: \\\"manager\\\",\\r\\n        }\\r\\n        \\r\\n        // when\\r\\n        rec := NewRequest(req).\\r\\n        WithUser(&userClaim).\\r\\n        Handle(Controller{}.Create)\\r\\n        \\r\\n        // then\\r\\n        assert.Equal(t, http.StatusOK, rec.Code)\\r\\n        \\r\\n        result := map[string]interface{}{}\\r\\n        json.Unmarshal(rec.Body.Bytes(), &result)\\r\\n        assert.Equal(t, float64(2), result[\\\"Id\\\"])\\r\\n\\t})\\n\")), \"\\n\", React.createElement(_components.h1, null, \"golang 테스트 케이스를 작성하면서 주의할 부분\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"하나의 테스트 실행시 db 설정및 초기화 된다.\\r\\n\", React.createElement(_components.code, null, \"DatabaseFixture{}.setUpDefault(xormDb)\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"tip) 여러 케이스를 테스트 하고 싶다면 db 셋팅 후 등록=> 조회까지 한번에 테스트 가능\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"DatabaseFixture{}.setUpDefault(xormDb)\\r\\nt.Run(\\\"Test_등록_테스트\\\",func(t *testing.T) {//given then when 작성})\\r\\nt.Run(\\\"Test_등록_조회_테스트\\\",func(t *testing.T) {//given then when 작성})\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"t.Skip() 을 통해 전체 테스트 케이스 돌릴때 특정 test case 를 ignored 할 수 있다.\\r\\n나의 경우는 알림톡이 실제 번호로 전송되는 문제가 있어서\\r\\n전체 테스트 케이스 실행 시 알림톡이 전송되어 문제가 있었다.\\r\\n알림톡이 제대로 왔는지 테스트 할때는 \", React.createElement(_components.code, null, \"t.Skip()\"), \" 을 주석처리하고 따로 각 테스트 케이스를 돌려서 확인\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h1, null, \"3.TESTCASE  에 외부 서비스를 호출하는 API 가 존재한다면 어떻게 테스트를 할 수 있을까?\"), \"\\n\", React.createElement(_components.p, null, \"ex) 카카오 알림톡 api 호출하는 코드가 내가 테스트 하려는 코드에 존재할 때\"), \"\\n\", React.createElement(_components.h2, null, \"방법1 가상 서버를 생성\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://pkg.go.dev/net/http/httptest\"\n  }, \"httptest\"), \" 를 사용해서 가상 서버 url 을 생성하고\\r\\n실제 testcase 에서 api 를 호출할때 url을 가상 서버 url 을 적용합니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"\\t// setUp WebServer Fixture\\r\\n\\tserver := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\\r\\n\\t\\tif r.Method == http.MethodPost && r.URL.Path == \\\"/project/434/posts\\\" {\\r\\n\\t\\t\\tw.WriteHeader(200)\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tw.WriteHeader(400)\\r\\n\\t\\t}\\r\\n\\t}))\\r\\n\\tdefer server.Close()\\n\")), \"\\n\", React.createElement(_components.h2, null, \"방법2 테스트 케이스 실행시 변수를 바꿔 쓴다\"), \"\\n\", React.createElement(_components.p, null, \"#TESTCASE 커버리지 확인하기\"), \"\\n\", React.createElement(_components.h2, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"테스트 케이스를 적용하면서 잘 적용된 것인지 궁금했다.\\r\\n실제로 코드의 커버가 얼마나 되는지 확인하는 go 커멘드 명령어를 알아보자\"), \"\\n\", React.createElement(_components.p, null, \"reflect 패키지를 통해\"), \"\\n\", React.createElement(_components.p, null, \"t.Log(reflect.TypeOf(\\\"string\\\").Kind())\\r\\n\", React.createElement(_components.code, null, \"go test ./... -v\")), \"\\n\", React.createElement(_components.p, null, \"테스트가 코드의 몇 퍼센트를 통과시키고 있는지 알 수 있음\\r\\n\", React.createElement(_components.code, null, \"go test -v -coverprofile cover.out ./...\")), \"\\n\", React.createElement(_components.p, null, \"해당 명령어로 cover.out 파일이 생겼다면\\r\\ncover.out 을 html 파일로 볼 수 있다\\r\\n\", React.createElement(_components.code, null, \"go tool cover -html cover.out\")), \"\\n\", React.createElement(_components.p, null, \"go 버전에 따라 명령어가 다른거 같다\\r\\n아래 명령어로 확인\\r\\n\", React.createElement(_components.code, null, \"go tool cover --help\")), \"\\n\", React.createElement(_components.h1, null, \"참고\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://golangdocs.com/code-coverage-in-golang\"\n  }, \"https://golangdocs.com/code-coverage-in-golang\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"C:/github/gwiyeomgo.github.io/content/posts/server/golang/2022-05-23-go-testcase.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","a","hr","pre","code","h4","ul","li","blockquote","ol","h2","_provideComponents","components","React","href","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}