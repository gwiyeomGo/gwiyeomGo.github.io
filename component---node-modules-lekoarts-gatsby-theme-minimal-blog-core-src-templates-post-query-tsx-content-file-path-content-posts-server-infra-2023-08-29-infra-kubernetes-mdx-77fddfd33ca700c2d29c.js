"use strict";(self.webpackChunkgwiyeom_blog=self.webpackChunkgwiyeom_blog||[]).push([[3735],{8684:function(e,n,l){l.r(n),l.d(n,{Head:function(){return a.F},default:function(){return u}});var t=l(7294),c=l(1151);function r(e){const n=Object.assign({p:"p",hr:"hr",ul:"ul",li:"li",code:"code",a:"a",ol:"ol"},(0,c.ah)(),e.components);return t.createElement(t.Fragment,null,t.createElement(n.p,null,"쿠버네티스"),"\n",t.createElement(n.p,null,"오픈소스 오케스트레이션 시스템 중 하나\n오케스트레이션: 여러 개의 컴퓨터 시스템, 애플리케이션 및/또는 서비스를 조율하고 관리하는 것\nex)"),"\n",t.createElement(n.p,null,"파드(pod) : 배포할 수 있는 가장 작은 단위\n컨테이너 = 프로세스\n파드 = 논리적 호스트\n노드 = 물리적 호스트 (여러 개의 파드를 실행 가능)"),"\n",t.createElement(n.p,null,"파드 셋 관리\n컨트롤러\n카인드 : 도커 컨테이너를 노드로 사용하여 로컬 쿠버네티스 클러스터를 실행\n-> 카인드 쓰려면 도커 설치해야함.."),"\n",t.createElement(n.hr),"\n",t.createElement(n.ul,null,"\n",t.createElement(n.li,null,"kubectl 설치\ncli 로 쿠버네티스 클러스터에 명령 보냄"),"\n"),"\n",t.createElement(n.p,null,t.createElement(n.code,null,"brew install kubectl"),"\n",t.createElement(n.code,null,"kubectl version"),"\n",t.createElement(n.a,{href:"https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/"},"https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/"),"\n",t.createElement(n.a,{href:"https://yuls-with-ai.tistory.com/419"},"https://yuls-with-ai.tistory.com/419")),"\n",t.createElement(n.ul,null,"\n",t.createElement(n.li,null,"kind(kubernetes in Docker)\n",t.createElement(n.code,null,"go install sigs.k8s.io/kind@latest")),"\n"),"\n",t.createElement(n.hr),"\n",t.createElement(n.p,null,"도커 이미지를 빌드하고\nKind 클러스터에 로드한 다음\nHelm을 사용하여 파드를 배포하고\n로컬에서 실행할 수 있는 상태가 됩니다"),"\n",t.createElement(n.ol,null,"\n",t.createElement(n.li,null,"Kind 클러스터 생성 정보 확인"),"\n"),"\n",t.createElement(n.ul,null,"\n",t.createElement(n.li,null,"Kind를 사용하여 로컬에서 Kubernetes 클러스터를 생성\n",t.createElement(n.code,null,"kind create cluster"),"\nKubernetes 클러스터 정보 확인허는 명령어로 Kind 클러스터의 정보를 확인합니다.\n",t.createElement(n.code,null,"kubectl cluster-info"),"\n현재 로컬 머신의 Docker 엔진에서 실행 중인 컨테이너 목록이 표시\n",t.createElement(n.code,null,"docker ps")),"\n"),"\n",t.createElement(n.ol,{start:"0"},"\n",t.createElement(n.li,null,"도커 어플리케이션을 실행"),"\n"),"\n",t.createElement(n.ul,null,"\n",t.createElement(n.li,null,"도커 이미지 빌드(현재 디렉토리에서 Docker 이미지를 빌드)\n",t.createElement(n.code,null,"docker build -t github.com/test/proglog:0.0.1")),"\n",t.createElement(n.li,null,"Kind 클러스터에 이미지 로드\n이전에 빌드한 Docker 이미지를 Kind 클러스터에 로드합니다. 클러스터 내에서 이 이미지를 사용할 수 있\n",t.createElement(n.code,null,"kind load docker-image github.com/test/proglog:0.0.1")),"\n"),"\n",t.createElement(n.ol,{start:"2"},"\n",t.createElement(n.li,null,"파드 배포"),"\n"),"\n",t.createElement(n.ul,null,"\n",t.createElement(n.li,null,"Helm 차트를 템플릿으로 변환합니다. 이 명령은 Helm 차트를 템플릿으로만 보여주며, 실제로 배포하지는 않습니다.\n",t.createElement(n.code,null,"helm template proglog deploy/proglog")),"\n",t.createElement(n.li,null,"Helm 차트를 사용하여 Kubernetes 클러스터에 프로그램을 배포합니다. Helm은 차트에 정의된 리소스를 클러스터에 배포하고 관리합니다.\n",t.createElement(n.code,null,"helm install proglog deploy/proglog")),"\n",t.createElement(n.li,null,"배포한 파드의 상태를 확인\n",t.createElement(n.code,null,"kubectl get pods")),"\n",t.createElement(n.li,null,"Kubernetes 파드에 로컬 포트 포워딩을 설정합니다. 이를 통해 로컬 머신에서 해당 파드의 포트로 접속할 수 있게 됩니다.\n",t.createElement(n.code,null,"kubectl port-forward pod/proglog-0 8400")),"\n"))}var o=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?t.createElement(n,e,t.createElement(r,e)):r(e)},a=l(8804);function u(e){return t.createElement(a.Z,e,t.createElement(o,e))}a.Z}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-infra-2023-08-29-infra-kubernetes-mdx-77fddfd33ca700c2d29c.js.map