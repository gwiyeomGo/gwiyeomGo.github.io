"use strict";(self.webpackChunkgwiyeom_blog=self.webpackChunkgwiyeom_blog||[]).push([[4573],{7266:function(e,n,t){t.r(n),t.d(n,{Head:function(){return o.F},default:function(){return m}});var r=t(7294),l=t(1151);function a(e){const n=Object.assign({ul:"ul",li:"li",p:"p",code:"code",a:"a",h4:"h4",ol:"ol",pre:"pre"},(0,l.ah)(),e.components);return r.createElement(r.Fragment,null,r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"\n",r.createElement(n.p,null,"사용배경"),"\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,r.createElement(n.code,null,"(2021/12/28)"),"\r\n1.",r.createElement(n.code,null," 2021년 기부 데이터의 상태는 2022년 1월 1일 새벽 1시 기준 평가완료 상태로 변경해야 한다.(예약작업걸기 - '평가완료' 상태로 변경(2022.01.01 01:00:00)"),"\r\n2. 1/1일 주말이고 새벽이어서 개발자가 직접 변경할 수 없는 상황이다.\r\n3. 예약을 걸어서 자동으로 변경되도록 하자"),"\n",r.createElement(n.li,null,r.createElement(n.code,null,"(2022/11/08)"),"\r\n4 . 11/8 일 매장을 구독한 구독자에게 매장소식 알림 메세지를 발송하는 기능을 추가\r\n5. lambda 를 사용해서 매일 오후 6시 매장별 구독자에게 메세지를 전송\r\n6. lamda 에서 전송 api 를 호출한다"),"\n"),"\n"),"\n",r.createElement(n.li,null,"\n",r.createElement(n.p,null,"어떻게 데이터의 상태를 자동으로 변경시키죠?\r\nLambda 로 api 를 호출해서 상태를 변경합니다."),"\n"),"\n",r.createElement(n.li,null,"\n",r.createElement(n.p,null,r.createElement(n.a,{href:"https://docs.aws.amazon.com/ko_kr/lambda/latest/dg/welcome.html"},"AWS Lambda 란 무엇입니까?"),"\r\nLambda는 필요 시에만 함수를 실행\r\n사용한 컴퓨팅 시간만큼만 비용을 지불하고, 코드가 실행되지 않을 때는 요금이 부과되지 않습니다.\r\n",r.createElement(n.a,{href:"https://docs.aws.amazon.com/ko_kr/lambda/latest/dg/gettingstarted-concepts.html#gettingstarted-concepts-function"},"https://docs.aws.amazon.com/ko_kr/lambda/latest/dg/gettingstarted-concepts.html#gettingstarted-concepts-function")),"\n"),"\n"),"\n",r.createElement(n.h4,null,"설정내용"),"\n",r.createElement(n.ol,null,"\n",r.createElement(n.li,null,"AWS Lambda  에서 함수를 생성한다"),"\n",r.createElement(n.li,null,"api 를 호출하는 코드로 변경"),"\n"),"\n",r.createElement(n.pre,null,r.createElement(n.code,null,"const axios = require('axios');\r\n\r\nexports.handler = async (event) => {\r\n    let env = event.env;\r\n    let url = process.env.URL\r\n    let token =  process.env.Bearer\r\n    let path = '/api/test';\r\n\r\n     const options = {\r\n        withCredentials: true,\r\n        headers: {\r\n          Authorization: 'Bearer ' + token,\r\n          Accept: 'application/json',\r\n          'Content-type': 'application/x-www-form-urlencoded',\r\n        },\r\n    };\r\n\r\n    try {\r\n       const res = await axios.get(url+path, options);\r\n        return {\r\n            statusCode: 200,\r\n            body: env + ': ' + 'successful'\r\n        };\r\n    } catch (e) {\r\n        return {\r\n            statusCode: 400,\r\n            body: env + ': ' + JSON.stringify(e)\r\n        };\r\n    }\r\n};\n")),"\n",r.createElement(n.ol,{start:"3"},"\n",r.createElement(n.li,null,"\n",r.createElement(n.p,null,"구성에서 pdv 환경변수 설정\r\n",r.createElement(n.code,null,'  env :"prod"  url :""  등등..')),"\n"),"\n",r.createElement(n.li,null,"\n",r.createElement(n.p,null,"api 호출에 axios 를 사용,axios 를 사용하기 위해서 계층추가"),"\n"),"\n"),"\n",r.createElement(n.pre,null,r.createElement(n.code,null,"    > Runtime.ImportModuleError: Error: Cannot find module 'axios'\r\n    에러 발생시 ARN 지정\r\n    https://ljmocic.medium.com/publish-simple-node-js-aws-lambda-layer-a87c00afdd83\r\n\r\n    > (질문) 특정시간에 l/a 함수가 발동하도록 어떻게 설정하지? (답) Lambda 에 트리거를 추가\n")),"\n",r.createElement(n.ol,{start:"5"},"\n",r.createElement(n.li,null,"\n",r.createElement(n.p,null,"Lambda 에 트리거를 추가. 이때 트리거 추가시 규칙을 추가해야하는데 aws eventBridge 를 조회할 수 있는 역할도 필요하다"),"\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"\n",r.createElement(n.p,null,r.createElement(n.code,null,"이벤트 > 규칙")," 에 cron 으로 지정해준다.\r\n",r.createElement(n.code,null," [규칙을 생성] 예약 표현식 => cron 으로 표시")),"\n"),"\n",r.createElement(n.li,null,"\n",r.createElement(n.p,null,"규칙에 대상에 트리거 동작시 사용할 구성 환경변수 값을 json 으로 지정한다\r\n",r.createElement(n.code,null,'구성>환경변수에 특정 값을 입력했다면 Amazon EventBridge >규칙>편집>대상>추가설정>대상입력구성>json텍스트로 상수 입력 ex) {"env":"prod"}')),"\n"),"\n",r.createElement(n.li,null,"\n",r.createElement(n.p,null,"Cron Expression  : Cron, 크론은 본래 유닉스 계열의 운영체제에서 시간 기반으로 잡 스케쥴링을 하는 후면 프로세스의 명칭이다."),"\n"),"\n"),"\n"),"\n"),"\n",r.createElement(n.pre,null,r.createElement(n.code,null,"cron(00 00 * * ? *) 매일 오전 9시에 실행\r\ncron(30 00 * * ? *) 매일 오전 9시 30분 실행\r\ncron(00 01 * * ? *) 매일 오전 10시에 실행\r\ncron(00 02 * * ? *) 매일 오전 11시에 실행\r\ncron(00 03 * * ? *) 매일 낮 12시에 실행\r\ncron(00 04 * * ? *) 매일 오후 1시에 실행\r\ncron(00 05 * * ? *) 매일 오후 2시에 실행\r\ncron(00 06 * * ? *) 매일 오후 3시에 실행\r\ncron(00 07 * * ? *) 매일 오후 4시에 실행\r\ncron(00 08 * * ? *) 매일 오후 5시에 실행\r\ncron(00 09 * * ? *) 매일 오후 6시에 실행\r\n\r\ncron(00 18 * * ? *) 매일 새벽 3시\r\n\r\ncron(00 16 31 12 ? *)  1년에 한번 1월 1일 새벽 1시 00분 ?\n")),"\n",r.createElement(n.p,null,r.createElement(n.code,null,"(질문) 실행 결과는 어디서 보지??  (답) aws CloudWatch 모니터링 로그를 볼 수 있다")),"\n",r.createElement(n.p,null,"6.aws CloudWatch 에서 로그를 본다\r\nCloudWatch Logs 에 테스트,실제 트리거 결과를 볼 수 있다."),"\n",r.createElement(n.p,null,"###참고\r\n",r.createElement(n.a,{href:"https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-create-rule-schedule.html"},"https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-create-rule-schedule.html"),"\r\n",r.createElement(n.a,{href:"https://dev-bri.tistory.com/4"},"https://dev-bri.tistory.com/4"),"\r\n",r.createElement(n.a,{href:"https://naengguk.tistory.com/128"},"https://naengguk.tistory.com/128"),"\r\n",r.createElement(n.a,{href:"https://jisblee.me/board/view/0/2/169"},"https://jisblee.me/board/view/0/2/169"),"\r\n",r.createElement(n.a,{href:"https://www.leafcats.com/94"},"https://www.leafcats.com/94")))}var c=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?r.createElement(n,e,r.createElement(a,e)):a(e)},o=t(8804);function m(e){return r.createElement(o.Z,e,r.createElement(c,e))}o.Z}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-c-github-gwiyeomgo-github-io-content-posts-server-infra-aws-2021-12-28-aws-lambda-mdx-cbf671cc683510a22612.js.map