{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-infra-2023-08-29-infra-docker-kafka-mdx-e16af4d91cfc5eda309e.js","mappings":"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","sources":["webpack://gwiyeom-blog/./content/posts/server/infra/2023-08-29-infra-docker-kafka.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    blockquote: \"blockquote\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    ol: \"ol\",\n    hr: \"hr\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"토이 프로젝트로 경매프로그램을 만들기로 했다\\n카푸카 개발 환경 셋팅,도커 셋팅을 담당하기로 했다.\"), \"\\n\", React.createElement(_components.h1, null, \"카프카 특징\"), \"\\n\", React.createElement(_components.p, null, \"여러 컨슈머가 분산 처리로 메시지를 소비\\n여러 서브스크라이버에 동일한 메시지 전달\\n토픽 기반으로 전달 내용을 변경\\n=> 컨슈머 그룹..설정\\n스토리지 시스템\\n(중요) 메시지를 잃지 않는다\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"큐잉 모델\\n브로커안에 큐를 준비해,프로듀서에서의 메시지가 큐에 담기고, 컨슈머가 큐에서 메시지를 추출\\n하나의 큐에 대해 컨슈머가 여러 개 존재하며 컨슈머가 메시지를 받으면 다른 컨슈머는 받을 수 없다\\n펍/섭 메시징 모델\\n프로듀서= 퍼블리셔\\n컨슈머 = 서브스크라이버\\n퍼블리셔가 서브스크라이버에게 전달하는 것이 아니라 브로커를 통해서 전달\\n퍼블리셔는 누가 그 메세지를 수신하는지 알 수 없고\\n브로커에 있는 토픽이라고 불리는 카테고리 안에 메시지 등록\\n여러 서브스크라이버가 동일한 토픽을 구독하기로 결정하면\\n이 여러 서브스크라이버가 동일한 메시지를 받는다.\\n또 다른 토픽에서는 다른 메시지를 받을 수 있다\\n큐잉 모델,펍/섭 메시징 모델이든 모두 브로커를 사이에 끼우는 형태\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"오프셋\\n어디까지 메시지를 받았는지 관리하기 위한 오프셋 존재\\n오프셋 커밋은 메시지를 받아 정상적으로 처리를 완료한 다음 오프셋을 업데이트함\\n컨슈머가 수신한 메시지를 정상 처리했다면 처리완료 기록을 브로커에 남긴다\"), \"\\n\"), \"\\n\", React.createElement(_components.h1, null, React.createElement(_components.a, {\n    href: \"https://zeroco.tistory.com/105\"\n  }, \"카프카의 주요 용어\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"목표 1:  카프카의 주요 용어 정리공부\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"카프카(Kafka): 분산 스트리밍 플랫폼,대량의 데이터를 안정적으로 전송, 저장 및 처리할 수 있는 오픈 소스 메시지 큐 시스템\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"메시지는 토픽에 순서대로 저장되며, 컨슈머는 메시지의 순서를 보장받을 수 있다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Docker Cluster: Kafka 브로커, 프로듀서, 컨슈머 등이 실행되는 컨테이너 환경\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"프로듀서와 컨슈머 이미지를 사용하여 Docker Compose 로 Docker 클러스터 내부에 컨테이너로 배포(실행)\"), \"\\n\", React.createElement(_components.li, null, \"Kafka 브로커는 Docker 컨테이너 내에서 실행되며 각 브로커는 다양한 토픽을 관리\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"+----------------------------- docker containers-----------------------------+\\n|                                                                            |\\n|                                 (zookeeper)                                |\\n|                                      |                                     |\\n|             \\t           +-------(kafka cluster)-----+                     |\\n| (Producer)--> publish -->|                           |-->read-->(Consumer) |\\n|                          |                           |                     |\\n|                          |  Leader  (kafka broker1)  |                     |\\n|                          |  Follower(kafka broker2)  |                     |\\n|                          |  Leader  (kafka broker3)  |                     |\\n|                          |                           |                     |\\n|                          +---------------------------+                     |\\n+----------------------------------------------------------------------------+\\n\")), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"프로듀서 (Producer):\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"프로듀서는 데이터를 Kafka 토픽으로 보내는 역할을 합니다.\"), \"\\n\", React.createElement(_components.li, null, \"데이터를 생성하고 Kafka 클러스터로 전송하여 토픽에 데이터를 게시합니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"2\"\n  }, \"\\n\", React.createElement(_components.li, null, \"컨슈머 (Consumer):\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"컨슈머는 Kafka 토픽에서 데이터를 읽고 처리하는 역할을 합니다.\"), \"\\n\", React.createElement(_components.li, null, \"컨슈머는 특정 토픽 또는 파티션에서 데이터를 구독합니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"3\"\n  }, \"\\n\", React.createElement(_components.li, null, \"브로커 (Broker):\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"브로커는 Kafka 클러스터 내에서 메시지를 저장하고 관리하는 서버입니다.\"), \"\\n\", React.createElement(_components.li, null, \"클러스터는 여러 브로커로 구성됩니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"7\"\n  }, \"\\n\", React.createElement(_components.li, null, \"토픽 (Topic):\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"토픽은 Kafka에서 데이터 스트림을 카테고리화하는 메커니즘입니다.\"), \"\\n\", React.createElement(_components.li, null, \"메시지를 특정 주제(토픽)에 게시하고 해당 토픽에서 메시지를 구독할 수 있습니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"8\"\n  }, \"\\n\", React.createElement(_components.li, null, \"파티션 (Partition):\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"토픽은 하나 이상의 파티션으로 나뉩니다.\"), \"\\n\", React.createElement(_components.li, null, \"각 파티션은 독립적인 로그 스트림이며, 데이터의 분산 처리를 지원하고 병렬로 처리됩니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"4\"\n  }, \"\\n\", React.createElement(_components.li, null, \"리더 (Leader)와 팔로워 (Follower):\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"각 파티션은 하나의 리더와 여러 팔로워를 가질 수 있습니다.\"), \"\\n\", React.createElement(_components.li, null, \"리더는 읽기와 쓰기 작업을 처리하고, 팔로워는 데이터를 동기화하여 신뢰성을 보장합니다.\"), \"\\n\", React.createElement(_components.li, null, \"원본 = 리더(leader) 와 리플리케이션 = 팔로워(follower)로 구분\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"브로커 안에는 토픽이 있다\\n토픽은 특정 주제나 카테고리에 속하는 메시지를 저장하는 논리적인 컨테이너\\n각 토픽은 여러 파티션으로 나뉘며, 각 파티션은 메시지의 순서와 분산을 관리합니다.\\n\\n브로커는\\n토픽과 그 안에 있는 파티션을 관리하여 메시지 스트림을 효과적으로 처리하고 분산합니다\\n\")), \"\\n\", React.createElement(_components.ol, {\n    start: \"5\"\n  }, \"\\n\", React.createElement(_components.li, null, \"프로듀서 컨펌 (Producer Acknowledgement):\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"프로듀서가 메시지를 보내고 성공적으로 받았음을 확인받는 방법을 나타냅니다.\"), \"\\n\", React.createElement(_components.li, null, \"프로듀서 컨펌 설정에 따라 메시지 손실을 방지할 수 있습니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"6\"\n  }, \"\\n\", React.createElement(_components.li, null, \"컨슈머 그룹 (Consumer Group):\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"여러 컨슈머가 하나의 토픽을 구독하고 데이터를 병렬로 처리할 수 있도록 그룹화된 구조입니다.\"), \"\\n\", React.createElement(_components.li, null, \"각 컨슈머는 다른 파티션에서 작업하게 됩니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"9\"\n  }, \"\\n\", React.createElement(_components.li, null, \"오프셋 (Offset):\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"오프셋은 파티션 내에서 메시지의 위치를 나타내는 오프셋 번호입니다.\"), \"\\n\", React.createElement(_components.li, null, \"컨슈머는 특정 파티션에서 어디까지 메시지를 읽었는지를 오프셋을 사용하여 추적합니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://collabnix.com/implementing-apache-kafka-on-docker-swarm-running-on-aws-platform-in-5-minutes/\"\n  }, \"Kafka의 데이터 흐름\")), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"[Producer] -> [Topic A Partition 1 Leader] -> [Broker 1]\\n[Producer] -> [Topic A Partition 2 Leader] -> [Broker 2]\\n[Producer] -> [Topic B Partition 0 Leader] -> [Broker 1]\\n[Producer] -> [Topic B Partition 1 Leader] -> [Broker 2]\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Kafka 클러스터에 여러개의 브로커가 존재한다\"), \"\\n\", React.createElement(_components.li, null, \"브로커에는 여러 개의 토픽,파티션 존재\"), \"\\n\", React.createElement(_components.li, null, \"프로듀셔가 각각의 토픽 파티션에 맵핑하고 파티션의 리더에 요청을 보냄\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h1, null, \"Docker로 카프카,주키퍼 띄우기\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"목표 2 :\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"Docker로 카프카 서버 띄우기\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"로컬에서 kafka 개발 환경 셋팅하고 실행\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"docker-compose?\\nDocker는 개별 컨테이너 관리에 사용되고\\nDocker Compose는 여러 컨테이너로 구성된 애플리케이션 스택을 정의하고 관리하는 도구\\nkafka 는 zookeeper 를 같이 사용해야 하기 때문에 docker-compose 설치\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"brew install docker-compose\"), \"\\n\", React.createElement(_components.code, null, \"docker-compose -v\"), \"\\n\", React.createElement(_components.code, null, \"docker-compose stop\"), \" 실행한 서버 중지\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"zookeeper?\\n분산 코디네이션 서비스 :분산 시스템에서 서로 다른 노드 또는 서버 간에 상호 작용하고 조율하기 위한 도구\\nex) zookeeper (레지스트리, 분산 락, 분산 큐 구현 등 다양한 분산 시스템에서 필요한 작업을 수행)\\nex) etcd(클러스터 상태 및 설정 정보를 저장하고 공유)\\n카프카에서는 리더 선출,분산 시스템관리,토픽 및 파티션 관리,브로커 디스커버리 등...위해서 사용\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"도커 환경에서 카프카 컨테이너를 실행할 때 주키퍼 컨테이너를 실행해야 하는지 여부는 사용하는 카프카 버전과 설정에 따라 다를 수 있습니다.\\n주키퍼(ZooKeeper)는 카프카의 이전 버전에서는 필수적으로 필요한 구성 요소였지만, 카프카 2.8.0 버전부터는 주키퍼 없이도 카프카를 실행할 수 있는 \\\"KRaft\\\" 모드가 도입되었습니다. KRaft 모드는 주키퍼 대신 내장된 상태 저장 기능을 사용하여 주키퍼의 의존성을 제거하고 카프카 클러스터를 더 단순하게 설정할 수 있도록 합니다.\"), \"\\n\", React.createElement(_components.p, null, \"따라서 카프카 2.8.0 버전 이상을 사용하는 경우, 주키퍼를 사용하지 않고도 카프카를 실행할 수 있습니다. 그러나 카프카 이전 버전을 사용하거나 특정 설정이 필요한 경우에는 주키퍼를 함께 실행해야 할 수 있습니다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Zookeeper, Kafka 컨테이너 이미지 가져오기위한 docker-compose 템플릿 작성\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"docker pull wurstmeister/zookeeper\"), \"\\n\", React.createElement(_components.code, null, \"docker pull wurstmeister/kafka\"), \"\\n이렇게 집접 설치도 가능한데\\n도커컴포즈.yml 에 \", React.createElement(_components.code, null, \"image:\"), \" 추가해 이미지를 가져온다\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yml\"\n  }, \"# compose 파일 버전\\nversion: '2'\\n\\nservices:\\n# 서비스 명\\n  zookeeper:\\n    # 사용할 이미지\\n    image: wurstmeister/zookeeper\\n    # 컨테이너명 설정\\n    container_name: zookeeper\\n    # 접근 포트 설정 (컨테이너 외부:컨테이너 내부)\\n    ports:\\n      - \\\"2181:2181\\\"\\n# 서비스 명\\n  kafka:\\n     # 사용할 이미지\\n    image: wurstmeister/kafka\\n    # docker-compose 에서는 서비스들의 우선순위를 지정(kafka는 zookeeper가 먼저 실행되어야함)\\n    depends_on:\\n      - zookeeper\\n    # 컨테이너명 설정\\n    container_name: kafka\\n    # kafka 브로커의 포트,접근 포트 설정 (컨테이너 외부:컨테이너 내부)\\n    ports:\\n      - \\\"9094:9094\\\"\\n    # kafka 브로커를 위한 환경 변수 설정\\n    environment:\\n      KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1\\n      # Kafka 컨테이너가 시작될 때 Topic이라는 이름의 토픽을 생성하도록 지시 (Topic명:Partition개수:Replica개수)\\n      KAFKA_CREATE_TOPICS: \\\"myCustomTopic:1:1\\\"\\n      # 연결할 (서비스이름:컨테이너 내부 포트)\\n      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\\n    # 볼륨 설정 :컨테이너 간 또는 호스트 시스템과 컨테이너 간에 데이터를 공유할 수 있으며, 컨테이너가 제거되더라도 데이터가 보존\\n    # 호스트의 도커 소켓 파일(/var/run/docker.sock)을 컨테이너 내부의 동일한 경로로 마운트하는 것\\n    volumes:\\n      - /var/run/docker.sock:/var/run/docker.sock\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"마운트 = 주로 파일이나 디렉터리를 하나의 디렉터리 구조에서 다른 디렉터리 구조로 이동하거나 연결하는 작업\"), \"\\n\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.ol, {\n    start: \"2\"\n  }, \"\\n\", React.createElement(_components.li, null, \"docker-compose  명령을 통해 컨테이너를 실행  (docker-compose 실행)\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"docker-compose -f docker-compose-single-broker.yml up -d\")), \"\\n\", React.createElement(_components.p, null, \"docker_compose.yml 일 경우\\n이미지 빌드\\n\", React.createElement(_components.code, null, \"docker-compose up --build \"), \"\\n만약 docker-compose-single-broker.yml 로 이름을 바꾸면 아래 명령어로 빌드\\n\", React.createElement(_components.code, null, \"docker-compose -f docker-compose-single-broker.yml up -d\")), \"\\n\", React.createElement(_components.p, null, \"-f (설정파일)을 통해서 우리가 작성한 설정으로 docker-compose를 실행한다.\\nup 옵션을 통해 docker-compos 를 실행한다.\\n-d 옵션은 detach 모드로 컨테이너를 백그라운드로 실행하게 해준다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.ol, {\n    start: \"3\"\n  }, \"\\n\", React.createElement(_components.li, null, \"docker 상태 로그 확인\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"docker ps\"), \"\\n\", React.createElement(_components.code, null, \"docker logs 컨테이너ID\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.ol, {\n    start: \"4\"\n  }, \"\\n\", React.createElement(_components.li, null, \"컨테이너 중지,삭제\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"docker-compose down\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"` docker-compose -f docker-compose-single-broker.yml down`\\nkafka-docker-go-project > docker-compose down\\n[+] Running 3/3\\n✔ Container zookeeper                      Removed\\n✔ Container kafka                          Removed\\n✔ Network kafka-docker-go-project_default  Removed\\n\")), \"\\n\", React.createElement(_components.p, null, \"컨테이너 가 멈추고 삭제된다\\n이미지는 남아있고 볼륨도 있음\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h1, null, \"docker-compose 명령어로 topic 생성,확인,컨슈머 실행\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"목표 2 :\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"topic 생성\"), \"\\n\", React.createElement(_components.li, null, \"컨슈머 실행 = 브로커로 부터 메시지를 수신\"), \"\\n\", React.createElement(_components.li, null, \"프로듀서 실행 = 프로듀서로 메시지를 전송\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h3, null, \"카푸카 클라이언트 예제 코드 (프로듀서,컨슈머)\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://github.com/confluentinc/confluent-kafka-go\"\n  }, \"https://github.com/confluentinc/confluent-kafka-go\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.ol, {\n    start: \"0\"\n  }, \"\\n\", React.createElement(_components.li, null, \"kafka에 접속하기\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"docker container exec -it {컨테이너이름} bash\"), \"\\nex) docker container exec -it kafka bash\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"토픽 생성\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"kafka-topics.sh --create --topic test-topic --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.ol, {\n    start: \"2\"\n  }, \"\\n\", React.createElement(_components.li, null, \"생성된 토픽 목록 보기\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"kafka-topics.sh --list --bootstrap-server localhost:9092\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"root:/# cd bin\\nroot:/bin# kafka-console-producer.sh --broker-list localhost:9092 --topic test-topic\\n> 메세지 보낸다 받아라\\n\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.ol, {\n    start: \"3\"\n  }, \"\\n\", React.createElement(_components.li, null, \"프로듀서 실행\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"kafka-console-producer.sh --broker-list localhost:9092 --topic test-topic\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"root:/# cd bin\\nroot:/bin# kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test-topic --from-beginning\\n\\n메세지 보낸다 받아라\\n\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.ol, {\n    start: \"5\"\n  }, \"\\n\", React.createElement(_components.li, null, \"토픽 삭제\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"kafka-topics.sh --bootstrap-server localhost:9092 --topic test-topic --delete\"), \"\\n\", React.createElement(_components.code, null, \"kafka-topics.sh --delete --zookeeper zookeeper:2181 --topic test-topic\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.ol, {\n    start: \"6\"\n  }, \"\\n\", React.createElement(_components.li, null, \"주의\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"토픽 이름(topic names)\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"Due to limitations in metric names, topics with a period ('.') or underscore ('_') could collide.\\nTo avoid issues it is best to use either, but not both.\\n\\n마침표 (.)나 밑줄 (_) 중 하나만 사용하세요. 예를 들어 my_topic 또는 my.topic 중 하나를 선택하는 것이 좋지만,\\n토픽 이름에서 마침표와 밑줄을 피하세요.\\n다른 문자 (예: 알파벳, 숫자, 하이픈 등)을 사용하여 메트릭 이름과 충돌할 가능성을 줄이세요\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://medium.com/@kiranprabhu/kafka-topic-naming-conventions-best-practices-6b6b332769a3\"\n  }, \"https://medium.com/@kiranprabhu/kafka-topic-naming-conventions-best-practices-6b6b332769a3\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"토픽 삭제 전에 설정 필요\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"docker container exec -it kafka bash \"), \" 로 컨테이너에 접근 후\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"root> cd /opt/kafka/config \"), \"로 이동 \", React.createElement(_components.code, null, \"server.properties\"), \" 있음\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"server.properties\"), \" (Kafka의 서버 설정 파일) 파일의 내용을 수정하려면 \", React.createElement(_components.code, null, \"vim server.properties\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"vim\"), \"을 docker container 에서 사용하려면 아래 방법으로 다운\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"docker container exec -it {container이름}  bash\\napt-get update\\napt-get install vim\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"server.properties\"), \" 파일에 \", React.createElement(_components.code, null, \"delete.topic.enable = true\"), \" 를 추가한다\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"server.properties\"), \" 을 변경후 kafka 컨테이너 재시작 해야한다\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"Zookeeper의 서버 설정 파일 = zookeeper.properties\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"가끔..토픽을 삭제했는데 (설정도 완료했는데).. 삭제 안된다면 다시 카프카 서버를 재시작해본다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h1, null, \"참고\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://bsssss.tistory.com/1110\"\n  }, \"https://bsssss.tistory.com/1110\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://yes-admit.tistory.com/74\"\n  }, \"https://yes-admit.tistory.com/74\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://tommypagy.tistory.com/226\"\n  }, \"https://tommypagy.tistory.com/226\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://akageun.github.io/2019/09/10/docker-compose-local-kafka.html\"\n  }, \"https://akageun.github.io/2019/09/10/docker-compose-local-kafka.html\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://www.sktenterprise.com/bizInsight/blogDetail/dev/2565\"\n  }, \"https://www.sktenterprise.com/bizInsight/blogDetail/dev/2565\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://bsssss.tistory.com/1110\"\n  }, \"https://bsssss.tistory.com/1110\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://stackoverflow.com/questions/31515863/how-to-run-vi-on-docker-container\"\n  }, \"https://stackoverflow.com/questions/31515863/how-to-run-vi-on-docker-container\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://velog.io/@jinmin2216/Kafka-Docker-%EC%84%A4%EC%B9%98%EB%B6%80%ED%84%B0-Kafka-Quick-Start%EA%B9%8C%EC%A7%80\"\n  }, \"https://velog.io/@jinmin2216/Kafka-Docker-설치부터-Kafka-Quick-Start까지\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://dev-youngjun.tistory.com/259\"\n  }, \"https://dev-youngjun.tistory.com/259\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://www.sktenterprise.com/bizInsight/blogDetail/dev/2565\"\n  }, \"https://www.sktenterprise.com/bizInsight/blogDetail/dev/2565\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://tychejin.tistory.com/361\"\n  }, \"https://tychejin.tistory.com/361\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://tommypagy.tistory.com/226\"\n  }, \"https://tommypagy.tistory.com/226\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://cornswrold.tistory.com/524\"\n  }, \"https://cornswrold.tistory.com/524\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://code-lab1.tistory.com/236\"\n  }, \"https://code-lab1.tistory.com/236\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://devocean.sk.com/blog/techBoardDetail.do?ID=164007\"\n  }, \"https://devocean.sk.com/blog/techBoardDetail.do?ID=164007\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://github.com/confluentinc/confluent-kafka-go\"\n  }, \"https://github.com/confluentinc/confluent-kafka-go\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://www.daleseo.com/docker-run/\"\n  }, \"https://www.daleseo.com/docker-run/\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://www.yalco.kr/36_docker/\"\n  }, \"https://www.yalco.kr/36_docker/\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://github.com/wurstmeister/kafka-docker/blob/master/docker-compose-single-broker.yml\"\n  }, \"https://github.com/wurstmeister/kafka-docker/blob/master/docker-compose-single-broker.yml\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://shortstories.gitbook.io/studybook/go/go-in-action/8c7a5-d45c-c900-b77c-c774-be0c-b7ec-b9ac\"\n  }, \"https://shortstories.gitbook.io/studybook/go/go-in-action/8c7a5-d45c-c900-b77c-c774-be0c-b7ec-b9ac\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://seongjin.me/raft-consensus-algorithm\"\n  }, \"https://seongjin.me/raft-consensus-algorithm\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://akageun.github.io/2019/09/10/docker-compose-local-kafka.html/\"\n  }, \"https://akageun.github.io/2019/09/10/docker-compose-local-kafka.html/\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://velog.io/@holicme7/Apache-Kafka-%EC%B9%B4%ED%94%84%EC%B9%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\"\n  }, \"https://velog.io/@holicme7/Apache-Kafka-%EC%B9%B4%ED%94%84%EC%B9%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://engineering.linecorp.com/ko/blog/how-to-use-kafka-in-line-1\"\n  }, \"https://engineering.linecorp.com/ko/blog/how-to-use-kafka-in-line-1\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/gwiyeomgo.github.io/gwiyeomgo.github.io/content/posts/server/infra/2023-08-29-infra-docker-kafka.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","blockquote","ul","li","a","pre","code","ol","hr","h3","_provideComponents","components","React","href","start","className","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}