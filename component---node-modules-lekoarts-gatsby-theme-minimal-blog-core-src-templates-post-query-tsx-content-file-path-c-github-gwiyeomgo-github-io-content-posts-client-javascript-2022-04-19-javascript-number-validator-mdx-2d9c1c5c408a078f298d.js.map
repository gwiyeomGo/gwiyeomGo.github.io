{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-c-github-gwiyeomgo-github-io-content-posts-client-javascript-2022-04-19-javascript-number-validator-mdx-2d9c1c5c408a078f298d.js","mappings":"mNAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,KACJC,IAAK,MACLC,KAAM,OACNC,EAAG,IACHC,EAAG,MACFC,EAAAA,EAAAA,MAAsBV,EAAMW,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBX,EAAYG,GAAI,KAAM,KAAMQ,EAAAA,cAAoBX,EAAYI,GAAI,KAAM,wBAAyB,KAAMO,EAAAA,cAAoBX,EAAYI,GAAI,KAAM,0BAA2B,MAAO,KAAMO,EAAAA,cAAoBX,EAAYK,IAAK,KAAMM,EAAAA,cAAoBX,EAAYM,KAAM,KAAM,waAAib,KAAMK,EAAAA,cAAoBX,EAAYO,EAAG,KAAM,SAAUI,EAAAA,cAAoBX,EAAYQ,EAAG,CAC91BI,KAAM,4FACL,mDAAoD,KAAMD,EAAAA,cAAoBX,EAAYK,IAAK,KAAMM,EAAAA,cAAoBX,EAAYM,KAAM,KAAM,uKAA0K,KAAMK,EAAAA,cAAoBX,EAAYO,EAAG,KAAM,sCAAuC,KAAMI,EAAAA,cAAoBX,EAAYO,EAAG,KAAM,wFAAyF,KAAMI,EAAAA,cAAoBX,EAAYK,IAAK,KAAMM,EAAAA,cAAoBX,EAAYM,KAAM,KAAM,iIAAkI,KAAMK,EAAAA,cAAoBX,EAAYO,EAAG,KAAM,6EAA8E,KAAMI,EAAAA,cAAoBX,EAAYK,IAAK,KAAMM,EAAAA,cAAoBX,EAAYM,KAAM,KAAM,gGAAiG,KAAMK,EAAAA,cAAoBX,EAAYO,EAAG,KAAM,0FAA2F,KAAMI,EAAAA,cAAoBX,EAAYK,IAAK,KAAMM,EAAAA,cAAoBX,EAAYM,KAAM,KAAM,kGAC/xC,CAKA,MAJA,SAAoBP,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOc,QAASC,GAAab,OAAOC,OAAO,CAAC,GAAGO,EAAAA,EAAAA,MAAsBV,EAAMW,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWf,EAAOY,EAAAA,cAAoBb,EAAmBC,IAAUD,EAAkBC,EAC9H,E,UCfe,SAASgB,EAAiBhB,GACvC,OAAOY,EAAAA,cAAoBK,EAAAA,EAAejB,EAAOY,EAAAA,cAAoBM,EAAqBlB,GAC5F,CAHAiB,EAAAA,C","sources":["webpack://gwiyeom-blog/./content/posts/client/javascript/2022-04-19-javascript-numberValidator.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    ol: \"ol\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    p: \"p\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"입력창에 회원번호,기부번호를 입력한다\"), \"\\n\", React.createElement(_components.li, null, \"직접 키보드로 입력하면서 문자가 포함된다\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"    if (searchText.length > 0) {\\r\\n      switch (searchType) {\\r\\n        case \\\"memberId\\\":\\r\\n          if(isNumeric(searchText) === false){\\r\\n            return message.error(\\\"회원번호가 올바르지 않습니다.\\\");\\r\\n          }\\r\\n          break;\\r\\n        case \\\"id\\\":\\r\\n          if(isNumeric(searchText) === false){\\r\\n            return message.error(\\\"기부번호가 올바르지 않습니다.\\\");\\r\\n          }\\r\\n          break;\\r\\n      }\\r\\n    }\\n\")), \"\\n\", React.createElement(_components.p, null, \"출처\\r\\n\", React.createElement(_components.a, {\n    href: \"https://stackoverflow.com/questions/175739/how-can-i-check-if-a-string-is-a-valid-number\"\n  }, \"How can I check if a string is a valid number?\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"  const NumberValidator = (str) => {\\r\\n    if (typeof str !== \\\"string\\\") return false\\r\\n    return !isNaN(str) && !isNaN(parseFloat(str)) //true && true\\r\\n  }\\n\")), \"\\n\", React.createElement(_components.p, null, \"위 예제처럼 사용하면 str 에 숫자만 있는지 확인이 가능하다\"), \"\\n\", React.createElement(_components.p, null, \"isNaN 함수는 숫자를 넣으면 false 를 반환한다.\\r\\nisNaN 함수는 string 과 숫자가 함께있는 문자를 입력하면 true 값을 반환한다\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"isNaN(123)         // false\\r\\nisNaN('123')       // false\\r\\nisNaN('test')      // true\\r\\nisNaN('123test')   // true\\r\\n\\n\")), \"\\n\", React.createElement(_components.p, null, \"사실 위 예제에서 !isNaN(str) 만 사용해도 확인이 가능하지만\\r\\n!isNaN(parseFloat(str))을 쓴 이유는?\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"isNaN('')          // false\\r\\nisNaN(' ')         // false\\r\\nisNaN(false)       // false\\n\")), \"\\n\", React.createElement(_components.p, null, \"이 경우도 false 를 반환하기 때문에 ...\\r\\n한번 더 확인이 필요하다\\r\\nex) 스페이스를 클릭하고 검색하면 검색이 된다... 공백을 막기 위해\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"console.log(!isNaN(parseFloat(' '))) //false\\r\\nconsole.log(!isNaN(' '))             //ture\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"C:/github/gwiyeomgo.github.io/content/posts/client/javascript/2022-04-19-javascript-numberValidator.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","ol","li","pre","code","p","a","_provideComponents","components","React","href","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}