{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-golang-2021-08-19-go-echo-framework-mdx-a184758582f0df621fc2.js","mappings":"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","sources":["webpack://gwiyeom-blog/./content/posts/server/golang/2021-08-19-go-echo-framework.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h3: \"h3\",\n    a: \"a\",\n    blockquote: \"blockquote\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\",\n    h1: \"h1\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h3, null, React.createElement(_components.a, {\n    href: \"https://echo.labstack.com/\"\n  }, \"ehco프레임워크\"), \" 를 사용하면서 사용했던 내용 기록\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"ctx ? ctx echo.Context\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"     Context represents the context of the current HTTP request. It holds request and response objects, path, path parameters, data and registered handler.\\n\")), \"\\n\", React.createElement(_components.h3, null, \"ctx가 필요한 이유\"), \"\\n\", React.createElement(_components.p, null, \"인터페이스?\\n팩토리를 통해서 의존성주입\\n폴더만들때 복수?사상의차이\\n팩토리난에 스트럭트 이름은 new로시작\\n쉬프투 f6\\n싱글톤\\n리시버\\n목객체?mock\\n덕타이핑\\n의존성을 느슨하게\\nmock을 자동으로 준다\"), \"\\n\", React.createElement(_components.p, null, \"단위테스트\\ns-r2\"), \"\\n\", React.createElement(_components.h2, null, \"db를 dev에 만들고\"), \"\\n\", React.createElement(_components.p, null, \"echo 가 하는일이\\nrequest,response 를 할때 중간에 middleware가 잡아주는 역할을 한다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"e.Use\"), \"의 argument로 넣은 함수가 moddleware\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"e.HTTPErrorHandler\"), \" 에러가 발생하면 발동한다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"e.Pre\"), \" 는 url 에 /가 있다면 빼주는 역할\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"middleware.CORS\"), \" 받을 메소드를 지정한다\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"e.Validator\"), \" validator 지정 => registernumber 등등 코드에는 RegisterValidation 함수를 넣어 커스톰 해줬다\"), \"\\n\", React.createElement(_components.p, null, \"main() config ,xormDb(db설정 셋팅) 는 1번만 설정된다\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"e.Use(handel.Create~)\"), \"\\nNewSession =>  트랜젝션 시작 (세션을 열어준다)\"), \"\\n\", React.createElement(_components.p, null, \"echo의 context 는  결국 변수다\"), \"\\n\", React.createElement(_components.p, null, \"request 에는 많은 정보가  잇고 이것을 echo가 담아놓은것\"), \"\\n\", React.createElement(_components.p, null, \"echo 자체에 토큰을 파싱해주는 parsendToken.Claims.~\"), \"\\n\", React.createElement(_components.p, null, \"토큭 파싱한 정보를 우리 코드에 설정\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"CreateTokenWithExpire\"), \"\\n처음 접근할때 memberId있는거 확인하고 토큰을 생성해 프론트로 보낸다\\n서버쪽 코드에서 cookie가 있는지도 확인하는 코드도 있다\"), \"\\n\", React.createElement(_components.p, null, \"routing\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"e.Start\"), \" webserver start\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"Logger\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"middleware.ReauestId\"), \" call마다 유니크한 id 를 생성한다.\"), \"\\n\", React.createElement(_components.p, null, \"JWTWithConfig => jwt 토큰 확인\\nsetSession => echo가 token을 분석해 꺼내서 user consetx로\\nsetXormSession으로 이름 변경\"), \"\\n\", React.createElement(_components.p, null, \"get할때는 session.Begin 을 안한다 sessioin 하면 비용 많이듬\"), \"\\n\", React.createElement(_components.p, null, \"db session 과 log session 같이 만듬\"), \"\\n\", React.createElement(_components.p, null, \"de seesion은 중간 오류시 rollback,commit\\nlog session은 끝까지 간다\"), \"\\n\", React.createElement(_components.p, null, \"context.DB(c) => 이런식으로\"), \"\\n\", React.createElement(_components.p, null, \"exp 등 고정된 key값을 echo가 자동으로 알고 분석\"), \"\\n\", React.createElement(_components.p, null, \"echo\\nContext 안에는\\nUser\\nRequest\\nResponse 가 있는데 자동으로 echo가 넣음\"), \"\\n\", React.createElement(_components.p, null, \"setSession에서 c.Get(\\\"user\\\").(*jwt.Token) 으로 형변환\"), \"\\n\", React.createElement(_components.p, null, \"rawClaims 는 map으로 되어있어서 struct 로 바꿔주는 작업이 MapToStruct 를 만들어 쓰기로힘\"), \"\\n\", React.createElement(_components.p, null, \"request_id => echo기능으로 자동으로 얻음\"), \"\\n\", React.createElement(_components.p, null, \"function에서 function에서 값을 넘기려면 파라미터에 추가해서 넣어야 하는데\\necho가 context에 넣어 줌으로 모든 function으로 이동이 자유롭도록\\n\", React.createElement(_components.code, null, \"getUserClaim\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"serLogger\"), \"\\n\", React.createElement(_components.code, null, \"c.Set\"), \" context에 저장한다는 뜻\"), \"\\n\", React.createElement(_components.p, null, \"기존에 log.infln 으로 했는데\"), \"\\n\", React.createElement(_components.p, null, \"requst _id를 logger에 같이 넣고 싶어서\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"l := logrus.WithFields )\\n\\n\")), \"\\n\", React.createElement(_components.p, null, \"사용할때는 context.Log(c).Token(\\\"\\\")\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"e.HideBanner\")), \"\\n\", React.createElement(_components.p, null, \"실행시 echo 메세지 지움\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \".bodyDump\"), \" 를 하면 request ,response 정보모두 한눈에 log가 찍힘 => 이건 더 테스트\"), \"\\n\", React.createElement(_components.p, null, \"이제는 controller 대신 handler 로 이름 바꿔서 쓰다\"), \"\\n\", React.createElement(_components.p, null, \"assets => html 이나 이미지\"), \"\\n\", React.createElement(_components.p, null, \"common은 공통 func 넣을 예정\"), \"\\n\", React.createElement(_components.p, null, \"비즈니스로직은 handler\"), \"\\n\", React.createElement(_components.p, null, \"context.Log log 가져옴\\ncontext.DB\\n등 쉽게 가져오게 하려고 만듬\"), \"\\n\", React.createElement(_components.p, null, \"폴더 이름\\norg\\ngoods\\napplication\\nreports\"), \"\\n\", React.createElement(_components.p, null, \"enum?\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"CRUD 에 썼던 DTO => OrgCUD 에 공통함수\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"Query  =>orgQuery => get\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"dto를 만들지 않고 query에서는 *로 찾지 않고 필요한거 컬럼에 넣어서 해야 한다\"), \"\\n\", React.createElement(_components.p, null, \"interface적용\"), \"\\n\", React.createElement(_components.p, null, \"handerInterface\\nRouteDefault\"), \"\\n\", React.createElement(_components.p, null, \"Org\", \".Init() 는 crud\\\\\"), \"\\n\", React.createElement(_components.p, null, \"internal에 entity 들어가 있음\"), \"\\n\", React.createElement(_components.p, null, \"dto service rpository 합친게 service 폴더\"), \"\\n\", React.createElement(_components.p, null, \"private public  handle까지 오픈하고 싶은데.. 그럼 딴데서 사용 x\\ninternal 안에 있는 pulbic 대문자로 쓰더라도\\nmoddleware에서는 부를 수 없다\\nhandle 에서는 부를 수 잇다\\n폴더 구조의 상위에서만 부를 수 있다\"), \"\\n\", React.createElement(_components.p, null, \"service 는 형제는 못부르고 부모handel만 부를 수 있다\\n나머지는 다 안됨\"), \"\\n\", React.createElement(_components.p, null, \"entiyInterface\"), \"\\n\", React.createElement(_components.h1, null, \"echo PathParamsBinder\"), \"\\n\", React.createElement(_components.p, null, \"4/18\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"var application service.ApplicationRepository\\n\\n\\tvar id int64\\n\\tvar key int64\\n\\tif err := echo.PathParamsBinder(c).Int64(\\\"id\\\", &id).Int64(\\\"key\\\", &key).BindError(); err != nil {\\n\\t\\treturn err\\n\\t}\\n\")), \"\\n\", React.createElement(_components.p, null, \"#참고\\n\", React.createElement(_components.a, {\n    href: \"https://mingrammer.com/translation-go-walkthrough-encoding-json-package/\"\n  }, \"https://mingrammer.com/translation-go-walkthrough-encoding-json-package/\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://github.com/labstack/echo/blob/master/binder_test.go\"\n  }, \"https://github.com/labstack/echo/blob/master/binder_test.go\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/gwiyeomgo.github.io/gwiyeomgo.github.io/content/posts/server/golang/2021-08-19-go-echo-framework.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h3","a","blockquote","p","pre","code","h2","ol","li","h1","_provideComponents","components","React","href","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}