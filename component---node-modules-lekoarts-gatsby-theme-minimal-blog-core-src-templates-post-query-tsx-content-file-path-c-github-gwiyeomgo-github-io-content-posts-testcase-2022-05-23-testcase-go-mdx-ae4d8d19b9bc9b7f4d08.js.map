{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-c-github-gwiyeomgo-github-io-content-posts-testcase-2022-05-23-testcase-go-mdx-ae4d8d19b9bc9b7f4d08.js","mappings":"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","sources":["webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post-footer.tsx","webpack://gwiyeom-blog/./src/@lekoarts/gatsby-theme-minimal-blog/components/post.tsx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/@lekoarts/gatsby-theme-minimal-blog-core/components/post.tsx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/item-tags.tsx","webpack://gwiyeom-blog/./content/posts/testcase/2022-05-23-testcase-go.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx","webpack://gwiyeom-blog/./src/@lekoarts/gatsby-theme-minimal-blog/components/seo.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as React from \"react\"\nimport type { MBPostProps } from \"./post\"\n\nconst PostFooter = ({ post }: MBPostProps) => null\n\nexport default PostFooter\n","/** @jsx jsx */\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport { jsx, Heading } from \"theme-ui\"\nimport Layout from \"@lekoarts/gatsby-theme-minimal-blog/src/components/layout\"\nimport ItemTags from \"@lekoarts/gatsby-theme-minimal-blog/src/components/item-tags\"\nimport Seo from \"./seo\"\nimport PostFooter from \"@lekoarts/gatsby-theme-minimal-blog/src/components/post-footer\"\n\nexport type MBPostProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    tags?: {\n      name: string\n      slug: string\n    }[]\n    description?: string\n    canonicalUrl?: string\n    excerpt: string\n    timeToRead?: number\n    banner?: {\n      childImageSharp: {\n        resize: {\n          src: string\n        }\n      }\n    }\n  }\n}\n\nconst px = [`16px`, `8px`, `4px`]\nconst shadow = px.map((v) => `rgba(0, 0, 0, 0.1) 0px ${v} ${v} 0px`)\n\nconst Post: React.FC<React.PropsWithChildren<PageProps<MBPostProps>>> = ({ data: { post }, children }) => (\n  <Layout>\n    <Heading as=\"h1\" variant=\"styles.h1\">\n      {post.title}\n    </Heading>\n    <p sx={{ color: `secondary`, mt: 3, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n      <time>{post.date}</time>\n      {post.tags && (\n        <React.Fragment>\n          {` — `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n      {post.timeToRead && ` — `}\n      {post.timeToRead && <span>{post.timeToRead} min read</span>}\n    </p>\n    <section\n      sx={{\n        my: 5,\n        \".gatsby-resp-image-wrapper\": {\n          my: [4, 4, 5],\n          borderRadius: `4px`,\n          boxShadow: shadow.join(`, `),\n          \".gatsby-resp-image-image\": {\n            borderRadius: `4px`,\n          },\n        },\n        variant: `layout.content`,\n      }}\n    >\n      {children}\n    </section>\n    <PostFooter post={post} />\n  </Layout>\n)\n\nexport default Post\n\nexport const Head: HeadFC<MBPostProps> = ({ data: { post } }) => (\n  <Seo\n    title={post.title}\n    description={post.description ? post.description : post.excerpt}\n    image={post.banner ? post.banner?.childImageSharp?.resize?.src : undefined}\n    pathname={post.slug}\n    canonicalUrl={post.canonicalUrl}\n  />\n)\n","import type { PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport Post, { Head, MBPostProps } from \"../../../components/post\"\n\nexport default function MinimalBlogCorePost({ ...props }: PageProps<MBPostProps>) {\n  return <Post {...props} />\n}\n\nexport { Head }\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <Link sx={(t) => ({ ...t.styles?.a })} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </Link>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    hr: \"hr\",\n    pre: \"pre\",\n    code: \"code\",\n    h4: \"h4\",\n    ul: \"ul\",\n    li: \"li\",\n    blockquote: \"blockquote\",\n    ol: \"ol\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"TDD(Test Driven Development)?\"), \"\\n\", React.createElement(_components.p, null, \"‘테스트 주도 개발’을 말한다.\\r\\n작은 단위로 테스트 케이스를 작성하고\\r\\n이를 통과하는 코드를 추가하는 단계를 반복하여 구현하는 것\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://hanamon.kr/tdd%EB%9E%80-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A3%BC%EB%8F%84-%EA%B0%9C%EB%B0%9C/\"\n  }, \"참고\")), \"\\n\", React.createElement(_components.h1, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"우리는  애자일 기방법론 중 XP 의 Test First 개념을 적용하여\\r\\nTest Case 를 작성합니다.\\r\\n이번 글에서는 golang 에서 test case 작성하는 내용을 쓰려고 한다.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h1, null, \"1.테스트 케이스를 위한 환경 구성 (테스트 픽스처 설정)\"), \"\\n\", React.createElement(_components.p, null, \"테스트 데이터베이스와 테스트 픽스처 설정\\r\\n테스트 코드를 실행하기 위해서는 테스트 데이터베이스와 데이터는 테스트 픽스처가 필요합니다.\\r\\n테스트 픽스텨는 System Under Test를 실행하기 위해 필요한 모든 것을 말합니다.\"), \"\\n\", React.createElement(_components.p, null, \"0.별도 관리가 필요 없는 메모리 데이터베이스 : sqlite\\r\\nSQLite는 MySQL나 PostgreSQL와 같은 데이터베이스 관리 시스템이지만, 서버가 아니라 응용 프로그램에 넣어 사용하는 비교적 가벼운 데이터베이스\"), \"\\n\", React.createElement(_components.p, null, \"이 데이터 베이스를 사용하기 위해서는 3개의 파일을 변경하고 추가해야 합니다.\"), \"\\n\", React.createElement(_components.p, null, \"첫번째 init_test.go 파일을 생성합니다.\\r\\ninit_test.go 파일에는 다음 3가지 설정을 합니다.\\r\\n0.config \", React.createElement(_components.a, {\n    href: \"https://github.com/jinzhu/configor\"\n  }, \"https://github.com/jinzhu/configor\"), \"\\r\\nconfig.InitConfig(\\\"config/config.json\\\")\\r\\n1.echo 프레임 워크 설정\\r\\n2.DB 엔진 설정\\r\\nxormEngine = common.InitTest()\"), \"\\n\", React.createElement(_components.p, null, \"init_test.go 전체 코드\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"//package controllers\\r\\nimport (\\r\\n\\t\\\"github.com/go-playground/validator/v10\\\"\\r\\n\\t\\\"github.com/go-xorm/xorm\\\"\\r\\n\\t\\\"github.com/labstack/echo\\\"\\r\\n\\t_ \\\"github.com/mattn/go-sqlite3\\\"\\r\\n\\t\\\"goods-donation-service/common\\\"\\r\\n\\t\\\"goods-donation-service/config\\\"\\r\\n)\\r\\n\\r\\nvar (\\r\\n\\techoApp          *echo.Echo\\r\\n\\txormEngine       *xorm.Engine\\r\\n\\thandleWithFilter func(handlerFunc echo.HandlerFunc, c echo.Context) error\\r\\n)\\r\\n\\r\\nfunc init() {\\r\\n\\tconfig.InitConfig(\\\"config/config.json\\\")\\r\\n\\tconfig.Config.Encrypt.GoodsEncryptKey = \\\"+KbPeShVmYq3t6w9z$C&F)J@NcQfTjWn\\\"\\r\\n\\r\\n\\txormEngine = common.InitTest()\\r\\n\\r\\n\\techoApp = echo.New()\\r\\n\\techoApp.Validator = &CustomValidator{validator: validator.New()}\\r\\n\\tdb := common.InitContextDB(xormEngine)\\r\\n\\r\\n\\thandleWithFilter = func(handlerFunc echo.HandlerFunc, c echo.Context) error {\\r\\n\\t\\treturn db(handlerFunc)(c)\\r\\n\\t}\\r\\n}\\r\\n\\r\\ntype CustomValidator struct {\\r\\n\\tvalidator *validator.Validate\\r\\n}\\r\\n\\r\\nfunc (cv *CustomValidator) Validate(i interface{}) error {\\r\\n\\treturn cv.validator.Struct(i)\\r\\n}\\r\\n\\r\\n\\n\")), \"\\n\", React.createElement(_components.p, null, \"두번째 test.go 파일에 sqlite를 사용하겠다고 코드를 추가합니다.\\r\\ncomon 디렉토리에 test.go파일에 sqlite를 사용하겠다고 코드를 입력합니다.\\r\\nengine, err := xorm.NewEngine(\\\"sqlite3\\\", \\\":memory:\\\")\"), \"\\n\", React.createElement(_components.p, null, \"test.go 전체 코드\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"package common\\r\\n\\r\\n\\r\\nimport (\\r\\n\\t\\\"github.com/go-xorm/xorm\\\"\\r\\n\\tlog \\\"github.com/sirupsen/logrus\\\"\\r\\n\\t\\\"os\\\"\\r\\n\\t\\\"runtime\\\"\\r\\n\\t\\\"xorm.io/core\\\"\\r\\n)\\r\\n\\r\\nfunc InitTest() *xorm.Engine {\\r\\n\\truntime.GOMAXPROCS(1)\\r\\n\\t// Log as JSON instead of the default ASCII formatter.\\r\\n\\tlog.SetFormatter(&log.JSONFormatter{})\\r\\n\\r\\n\\t// Output to stdout instead of the default stderr\\r\\n\\t// Can be any io.Writer, see below for File example\\r\\n\\tlog.SetOutput(os.Stdout)\\r\\n\\r\\n\\t// Only log the warning severity or above.\\r\\n\\tlog.SetLevel(log.InfoLevel)\\r\\n\\r\\n\\tengine, err := xorm.NewEngine(\\\"sqlite3\\\", \\\":memory:\\\")\\r\\n\\tif err != nil {\\r\\n\\t\\tpanic(err)\\r\\n\\t}\\r\\n\\tengine.ShowSQL(true)\\r\\n\\tengine.Logger().SetLevel(core.LOG_INFO)\\r\\n\\r\\n\\treturn engine\\r\\n}\\r\\n\\r\\n\\n\")), \"\\n\", React.createElement(_components.p, null, \"세번째 fixture_test.go 파일을 생성합니다.\\r\\nfixture_test.go 에서는 테스트 코드를 작성할 때 사용할 TABLE을 설정합니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"\\txormEngine.Sync2(\\r\\n\\t\\tnew(entities.User),\\r\\n\\t\\tnew(entities.Company),\\r\\n\\t)\\r\\n\\n\")), \"\\n\", React.createElement(_components.p, null, \"또한 YML에 데이터 TABLE에 추가하는 코드를 설정합니다.\\r\\nfixtures, err := testfixtures.NewFolder(xormEngine.DB().DB, &testfixtures.SQLite\", \", \\\"../testdata/db_fixtures\\\")\\r\\n../testdata/db_fixtures 경로에 있는 yml 파일을 sqlite DB에 (메모리 DB)에 추가하겠다.\"), \"\\n\", React.createElement(_components.p, null, \"fixture_test.go 전체 코드\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"package controllers\\r\\n\\r\\nimport (\\r\\n\\t\\\"fmt\\\"\\r\\n\\t_ \\\"github.com/mattn/go-sqlite3\\\"\\r\\n\\t\\\"goods-donation-service/entities\\\"\\r\\n\\t\\\"gopkg.in/testfixtures.v2\\\"\\r\\n)\\r\\n\\r\\ntype DatabaseFixture struct {\\r\\n}\\r\\n\\r\\nfunc (DatabaseFixture) setUpDefault() {\\r\\n\\txormEngine.Sync2(\\r\\n\\t\\tnew(entities.User),\\r\\n\\t\\tnew(entities.Company),\\r\\n\\t)\\r\\n\\r\\n\\tfixtures, err := testfixtures.NewFolder(xormEngine.DB().DB, &testfixtures.SQLite{}, \\\"../testdata/db_fixtures\\\")\\r\\n\\tfmt.Println(\\\"=== RUN DatabaseFixture.setUpDefault\\\")\\r\\n\\r\\n\\tif err != nil {\\r\\n\\t\\tpanic(err)\\r\\n\\t}\\r\\n\\ttestfixtures.SkipDatabaseNameCheck(true)\\r\\n\\r\\n\\tif err := fixtures.Load(); err != nil {\\r\\n\\t\\tpanic(err)\\r\\n\\t}\\r\\n\\tfmt.Println(\\\"=== FINISH DatabaseFixture.setUpDefault\\\")\\r\\n}\\r\\n\\n\")), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h1, null, \"2.golang 코드로 testcase 작성하기\"), \"\\n\", React.createElement(_components.h4, null, \"1. 테스트 케이스 환경 만들기\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"../mysql/2021-06-19-mysql-sqlite/\"\n  }, \"db 설정-YML 데이터 추가\")), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"2. 함수 단위 테스트 케이스 작성\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"1.controller_test.go 파일 만들기\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"아래 코드는 \", React.createElement(_components.code, null, \"controller.go\"), \" 파일의 내용이다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"func (controller Controller) Init(g *echo.Group) {\\r\\n\\tg.POST(\\\"\\\", controller.Create, middlewares.CheckPermission([]string{\\\"*\\\"}))\\r\\n\\tg.GET(\\\"/:id\\\", controller.Get, middlewares.CheckPermission([]string{\\\"*\\\"}))\\r\\n}\\r\\n\\r\\nfunc (Controller) Create(ctx echo.Context) error {\\r\\n    ...\\r\\n}\\n\")), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Create 함수에 커서를 두고 => goland 의 단축키 \", React.createElement(_components.code, null, \"Ctrl+Shift+T\"), \" 동작하면\\r\\n\", React.createElement(_components.code, null, \"controller_test.go\"), \" 파일에 \", React.createElement(_components.code, null, \"TestController_Create\"), \" 테스트 케이스를 작성할 수 있는 파일이 생성된다.\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"func TestController_Create(t *testing.T) {\\r\\n    //go의 경우 test case 를 go 형식의 파일 이름에 쓴다면 작성할 수 있다.\\r\\n}\\n\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"2.controller_test.go 파일에 코드 작성\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://en.wikipedia.org/wiki/Given-When-Then\"\n  }, \"given when then\"), \"\\r\\n\", React.createElement(_components.code, null, \": Test Code  표현하는 방식\"), \"\\r\\n\", React.createElement(_components.a, {\n    href: \"https://kchanguk.tistory.com/40\"\n  }, \"- 개념 설명 링크\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"given when then 에 맞춰 코드를 작성한다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"t.Run(\\\"CreateWithClassificationByVisit_기부등록\\\", func(t *testing.T) {\\r\\n        //given\\r\\n        requestBody := `{ \\\"name\\\":\\\"수진\\\",\\\"meno\\\":\\\"tset\\\"}`\\r\\n        req := httptest.NewRequest(echo.POST,`/`,strings.NewReader(requestBody))\\r\\n        req.Header.Add(echo.HeaderContentType, echo.MIMEApplicationJSON)\\r\\n        \\r\\n        userClaim := auth.UserClaim{\\r\\n        Id:    3,\\r\\n        Roles: \\\"manager\\\",\\r\\n        }\\r\\n        \\r\\n        // when\\r\\n        rec := NewRequest(req).\\r\\n        WithUser(&userClaim).\\r\\n        Handle(Controller{}.Create)\\r\\n        \\r\\n        // then\\r\\n        assert.Equal(t, http.StatusOK, rec.Code)\\r\\n        \\r\\n        result := map[string]interface{}{}\\r\\n        json.Unmarshal(rec.Body.Bytes(), &result)\\r\\n        assert.Equal(t, float64(2), result[\\\"Id\\\"])\\r\\n\\t})\\n\")), \"\\n\", React.createElement(_components.h1, null, \"golang 테스트 케이스를 작성하면서 주의할 부분\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"하나의 테스트 실행시 db 설정및 초기화 된다.\\r\\n\", React.createElement(_components.code, null, \"DatabaseFixture{}.setUpDefault(xormDb)\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"tip) 여러 케이스를 테스트 하고 싶다면 db 셋팅 후 등록=> 조회까지 한번에 테스트 가능\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"DatabaseFixture{}.setUpDefault(xormDb)\\r\\nt.Run(\\\"Test_등록_테스트\\\",func(t *testing.T) {//given then when 작성})\\r\\nt.Run(\\\"Test_등록_조회_테스트\\\",func(t *testing.T) {//given then when 작성})\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"t.Skip() 을 통해 전체 테스트 케이스 돌릴때 특정 test case 를 ignored 할 수 있다.\\r\\n나의 경우는 알림톡이 실제 번호로 전송되는 문제가 있어서\\r\\n전체 테스트 케이스 실행 시 알림톡이 전송되어 문제가 있었다.\\r\\n알림톡이 제대로 왔는지 테스트 할때는 \", React.createElement(_components.code, null, \"t.Skip()\"), \" 을 주석처리하고 따로 각 테스트 케이스를 돌려서 확인\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h1, null, \"3.TESTCASE  에 외부 서비스를 호출하는 API 가 존재한다면 어떻게 테스트를 할 수 있을까?\"), \"\\n\", React.createElement(_components.p, null, \"ex) 카카오 알림톡 api 호출하는 코드가 내가 테스트 하려는 코드에 존재할 때\"), \"\\n\", React.createElement(_components.h2, null, \"방법1 가상 서버를 생성\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://pkg.go.dev/net/http/httptest\"\n  }, \"httptest\"), \" 를 사용해서 가상 서버 url 을 생성하고\\r\\n실제 testcase 에서 api 를 호출할때 url을 가상 서버 url 을 적용합니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"\\t// setUp WebServer Fixture\\r\\n\\tserver := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\\r\\n\\t\\tif r.Method == http.MethodPost && r.URL.Path == \\\"/project/434/posts\\\" {\\r\\n\\t\\t\\tw.WriteHeader(200)\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tw.WriteHeader(400)\\r\\n\\t\\t}\\r\\n\\t}))\\r\\n\\tdefer server.Close()\\n\")), \"\\n\", React.createElement(_components.h2, null, \"방법2 테스트 케이스 실행시 변수를 바꿔 쓴다\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"C:/github/gwiyeomgo.github.io/content/posts/testcase/2022-05-23-testcase-go.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n","import * as React from \"react\"\nimport { withPrefix } from \"gatsby\"\nimport useSiteMetadata from \"@lekoarts/gatsby-theme-minimal-blog/src/hooks/use-site-metadata\"\n\ntype SEOProps = {\n  title?: string\n  description?: string\n  pathname?: string\n  image?: string\n  children?: React.ReactNode\n  canonicalUrl?: string\n}\n\nconst Seo = ({\n  title = ``,\n  description = ``,\n  pathname = ``,\n  image = ``,\n  children = null,\n  canonicalUrl = ``,\n}: SEOProps) => {\n  const site = useSiteMetadata()\n\n  const {\n    siteTitle,\n    siteTitleAlt: defaultTitle,\n    siteUrl,\n    siteDescription: defaultDescription,\n    siteImage: defaultImage,\n    author,\n  } = site\n\n  const seo = {\n    title: title ? `${title} | ${siteTitle}` : defaultTitle,\n    description: description || defaultDescription,\n    url: `${siteUrl}${pathname || ``}`,\n    image: `${siteUrl}${image || defaultImage}`,\n  }\n  return (\n    <>\n      <title>{seo.title}</title>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n      <meta property=\"og:title\" content={seo.title} />\n      <meta property=\"og:url\" content={seo.url} />\n      <meta property=\"og:description\" content={seo.description} />\n      <meta property=\"og:image\" content={seo.image} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:image:alt\" content={seo.description} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:url\" content={seo.url} />\n      <meta name=\"twitter:description\" content={seo.description} />\n      <meta name=\"twitter:image\" content={seo.image} />\n      <meta name=\"twitter:image:alt\" content={seo.description} />\n      <meta name=\"twitter:creator\" content={author} />\n      <meta name=\"gatsby-theme\" content=\"@lekoarts/gatsby-theme-minimal-blog\" />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href={withPrefix(`/favicon-32x32.png`)} />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href={withPrefix(`/favicon-16x16.png`)} />\n      <link rel=\"apple-touch-icon\" sizes=\"180x180\" href={withPrefix(`/apple-touch-icon.png`)} />\n      {canonicalUrl ? <link rel=\"canonical\" href={canonicalUrl} /> : null}\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n"],"names":["_ref","post","shadow","map","v","data","children","jsx","Layout","Heading","as","variant","title","sx","color","mt","a","fontSize","date","tags","React","ItemTags","timeToRead","my","borderRadius","boxShadow","join","PostFooter","Head","_ref2","Seo","description","excerpt","image","banner","_post$banner","childImageSharp","_post$banner$childIma","resize","_post$banner$childIma2","src","undefined","pathname","slug","canonicalUrl","MinimalBlogCorePost","props","Post","tagsPath","basePath","useMinimalBlogConfig","tag","i","key","Link","t","styles","_t$styles","to","replaceSlashes","name","_createMdxContent","_components","Object","assign","h1","p","hr","pre","code","h4","ul","li","blockquote","ol","h2","_provideComponents","components","href","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX","site","useSiteMetadata","siteTitle","siteTitleAlt","defaultTitle","siteUrl","siteDescription","defaultDescription","siteImage","defaultImage","author","seo","url","content","property","rel","type","sizes","withPrefix"],"sourceRoot":""}