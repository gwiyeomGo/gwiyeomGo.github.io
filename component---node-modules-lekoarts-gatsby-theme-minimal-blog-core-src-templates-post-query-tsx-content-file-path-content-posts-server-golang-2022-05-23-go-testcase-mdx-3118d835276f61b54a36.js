"use strict";(self.webpackChunkgwiyeom_blog=self.webpackChunkgwiyeom_blog||[]).push([[9649],{4370:function(e,t,n){n.r(t),n.d(t,{Head:function(){return c.F},default:function(){return i}});var l=n(7294),r=n(1151);function o(e){const t=Object.assign({h1:"h1",p:"p",a:"a",hr:"hr",pre:"pre",code:"code",h4:"h4",ul:"ul",li:"li",blockquote:"blockquote",ol:"ol",h2:"h2",h3:"h3"},(0,r.ah)(),e.components);return l.createElement(l.Fragment,null,l.createElement(t.h1,null,"TDD(Test Driven Development)?"),"\n",l.createElement(t.p,null,"‘테스트 주도 개발’을 말한다.\n작은 단위로 테스트 케이스를 작성하고\n이를 통과하는 코드를 추가하는 단계를 반복하여 구현하는 것"),"\n",l.createElement(t.p,null,l.createElement(t.a,{href:"https://hanamon.kr/tdd%EB%9E%80-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A3%BC%EB%8F%84-%EA%B0%9C%EB%B0%9C/"},"참고")),"\n",l.createElement(t.h1,null,"배경"),"\n",l.createElement(t.p,null,"우리는  애자일 기방법론 중 XP 의 Test First 개념을 적용하여\nTest Case 를 작성합니다.\n이번 글에서는 golang 에서 test case 작성하는 내용을 쓰려고 한다."),"\n",l.createElement(t.hr),"\n",l.createElement(t.h1,null,"1.테스트 케이스를 위한 환경 구성 (테스트 픽스처 설정)"),"\n",l.createElement(t.p,null,"테스트 데이터베이스와 테스트 픽스처 설정\n테스트 코드를 실행하기 위해서는 테스트 데이터베이스와 데이터는 테스트 픽스처가 필요합니다.\n테스트 픽스텨는 System Under Test를 실행하기 위해 필요한 모든 것을 말합니다."),"\n",l.createElement(t.p,null,"0.별도 관리가 필요 없는 메모리 데이터베이스 : sqlite\nSQLite는 MySQL나 PostgreSQL와 같은 데이터베이스 관리 시스템이지만, 서버가 아니라 응용 프로그램에 넣어 사용하는 비교적 가벼운 데이터베이스"),"\n",l.createElement(t.p,null,"이 데이터 베이스를 사용하기 위해서는 3개의 파일을 변경하고 추가해야 합니다."),"\n",l.createElement(t.p,null,"첫번째 init_test.go 파일을 생성합니다.\ninit_test.go 파일에는 다음 3가지 설정을 합니다.\n0.config ",l.createElement(t.a,{href:"https://github.com/jinzhu/configor"},"https://github.com/jinzhu/configor"),'\nconfig.InitConfig("config/config.json")\n1.echo 프레임 워크 설정\n2.DB 엔진 설정\nxormEngine = common.InitTest()'),"\n",l.createElement(t.p,null,"init_test.go 전체 코드"),"\n",l.createElement(t.pre,null,l.createElement(t.code,null,'//package controllers\nimport (\n\t"github.com/go-playground/validator/v10"\n\t"github.com/go-xorm/xorm"\n\t"github.com/labstack/echo"\n\t_ "github.com/mattn/go-sqlite3"\n\t"goods-donation-service/common"\n\t"goods-donation-service/config"\n)\n\nvar (\n\techoApp          *echo.Echo\n\txormEngine       *xorm.Engine\n\thandleWithFilter func(handlerFunc echo.HandlerFunc, c echo.Context) error\n)\n\nfunc init() {\n\tconfig.InitConfig("config/config.json")\n\tconfig.Config.Encrypt.GoodsEncryptKey = "+KbPeShVmYq3t6w9z$C&F)J@NcQfTjWn"\n\n\txormEngine = common.InitTest()\n\n\techoApp = echo.New()\n\techoApp.Validator = &CustomValidator{validator: validator.New()}\n\tdb := common.InitContextDB(xormEngine)\n\n\thandleWithFilter = func(handlerFunc echo.HandlerFunc, c echo.Context) error {\n\t\treturn db(handlerFunc)(c)\n\t}\n}\n\ntype CustomValidator struct {\n\tvalidator *validator.Validate\n}\n\nfunc (cv *CustomValidator) Validate(i interface{}) error {\n\treturn cv.validator.Struct(i)\n}\n\n\n')),"\n",l.createElement(t.p,null,'두번째 test.go 파일에 sqlite를 사용하겠다고 코드를 추가합니다.\ncomon 디렉토리에 test.go파일에 sqlite를 사용하겠다고 코드를 입력합니다.\nengine, err := xorm.NewEngine("sqlite3", ":memory:")'),"\n",l.createElement(t.p,null,"test.go 전체 코드"),"\n",l.createElement(t.pre,null,l.createElement(t.code,null,'package common\n\n\nimport (\n\t"github.com/go-xorm/xorm"\n\tlog "github.com/sirupsen/logrus"\n\t"os"\n\t"runtime"\n\t"xorm.io/core"\n)\n\nfunc InitTest() *xorm.Engine {\n\truntime.GOMAXPROCS(1)\n\t// Log as JSON instead of the default ASCII formatter.\n\tlog.SetFormatter(&log.JSONFormatter{})\n\n\t// Output to stdout instead of the default stderr\n\t// Can be any io.Writer, see below for File example\n\tlog.SetOutput(os.Stdout)\n\n\t// Only log the warning severity or above.\n\tlog.SetLevel(log.InfoLevel)\n\n\tengine, err := xorm.NewEngine("sqlite3", ":memory:")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tengine.ShowSQL(true)\n\tengine.Logger().SetLevel(core.LOG_INFO)\n\n\treturn engine\n}\n\n\n')),"\n",l.createElement(t.p,null,"세번째 fixture_test.go 파일을 생성합니다.\nfixture_test.go 에서는 테스트 코드를 작성할 때 사용할 TABLE을 설정합니다."),"\n",l.createElement(t.pre,null,l.createElement(t.code,null,"\txormEngine.Sync2(\n\t\tnew(entities.User),\n\t\tnew(entities.Company),\n\t)\n\n")),"\n",l.createElement(t.p,null,"또한 YML에 데이터 TABLE에 추가하는 코드를 설정합니다.\nfixtures, err := testfixtures.NewFolder(xormEngine.DB().DB, &testfixtures.SQLite",', "../testdata/db_fixtures")\n../testdata/db_fixtures 경로에 있는 yml 파일을 sqlite DB에 (메모리 DB)에 추가하겠다.'),"\n",l.createElement(t.p,null,"fixture_test.go 전체 코드"),"\n",l.createElement(t.pre,null,l.createElement(t.code,null,'package controllers\n\nimport (\n\t"fmt"\n\t_ "github.com/mattn/go-sqlite3"\n\t"goods-donation-service/entities"\n\t"gopkg.in/testfixtures.v2"\n)\n\ntype DatabaseFixture struct {\n}\n\nfunc (DatabaseFixture) setUpDefault() {\n\txormEngine.Sync2(\n\t\tnew(entities.User),\n\t\tnew(entities.Company),\n\t)\n\n\tfixtures, err := testfixtures.NewFolder(xormEngine.DB().DB, &testfixtures.SQLite{}, "../testdata/db_fixtures")\n\tfmt.Println("=== RUN DatabaseFixture.setUpDefault")\n\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\ttestfixtures.SkipDatabaseNameCheck(true)\n\n\tif err := fixtures.Load(); err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println("=== FINISH DatabaseFixture.setUpDefault")\n}\n\n')),"\n",l.createElement(t.hr),"\n",l.createElement(t.h1,null,"2.golang 코드로 testcase 작성하기"),"\n",l.createElement(t.h4,null,"1. 테스트 케이스 환경 만들기"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,l.createElement(t.a,{href:"../mysql/2021-06-19-mysql-sqlite/"},"db 설정-YML 데이터 추가")),"\n"),"\n",l.createElement(t.h4,null,"2. 함수 단위 테스트 케이스 작성"),"\n",l.createElement(t.blockquote,null,"\n",l.createElement(t.p,null,"1.controller_test.go 파일 만들기"),"\n"),"\n",l.createElement(t.p,null,"아래 코드는 ",l.createElement(t.code,null,"controller.go")," 파일의 내용이다."),"\n",l.createElement(t.pre,null,l.createElement(t.code,null,'func (controller Controller) Init(g *echo.Group) {\n\tg.POST("", controller.Create, middlewares.CheckPermission([]string{"*"}))\n\tg.GET("/:id", controller.Get, middlewares.CheckPermission([]string{"*"}))\n}\n\nfunc (Controller) Create(ctx echo.Context) error {\n    ...\n}\n')),"\n",l.createElement(t.ol,null,"\n",l.createElement(t.li,null,"Create 함수에 커서를 두고 => goland 의 단축키 ",l.createElement(t.code,null,"Ctrl+Shift+T")," 동작하면\n",l.createElement(t.code,null,"controller_test.go")," 파일에 ",l.createElement(t.code,null,"TestController_Create")," 테스트 케이스를 작성할 수 있는 파일이 생성된다."),"\n"),"\n",l.createElement(t.pre,null,l.createElement(t.code,null,"func TestController_Create(t *testing.T) {\n    //go의 경우 test case 를 go 형식의 파일 이름에 쓴다면 작성할 수 있다.\n}\n")),"\n",l.createElement(t.blockquote,null,"\n",l.createElement(t.p,null,"2.controller_test.go 파일에 코드 작성"),"\n"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"\n",l.createElement(t.p,null,l.createElement(t.a,{href:"https://en.wikipedia.org/wiki/Given-When-Then"},"given when then"),"\n",l.createElement(t.code,null,": Test Code  표현하는 방식"),"\n",l.createElement(t.a,{href:"https://kchanguk.tistory.com/40"},"- 개념 설명 링크")),"\n"),"\n",l.createElement(t.li,null,"\n",l.createElement(t.p,null,"given when then 에 맞춰 코드를 작성한다."),"\n"),"\n"),"\n",l.createElement(t.pre,null,l.createElement(t.code,null,'t.Run("CreateWithClassificationByVisit_기부등록", func(t *testing.T) {\n        //given\n        requestBody := `{ "name":"수진","meno":"tset"}`\n        req := httptest.NewRequest(echo.POST,`/`,strings.NewReader(requestBody))\n        req.Header.Add(echo.HeaderContentType, echo.MIMEApplicationJSON)\n        \n        userClaim := auth.UserClaim{\n        Id:    3,\n        Roles: "manager",\n        }\n        \n        // when\n        rec := NewRequest(req).\n        WithUser(&userClaim).\n        Handle(Controller{}.Create)\n        \n        // then\n        assert.Equal(t, http.StatusOK, rec.Code)\n        \n        result := map[string]interface{}{}\n        json.Unmarshal(rec.Body.Bytes(), &result)\n        assert.Equal(t, float64(2), result["Id"])\n\t})\n')),"\n",l.createElement(t.h1,null,"golang 테스트 케이스를 작성하면서 주의할 부분"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"하나의 테스트 실행시 db 설정및 초기화 된다.\n",l.createElement(t.code,null,"DatabaseFixture{}.setUpDefault(xormDb)")),"\n"),"\n",l.createElement(t.p,null,"tip) 여러 케이스를 테스트 하고 싶다면 db 셋팅 후 등록=> 조회까지 한번에 테스트 가능"),"\n",l.createElement(t.pre,null,l.createElement(t.code,null,'DatabaseFixture{}.setUpDefault(xormDb)\nt.Run("Test_등록_테스트",func(t *testing.T) {//given then when 작성})\nt.Run("Test_등록_조회_테스트",func(t *testing.T) {//given then when 작성})\n')),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"t.Skip() 을 통해 전체 테스트 케이스 돌릴때 특정 test case 를 ignored 할 수 있다.\n나의 경우는 알림톡이 실제 번호로 전송되는 문제가 있어서\n전체 테스트 케이스 실행 시 알림톡이 전송되어 문제가 있었다.\n알림톡이 제대로 왔는지 테스트 할때는 ",l.createElement(t.code,null,"t.Skip()")," 을 주석처리하고 따로 각 테스트 케이스를 돌려서 확인"),"\n"),"\n",l.createElement(t.hr),"\n",l.createElement(t.h1,null,"3.TESTCASE  에 외부 서비스를 호출하는 API 가 존재한다면 어떻게 테스트를 할 수 있을까?"),"\n",l.createElement(t.p,null,"ex) 카카오 알림톡 api 호출하는 코드가 내가 테스트 하려는 코드에 존재할 때"),"\n",l.createElement(t.h2,null,"방법1 가상 서버를 생성"),"\n",l.createElement(t.p,null,l.createElement(t.a,{href:"https://pkg.go.dev/net/http/httptest"},"httptest")," 를 사용해서 가상 서버 url 을 생성하고\n실제 testcase 에서 api 를 호출할때 url을 가상 서버 url 을 적용합니다."),"\n",l.createElement(t.pre,null,l.createElement(t.code,null,'\t// setUp WebServer Fixture\n\tserver := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == http.MethodPost && r.URL.Path == "/project/434/posts" {\n\t\t\tw.WriteHeader(200)\n\t\t} else {\n\t\t\tw.WriteHeader(400)\n\t\t}\n\t}))\n\tdefer server.Close()\n')),"\n",l.createElement(t.h2,null,"방법2 테스트 케이스 실행시 변수를 바꿔 쓴다"),"\n",l.createElement(t.p,null,"#TESTCASE 커버리지 확인하기"),"\n",l.createElement(t.h2,null,"배경"),"\n",l.createElement(t.p,null,"테스트 케이스를 적용하면서 잘 적용된 것인지 궁금했다.\n실제로 코드의 커버가 얼마나 되는지 확인하는 go 커멘드 명령어를 알아보자"),"\n",l.createElement(t.p,null,"reflect 패키지를 통해"),"\n",l.createElement(t.p,null,'t.Log(reflect.TypeOf("string").Kind())\n',l.createElement(t.code,null,"go test ./... -v")),"\n",l.createElement(t.p,null,"테스트가 코드의 몇 퍼센트를 통과시키고 있는지 알 수 있음\n",l.createElement(t.code,null,"go test -v -coverprofile cover.out ./...")),"\n",l.createElement(t.p,null,"해당 명령어로 cover.out 파일이 생겼다면\ncover.out 을 html 파일로 볼 수 있다\n",l.createElement(t.code,null,"go tool cover -html cover.out")),"\n",l.createElement(t.p,null,"go 버전에 따라 명령어가 다른거 같다\n아래 명령어로 확인\n",l.createElement(t.code,null,"go tool cover --help")),"\n",l.createElement(t.h3,null,"service 는 어떻게 테스트하지?"),"\n",l.createElement(t.p,null,"golang 으로 API 를 만들때\ntestcase 를 작성합니다.\ncontroller,service,entidy 별 패키지를 만들어서 API 를 만듭니다.\ncontroller 기준 api 를 만들고 있다.\nservice,entitdy 의 함수,스트럭트는 testcase 는 어떻게 할 수 있지?"),"\n",l.createElement(t.h1,null,"참고"),"\n",l.createElement(t.p,null,l.createElement(t.a,{href:"https://golangdocs.com/code-coverage-in-golang"},"https://golangdocs.com/code-coverage-in-golang")))}var a=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,r.ah)(),e.components);return t?l.createElement(t,e,l.createElement(o,e)):o(e)},c=n(8804);function i(e){return l.createElement(c.Z,e,l.createElement(a,e))}c.Z}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-golang-2022-05-23-go-testcase-mdx-3118d835276f61b54a36.js.map