{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-client-javascript-2022-04-19-javascript-number-validator-mdx-af5be28dfe51c574a69e.js","mappings":"mNAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,KACJC,IAAK,MACLC,KAAM,OACNC,EAAG,IACHC,EAAG,IACHC,GAAI,KACJC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,MAAsBb,EAAMc,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBd,EAAYG,GAAI,KAAM,KAAMW,EAAAA,cAAoBd,EAAYI,GAAI,KAAM,wBAAyB,KAAMU,EAAAA,cAAoBd,EAAYI,GAAI,KAAM,0BAA2B,MAAO,KAAMU,EAAAA,cAAoBd,EAAYK,IAAK,KAAMS,EAAAA,cAAoBd,EAAYM,KAAM,CAC3US,UAAW,uBACV,gXAAyX,KAAMD,EAAAA,cAAoBd,EAAYK,IAAK,KAAMS,EAAAA,cAAoBd,EAAYM,KAAM,CACjdS,UAAW,uBACV,qKAAwK,KAAMD,EAAAA,cAAoBd,EAAYO,EAAG,KAAM,sCAAuC,KAAMO,EAAAA,cAAoBd,EAAYO,EAAG,KAAM,wFAAyF,KAAMO,EAAAA,cAAoBd,EAAYK,IAAK,KAAMS,EAAAA,cAAoBd,EAAYM,KAAM,KAAM,iIAAkI,KAAMQ,EAAAA,cAAoBd,EAAYO,EAAG,KAAM,6EAA8E,KAAMO,EAAAA,cAAoBd,EAAYK,IAAK,KAAMS,EAAAA,cAAoBd,EAAYM,KAAM,CAC1zBS,UAAW,uBACV,gGAAiG,KAAMD,EAAAA,cAAoBd,EAAYO,EAAG,KAAM,0FAA2F,KAAMO,EAAAA,cAAoBd,EAAYK,IAAK,KAAMS,EAAAA,cAAoBd,EAAYM,KAAM,CACnUS,UAAW,uBACV,kGAAmG,KAAMD,EAAAA,cAAoBd,EAAYO,EAAG,KAAM,SAAUO,EAAAA,cAAoBd,EAAYQ,EAAG,CAChMQ,KAAM,4FACL,mDAAoD,KAAMF,EAAAA,cAAoBd,EAAYS,GAAI,KAAMK,EAAAA,cAAoBd,EAAYM,KAAM,KAAM,+BAAgC,KAAMQ,EAAAA,cAAoBd,EAAYO,EAAG,KAAM,kDAAmD,KAAMO,EAAAA,cAAoBd,EAAYK,IAAK,KAAMS,EAAAA,cAAoBd,EAAYM,KAAM,KAAM,4GAAkH,KAAMQ,EAAAA,cAAoBd,EAAYU,GAAI,KAAM,kBAAmB,KAAMI,EAAAA,cAAoBd,EAAYO,EAAG,KAAM,4FAA6F,KAAMO,EAAAA,cAAoBd,EAAYW,GAAI,KAAM,KAAMG,EAAAA,cAAoBd,EAAYI,GAAI,KAAM,yGAA0G,MAC/3B,CAKA,MAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOkB,QAASC,GAAajB,OAAOC,OAAO,CAAC,GAAGU,EAAAA,EAAAA,MAAsBb,EAAMc,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWnB,EAAOe,EAAAA,cAAoBhB,EAAmBC,IAAUD,EAAkBC,EAC9H,E,UC1Be,SAASoB,EAAiBpB,GACvC,OAAOe,EAAAA,cAAoBM,EAAAA,EAAerB,EAAOe,EAAAA,cAAoBO,EAAqBtB,GAC5F,CAHAqB,EAAAA,C","sources":["webpack://gwiyeom-blog/./content/posts/client/javascript/2022-04-19-javascript-numberValidator.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    ol: \"ol\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    p: \"p\",\n    a: \"a\",\n    h3: \"h3\",\n    h2: \"h2\",\n    ul: \"ul\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"입력창에 회원번호,기부번호를 입력한다\"), \"\\n\", React.createElement(_components.li, null, \"직접 키보드로 입력하면서 문자가 포함된다\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-javascript\"\n  }, \"if (searchText.length > 0) {\\r\\n  switch (searchType) {\\r\\n    case \\\"memberId\\\":\\r\\n      if(isNumeric(searchText) === false){\\r\\n        return message.error(\\\"회원번호가 올바르지 않습니다.\\\");\\r\\n      }\\r\\n      break;\\r\\n    case \\\"id\\\":\\r\\n      if(isNumeric(searchText) === false){\\r\\n        return message.error(\\\"기부번호가 올바르지 않습니다.\\\");\\r\\n      }\\r\\n      break;\\r\\n  }\\r\\n}\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-javascript\"\n  }, \"const NumberValidator = (str) => {\\r\\n    if (typeof str !== \\\"string\\\") return false\\r\\n    return !isNaN(str) && !isNaN(parseFloat(str)) //true && true\\r\\n  }\\n\")), \"\\n\", React.createElement(_components.p, null, \"위 예제처럼 사용하면 str 에 숫자만 있는지 확인이 가능하다\"), \"\\n\", React.createElement(_components.p, null, \"isNaN 함수는 숫자를 넣으면 false 를 반환한다.\\r\\nisNaN 함수는 string 과 숫자가 함께있는 문자를 입력하면 true 값을 반환한다\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"isNaN(123)         // false\\r\\nisNaN('123')       // false\\r\\nisNaN('test')      // true\\r\\nisNaN('123test')   // true\\r\\n\\n\")), \"\\n\", React.createElement(_components.p, null, \"사실 위 예제에서 !isNaN(str) 만 사용해도 확인이 가능하지만\\r\\n!isNaN(parseFloat(str))을 쓴 이유는?\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-javascript\"\n  }, \"isNaN('')          // false\\r\\nisNaN(' ')         // false\\r\\nisNaN(false)       // false\\n\")), \"\\n\", React.createElement(_components.p, null, \"이 경우도 false 를 반환하기 때문에 ...\\r\\n한번 더 확인이 필요하다\\r\\nex) 스페이스를 클릭하고 검색하면 검색이 된다... 공백을 막기 위해\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-javascript\"\n  }, \"console.log(!isNaN(parseFloat(' '))) //false\\r\\nconsole.log(!isNaN(' '))             //ture\\n\")), \"\\n\", React.createElement(_components.p, null, \"출처\\r\\n\", React.createElement(_components.a, {\n    href: \"https://stackoverflow.com/questions/175739/how-can-i-check-if-a-string-is-a-valid-number\"\n  }, \"How can I check if a string is a valid number?\")), \"\\n\", React.createElement(_components.h3, null, React.createElement(_components.code, null, \"빈문자,null,undefined,0,false\")), \"\\n\", React.createElement(_components.p, null, \"일때 제대로 어떤값이 알지 못하면 에러를 발생시킬 수 있다.\\r\\n자세하게 알아보자\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"const test = null //빈문자(\\\"\\\"),null,undefined,0,false\\r\\nif(!test){\\r\\n  console.log(\\\"출력\\\")//\\\"여기 들어옴\\r\\n}\\n\")), \"\\n\", React.createElement(_components.h2, null, \"배열안에 empty 값 ?\"), \"\\n\", React.createElement(_components.p, null, \"배열 생성을 10으로 크기 지정해서 생성후\\r\\nindex 1 부터 데이터를 채우고 console 로 배열을 찍으면\\r\\nindex 0 에 empty 가 있다\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"배열에 undefined 값이 있는 경우 vs empty 값 있는 경우\\r\\nundefined 는 값으로 인지하면 map 으로 순회\\r\\nempty 는  map 사용시  처리도 안함\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/Users/gwiyeom/Documents/etc/gwiyeomgo.github.io/content/posts/client/javascript/2022-04-19-javascript-numberValidator.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","ol","li","pre","code","p","a","h3","h2","ul","_provideComponents","components","React","className","href","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}