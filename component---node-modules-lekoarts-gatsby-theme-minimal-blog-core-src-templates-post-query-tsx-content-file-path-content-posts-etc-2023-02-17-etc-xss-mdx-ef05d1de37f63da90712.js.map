{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-etc-2023-02-17-etc-xss-mdx-ef05d1de37f63da90712.js","mappings":"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","sources":["webpack://gwiyeom-blog/./content/posts/etc/2023-02-17-etc-xss.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    hr: \"hr\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    img: \"img\",\n    ul: \"ul\",\n    li: \"li\",\n    ol: \"ol\",\n    h3: \"h3\",\n    blockquote: \"blockquote\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"오픈소르를 참여하는데 처음에 할당받은 이슈는 XSS 공격 을 막는 이슈였다.\\r\\n처음에 착각해서 ㅎㅎ CORS 를 준비했고\\r\\n내가잘못 준비했다는 사실을 공유하고 XSS 공격에 대해 설명받고\\r\\n테스트 하는 방법을 알게되었다.\\r\\n그래서 XSS 공격에 대해 이해하고 막는 방법,테스트 하는 방법을 정리하려고 한다\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.p, null, \"1.\", React.createElement(_components.a, {\n    href: \"https://owasp.org/www-community/attacks/xss/\"\n  }, \"XSS\"), \" 공격이 무엇이고 예시를 알아보자\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"Cross-Site Scripting (XSS) attacks are a type of injection,`\\r\\nin which malicious(악의 있는) scripts are injected into otherwise benign and trusted websites. `\\r\\nXSS 공격은 악의 있는 스크립트를 그렇지않은 온화하고 믿을 수 있는 웹사이트들에 주입하는 유형이다\\r\\n\\r\\nmalicious script can access any cookies, session tokens,\\r\\nor other sensitive information retained by the browser and used with that site\\r\\n스크립트가 신뢰할 수 있는 소스에서 온 것으로 생각하기 때문에 악성 스크립트는 쿠키, 세션 토큰 또는\\r\\n브라우저에 보관되어 해당 사이트에서 사용되는 기타 중요한 정보에 액세스할 수 있습니다.\\n\")), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.p, null, \"2.XSS 의 다양한 유형이 존재한다.\"), \"\\n\", React.createElement(_components.img, {\n    src: \"https://owasp.org/www-community/assets/images/Server-XSS_vs_Client-XSS_Chart.png\",\n    alt: \"xss type\"\n  }), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Reflected(반사형) XSS 공격 :\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"사용자 입력이 즉시 반환되어 응답이 실행될 때 스크립트를 페이지에 삽입하여 실행\"), \"\\n\", React.createElement(_components.li, null, \"URL 주소에 함께 작성된 악성 스크립트가 일단 서버에 전달\\r\\nex) 특정 스크립트를 input 에 입력시 쿠키값 반환\\r\\nex) 리다이렉트 시키는 스크립트를 입력해 공격자의 호스트로 접속하게 만든다\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"Stored(저장형) XSS 공격:\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"악성 스크립트가 서버측에 저장되어 요청할 때마다 저장된 스크립트가 실행\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"DOM Based (돔 베이스) XSS 공격:\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"JavaScript 코드로 DOM 객체를 제어시켜 실행\\r\\nex) 주소 입력창에서 URL 에 해시에 심은 악성 스크립트가 실행 ( 네트워크에서 서버에게 별도 요청은 없음)\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.ol, {\n    start: \"3\"\n  }, \"\\n\", React.createElement(_components.li, null, \"서버에서는 XSS 공격을 어떻게 막지?\\r\\n서버에서는 반사형 XSS 공격과, 저장형 XSS 공격 에 취약합니다.\\r\\n모든 변수가 유효성 검사를 거친 다음 이스케이프되거나 새니타이징되도록 하는 것\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://github.com/microcosm-cc/bluemonday\"\n  }, \"bluemonday\"), \" is a HTML sanitizer(살균제?) implemented in Go.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://github.com/dvwright/xss-mw\"\n  }, \"Xss Middleware\")), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"그럼 서버에서 내가 작업해야 할 부분은 뭐지?\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"완료목표 : Xss Middleware 처럼 bluemonday 를 사용해서 미들웨어를 만들고 테스트케이스를 통과시킨다\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.p, null, \"4.react 에서 XSS 공격은 어떻게 막지?\\r\\n\", React.createElement(_components.a, {\n    href: \"https://stackoverflow.com/questions/33644499/what-does-it-mean-when-they-say-react-is-xss-protected\"\n  }, \"https://stackoverflow.com/questions/33644499/what-does-it-mean-when-they-say-react-is-xss-protected\")), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h1, null, \"참고\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://junhyunny.github.io/information/security/spring-mvc/reflected-cross-site-scripting/\"\n  }, \"https://junhyunny.github.io/information/security/spring-mvc/reflected-cross-site-scripting/\"), \"\\r\\n\", React.createElement(_components.a, {\n    href: \"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\"\n  }, \"OWASP Cheat Sheet Series Cross Site Scripting Prevention\")), \"\\n\", React.createElement(_components.p, null, \"실습\\r\\n\", React.createElement(_components.a, {\n    href: \"https://facelight.tistory.com/110\"\n  }, \"https://facelight.tistory.com/110\"), \"\\r\\n\", React.createElement(_components.a, {\n    href: \"https://g-idler.tistory.com/2\"\n  }, \"https://g-idler.tistory.com/2\"), \"\\r\\n\", React.createElement(_components.a, {\n    href: \"https://mystria.github.io/archivers/xss-filter-on-spring-boot\"\n  }, \"https://mystria.github.io/archivers/xss-filter-on-spring-boot\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"http://coashanee5.blogspot.com/2018/07/kali-linux-dvwa-with-xampp.html\"\n  }, \"http://coashanee5.blogspot.com/2018/07/kali-linux-dvwa-with-xampp.html\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/Users/gwiyeom/Documents/react/gwiyeomgo.github.io/content/posts/etc/2023-02-17-etc-xss.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","hr","a","pre","code","img","ul","li","ol","h3","blockquote","_provideComponents","components","React","href","src","alt","start","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}