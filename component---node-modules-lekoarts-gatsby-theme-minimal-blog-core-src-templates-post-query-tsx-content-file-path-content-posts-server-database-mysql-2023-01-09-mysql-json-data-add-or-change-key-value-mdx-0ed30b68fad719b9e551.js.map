{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-database-mysql-2023-01-09-mysql-json-data-add-or-change-key-value-mdx-0ed30b68fad719b9e551.js","mappings":"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","sources":["webpack://gwiyeom-blog/./content/posts/server/database/mysql/2023-01-09-mysql-jsonData-add-or-change-key-value.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h3: \"h3\",\n    p: \"p\",\n    blockquote: \"blockquote\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    code: \"code\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    h1: \"h1\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h3, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"어드민 회원을 관리하는 서비스와 매장을 관리하는 서비스를 분리해서 사용하고 있다.\\n어드민 회원 관리 서비스에서 매장의 정보를 code 로 연결해서 사용하고 있다.\\n어드민 회원의 역할/조직 매칭 기능이 이후 개발되면서\\n연결 정보에 type 도 추가해 기존 데이터를 바꿔야 하는 문제가 있었다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"(매장을 관리하는 서비스의 sites talbe)\"), \"\\n\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"id\"), React.createElement(_components.th, null, \"code\"), React.createElement(_components.th, null, \"name\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, \"1\"), React.createElement(_components.td, null, \"200122\"), React.createElement(_components.td, null, \"강동\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"2\"), React.createElement(_components.td, null, \"100121\"), React.createElement(_components.td, null, \"부산\")))), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"(기존 조직 table 코드)\"), \"\\n\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"id\"), React.createElement(_components.th, null, \"name\"), React.createElement(_components.th, null, \"connect\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, \"1\"), React.createElement(_components.td, null, \"강동\"), React.createElement(_components.td, null, React.createElement(_components.code, null, \"{\\\"code\\\":\\\"200122\\\"}\"), \"'`\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"2\"), React.createElement(_components.td, null, \"부산\"), React.createElement(_components.td, null, React.createElement(_components.code, null, \"{\\\"code\\\":\\\"100121\\\"}\"), \"'`\")))), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"(변경 조직 table 코드)\"), \"\\n\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"id\"), React.createElement(_components.th, null, \"name\"), React.createElement(_components.th, null, \"connect\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, \"1\"), React.createElement(_components.td, null, \"강동\"), React.createElement(_components.td, null, React.createElement(_components.code, null, \"{\\\"code\\\":\\\"200122\\\",\\\"type\\\":\\\"store\\\"}\"))), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"2\"), React.createElement(_components.td, null, \"부산\"), React.createElement(_components.td, null, React.createElement(_components.code, null, \"{\\\"code\\\":\\\"100121\\\",\\\"type\\\":\\\"center\\\"}\"))))), \"\\n\", React.createElement(_components.h3, null, \"어떻게 json 값에 새로운 key 를 추가할 수 있을까?\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://database.guide/json_set-vs-json_insert-vs-json_replace-in-mysql-whats-the-difference/\"\n  }, \"JSON_SET() vs JSON_INSERT() vs JSON_REPLACE() in MySQL: What’s the Difference?\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"JSON_SET() replaces existing values and adds nonexisting values.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"JSON_INSERT() inserts values without replacing existing values.\"), \"\\n\", React.createElement(_components.li, null, \"JSON_REPLACE() replaces only existing values.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"JSON_SET 는 데이터가 존재하지 않는 컬럼에도 값을 추가한다\"), \"\\n\", React.createElement(_components.h3, null, \"단건으로 생각해보기\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"json data 에 key 와 value 추가 해서 조회하기 (데이터는 바뀌지 않음)\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"select id, name, JSON_INSERT(connect, '$.type', \\\"store\\\") from employees where id = 1;\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"변경하려면 update 를 사용한다\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"UPDATE sites\\nset `connect` =\\nJSON_INSERT(connect, '$.type', 'store')\\nwhere id = 1;\\n\")), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"id\"), React.createElement(_components.th, null, \"name\"), React.createElement(_components.th, null, \"connect\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, \"1\"), React.createElement(_components.td, null, \"강동\"), React.createElement(_components.td, null, React.createElement(_components.code, null, \"{\\\"code\\\":\\\"200122\\\",\\\"type\\\":\\\"store\\\"}\"))))), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"그렇다면 기존의 json 내부의 특정 key 의 value 를 바꾸려면?\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"select id, name, json_replace(connect, '$.code', \\\"300123\\\") from employees where id = 1;\\n\")), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"id\"), React.createElement(_components.th, null, \"name\"), React.createElement(_components.th, null, \"connect\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, \"1\"), React.createElement(_components.td, null, \"강동\"), React.createElement(_components.td, null, React.createElement(_components.code, null, \"{\\\"code\\\":\\\"300123\\\",\\\"type\\\":\\\"store\\\"}\"))))), \"\\n\", React.createElement(_components.h3, null, \"실전\"), \"\\n\", React.createElement(_components.p, null, \"code 가 1로 시작하면 type \\\"center\\\" 로 update\\ncode 가 2로 시작하면 type \\\"store\\\" 로 update\"), \"\\n\", React.createElement(_components.p, null, \"이렇게 Where 절에서 JSON_EXTRACT 에 \", React.createElement(_components.code, null, \">=\"), \" 와 \", React.createElement(_components.code, null, \"<\"), \" 로 100000 이상 200000 미만인 경우 CENTER 로 type 을 추가\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"UPDATE test\\n set `connect` = JSON_replace(connect, '$.type', 'center')\\nWHERE JSON_EXTRACT(connect, '$.code') >= '100000' AND  JSON_EXTRACT(connect, '$.code') <'200000';\\n\")), \"\\n\", React.createElement(_components.p, null, \"이렇게  경우에 따라 update 를 추가하면 귀찮으니 한번에 업데이트 하려면?\\n\", React.createElement(_components.code, null, \"case when \"), \"을 사용해 보자\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"UPDATE test\\n SET `connect` =\\n CASE\\n WHEN JSON_EXTRACT(connect, '$.code') <'200000'\\n\\tTHEN  JSON_insert(connect, '$.type', 'center')\\n WHEN JSON_EXTRACT(connect, '$.code') >= '200000'\\n\\tTHEN  JSON_insert(connect, '$.type', 'store')\\nEND;\\n\")), \"\\n\", React.createElement(_components.p, null, \"이렇게 하면 조건에 따라 update 된다.\"), \"\\n\", React.createElement(_components.h1, null, \"실전2\"), \"\\n\", React.createElement(_components.p, null, \"처음에 code 의 20000 이라는 매장,이후는 center 로 썼었는데 나중에 등록된 매장이 추가되면서 규칙이 깨졌다는 사실을 알게 되었다....\\n그래서 sites 의 code 와 일치하는 데이터를 찾아서 type 을 변경하도록 쿼리를 수정했다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"start transaction;\\n\\nSELECT * FROM A.organizations as o\\n        inner join B.sites as s\\n            on replace(connect -> '$.code','\\\"','') =   s.code; -- (1) (2)\\n\\n\\n\\nUPDATE A.organizations as o\\n        inner join  B.sites as s\\n            on replace(connect -> '$.siteCode','\\\"','') =   s.code\\nset o.connect = (\\n    CASE\\n    WHEN  s.type = 'center'\\n    THEN  JSON_insert(connect, '$.type', 'center')\\n    WHEN  s.type = 'store'\\n    THEN  JSON_insert(connect, '$.type', 'store')\\n    WHEN  s.type = 'team'\\n    THEN  JSON_insert(connect, '$.type', 'team')\\nEND);\\n-- commit;\\n-- rollback;\\n\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"(1) replace('문자열','기존문자열','변경문자열')\"), \"\\n\", React.createElement(_components.li, null, \"(2) connect -> '$.code' 는 json 안에 code 를 가리킨다\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"20230112\"), \"\\n\", React.createElement(_components.p, null, \"실제로 해당 쿼리를 운영 db 에 실행하니 어떤 row 에 지정하는 명확하지 않아서 추가되지 않았다\\n마지막 ) 뒤에 \", React.createElement(_components.code, null, \"where o.id  > 0\"), \" 로 전체 row 를 지정하셨다고 한다\"), \"\\n\", React.createElement(_components.h3, null, \"참고\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://stackoverflow.com/questions/36264369/mysql-5-7-appending-key-value-to-nested-json-object\"\n  }, \"https://stackoverflow.com/questions/36264369/mysql-5-7-appending-key-value-to-nested-json-object\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/gwiyeomgo.github.io/gwiyeomgo.github.io/content/posts/server/database/mysql/2023-01-09-mysql-jsonData-add-or-change-key-value.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h3","p","blockquote","table","thead","tr","th","tbody","td","code","a","ul","li","pre","h1","_provideComponents","components","React","href","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}