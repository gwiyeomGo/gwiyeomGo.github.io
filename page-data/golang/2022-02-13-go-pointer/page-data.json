{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/golang/2022-02-13-go-pointer","result":{"data":{"post":{"slug":"/golang/2022-02-13-go-pointer","title":"Golang(Go) pointer","date":"13.02.2022","tags":[{"name":"GOLANG","slug":"golang"}],"description":null,"canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Golang(Go) pointer\",\n  \"date\": \"2022-02-13T00:00:00.000Z\",\n  \"slug\": \"/golang/2022-02-13-go-pointer\",\n  \"tags\": [\"GOLANG\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"value \\uB97C \\uBCF5\\uC0AC\\uD558\\uB294\\uAC8C \\uC544\\uB2C8\\uB77C \\uBCC0\\uC218\\uC758 memory address \\uB97C \\uC800\\uC7A5\\uD558\\uACE0 \\uC2F6\\uC740\\uAC70\\uB77C\\uBA74\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&\"), \" \\uBD99\\uC5EC\\uC900\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"import (\\n\\\"fmt\\\"\\n)\\n\\nfunc main() {\\na:=2\\nb:=&a\\na=10\\nfmt.Println(*b)\\n\\n}\\n\")), mdx(\"p\", null, \"a \\uC758 type \\uC740 int\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"b\\uC758 type \\uC740 int \\uC5D0 pointer \\uB2E4\\n(var b *int) = b\\uAC00 int \\uB97C \\uAC00\\uC9C0\\uACE0 \\uC788\\uB294 memory address\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"*\"), \"\\uB97C \\uBD99\\uC774\\uBA74 memory address \\uD1B5\\uD574 \\uADF8 \\uC548\\uC5D0 \\uC788\\uB294 value \\uB97C \\uBCFC \\uC218 \\uC788\\uB530\"), mdx(\"h3\", null, \"\\uBCF5\\uC0AC\\uBCF8\\uC774 \\uC544\\uB2C8\\uB77C \\uC6D0\\uBCF8\\uC774 \\uD544\\uC694\\uD55C \\uC0C1\\uD669?\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"value 를 복사하는게 아니라 변수의 memory address 를 저장하고 싶은거라면 \n &  붙여준다. a 의 type 은 int b의 type 은 int 에 pointer 다\n(var b *int) = b가 int 를 가지고 있는 memory…","timeToRead":1,"banner":null}},"pageContext":{"slug":"/golang/2022-02-13-go-pointer","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["2744905544","3090400250","318001574"]}