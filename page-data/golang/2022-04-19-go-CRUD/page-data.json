{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/golang/2022-04-19-go-CRUD","result":{"data":{"post":{"slug":"/golang/2022-04-19-go-CRUD","title":"Golang(Go) golang 으로 orm 별 CRUD 만들기","date":"18.04.2022","tags":[{"name":"GOLANG","slug":"golang"},{"name":"ORM","slug":"orm"}],"description":null,"canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Golang(Go) golang 으로 orm 별 CRUD 만들기\",\n  \"date\": \"2022-04-18T00:00:00.000Z\",\n  \"slug\": \"/golang/2022-04-19-go-CRUD\",\n  \"tags\": [\"GOLANG\", \"ORM\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"CRUD\"), mdx(\"h3\", null, \"1. xorm \\uC5D0\\uC11C CRUD \\uD558\\uAE30\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"type User struct {\\n    Id int64 `xorm:\\\"id pk autoincr\\\" ` //pk\\n    Name string\\n        Age int64\\n    Created time.Time `xorm:\\\"created\\\"` //Created tag will automatically inserted current time when you insert one record\\n    Updated time.Time `xorm:\\\"updated\\\"`\\n        DeletedAt time.Time `xorm:\\\"deleted\\\"` //Deleted will not really remove one record from table but only tag as deleted via current time.\\n}\\n\\ntype Detail struct {\\n    Id int64\\n    UserId int64 `xorm:\\\"index\\\"` // index\\uB294 column name\\n}\\n\\ntype UserDetail struct {\\n    User   `xorm:\\\"extends\\\"`\\n    Detail `xorm:\\\"extends\\\"` //Detail struct\\n}\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \" Create\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"var user User \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"engine.Insert(&user)// INSERT user (created...) VALUES (?...)\"))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \" Find ,Get\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \" Update\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"affected, err := engine.ID(1).Update(&user)// UPDATE user SET ... Where id = ?\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"AllCols , Cols\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"1. Saved \\uC0C1\\uD0DC,Registed \\uC0C1\\uD0DC\\uAC00 \\uC874\\uC7AC\\n2. Saved \\uC0C1\\uD0DC\\uC758 \\uC218\\uC815 \\uD504\\uB85C\\uC138\\uC2A4\\n    1. \\uC218\\uC815\\uD560 \\uAC12\\uB9CC body\\uB85C \\uC694\\uCCAD\\n    2. \\uAC12 bind \\uD6C4 \\uC720\\uD6A8\\uC131 \\uAC80\\uC0AC => require \\uAC12\\uC744 \\uD53C\\uD558\\uAE30\\uC704\\uD574 \\uC0C1\\uD0DC\\uAC00 Saved \\uC77C\\uACBD\\uC6B0 Validate \\uC548\\uD558\\uB3C4\\uB85D \\uC870\\uAC74 \\uCD94\\uAC00\\n    2. \\uC2E0\\uCCAD id \\uB85C \\uB0B4\\uC6A9\\uC744 \\uC870\\uD68C  => db\\uC5D0 \\uAE30\\uB85D\\uB41C \\uC2E0\\uCCAD \\uC0C1\\uD0DC\\uAC00 Registered\\uBA74 \\uC5D0\\uB7EC\\uAC00 \\uB098\\uB3C4\\uB85D \\uBCC0\\uACBD\\n    3. Saved \\uBA74 update \\uD558\\uB3C4\\uB85D \\uC500\\n    => xorm update\\n```\\nif cols == \\\"*\\\" {\\n    builder = builder.AllCols()\\n} else if len(cols) > 0 {\\n    builder = builder.Cols(cols)\\n}\\n\\n```\\n\")), mdx(\"blockquote\", {\n    parentName: \"li\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Delete\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"engine.ID(1).Delete(&user)// UPDATE user SET ..., deleted_at = ? WHERE id = ?\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"engine.ID(1).Unscoped().Delete(&user)// Then this record will be really deleted\")))), mdx(\"h3\", null, \"2. gorm \\uC5D0\\uC11C CRUD \\uD558\\uAE30\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"type User struct {\\n  ID   int64  `gorm:\\\"primary_key\\\"` //pk\\n    Name  string `gorm:\\\"not null\\\"`\\n  Age  int64  `gorm:\\\"default:18\\\"` //default tag\\uB85C \\uAE30\\uBCF8\\uAC12 \\uC9C0\\uC815\\n    Active bool\\n    DeletedAt soft_delete.DeletedAt //delete flag\\uB85C \\uCD08\\uAE4C\\uC9C0 ,gorm.DeletedAt \\uBD84\\uAE4C\\uC9C0\\n}\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \" Create\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"user := User{Name: \\\"test\\\", Age: 18, }\\nresult := db.Create(&user)\\ndb.Select(\\\"Name\\\", \\\"Age\\\", \\\"CreatedAt\\\").Create(&user)\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db.Select(\\\"Name\\\", \\\"Age\\\", \\\"CreatedAt\\\").Create(&user)// INSERT INTO \"), \"users\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \" (\"), \"name\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \",\"), \"age\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \",\"), \"created_at\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \") VALUES (\\\"jinzhu\\\", 18, \\\"2020-07-04 11:05:21.775\\\")\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \" UPDATE\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"user.Age = 100\\ndb.Save(&user)// UPDATE users SET name='test', age=100,  updated_at = '2013-11-17 21:34:10' WHERE id=111\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"user.Id =1\"), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db.Model(&user).Where(\\\"active = ?\\\", true).Update(\\\"name\\\", \\\"hello\\\")// UPDATE users SET name='hello', updated_at='2013-11-17 21:34:10' WHERE id=1 AND active=true\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \" Delete\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db.Delete(&User{}, 1)// DELETE FROM users WHERE id = 1;//Delete with primary key GORM allows to delete objects using primary key\"))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \" Delete Flag\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UPDATE users SET deleted_at = /* current unix second */ WHERE ID = 1;\"))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \" soft_delete\\uB294 \\uBB50\\uC9C0?\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://gorm.io/ko_KR/docs/many_to_many.html\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Many To Many\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"//Member has and belong to many roles, `member_roles`\\uB294 join table \\uC774\\uB2E4\\ntype MemberEntity struct {\\n    ...\\n    Roles          []rbac.RoleEntity `gorm:\\\"many2many:member_roles;\\\"` //\\uB450 \\uBAA8\\uB378 \\uC0AC\\uC774\\uC5D0 \\uC870\\uC778 \\uD14C\\uC774\\uBE14\\uC744 \\uCD94\\uAC00\\n}\\n\")), mdx(\"h3\", null, \"\\uCD9C\\uCC98\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://gobook.io/read/gitea.com/xorm/manual-en-US/chapter-07/1.deleted.html\"\n  }, \"delete \\uC124\\uBA85\"), mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://gobook.io/read/gitea.com/xorm/manual-en-US/chapter-02/4.columns.html\"\n  }, \"field tag\"), \"\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.popit.kr/golang-xorm-%ED%8E%B8%EB%A6%AC%ED%95%9C-%EA%B8%B0%EB%8A%A5-%EC%86%8C%EA%B0%9C/\"\n  }, \"Golang xORM \\uD3B8\\uB9AC\\uD55C \\uAE30\\uB2A5 \\uC18C\\uAC1C | Popit\"), \"\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://gorm.io/docs/update.html\"\n  }, \"gorm\\uC608\\uC2DC\"), \"\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://gorm.io/docs/delete.html#Delete-Flag\"\n  }, \"delete\\uC608\\uC2DC\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"CRUD 1. xorm 에서 CRUD 하기  Create var user User  engine.Insert(&user)// INSERT user (created...) VALUES (?...)  Find ,Get  Update affected…","timeToRead":1,"banner":null}},"pageContext":{"slug":"/golang/2022-04-19-go-CRUD","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["2744905544","3090400250","318001574"]}