{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-golang-2021-08-22-go-function-call-mdx","path":"/golang/2021-08-22-go-functionCall","result":{"data":{"post":{"slug":"/golang/2021-08-22-go-functionCall","title":"Golang(Go) 함수 호출 방식(Call by value,Call by pointer,Call by reference)","date":"22.08.2021","tags":[{"name":"GOLANG","slug":"golang"}],"description":null,"canonicalUrl":null,"excerpt":"Call by value 값 복사되어 값 보존된다 복사가 되기 때문에 메모리량이 늘어난다\n\nCall by reference\n\n복사하지 않고 직접 참조 직접 참조를 해서 원래 값이 영향을 받음 No newline at end of file\n\n메모리 주소를…","timeToRead":2,"banner":null}},"pageContext":{"slug":"/golang/2021-08-22-go-functionCall","formatString":"DD.MM.YYYY","frontmatter":{"title":"Golang(Go) 함수 호출 방식(Call by value,Call by pointer,Call by reference)","date":"2021-08-22T00:00:00.000Z","slug":"/golang/2021-08-22-go-functionCall","tags":["GOLANG"]}}},"staticQueryHashes":["2421966660","2744905544","3090400250"],"slicesMap":{}}