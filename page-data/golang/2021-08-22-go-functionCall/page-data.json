{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/golang/2021-08-22-go-functionCall","result":{"data":{"post":{"slug":"/golang/2021-08-22-go-functionCall","title":"Golang(Go) 함수 호출 방식(Call by value,Call by pointer,Call by reference)","date":"22.08.2021","tags":[{"name":"GOLANG","slug":"golang"}],"description":null,"canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Golang(Go) 함수 호출 방식(Call by value,Call by pointer,Call by reference)\",\n  \"date\": \"2021-08-22T00:00:00.000Z\",\n  \"slug\": \"/golang/2021-08-22-go-functionCall\",\n  \"tags\": [\"GOLANG\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Call by value\"), mdx(\"p\", null, \"\\uAC12 \\uBCF5\\uC0AC\\uB418\\uC5B4 \\uAC12 \\uBCF4\\uC874\\uB41C\\uB2E4\\n\\uBCF5\\uC0AC\\uAC00 \\uB418\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uBA54\\uBAA8\\uB9AC\\uB7C9\\uC774 \\uB298\\uC5B4\\uB09C\\uB2E4\"), mdx(\"h3\", null, \"Call by reference\"), mdx(\"p\", null, \"\\uBCF5\\uC0AC\\uD558\\uC9C0 \\uC54A\\uACE0 \\uC9C1\\uC811 \\uCC38\\uC870\\n\\uC9C1\\uC811 \\uCC38\\uC870\\uB97C \\uD574\\uC11C \\uC6D0\\uB798 \\uAC12\\uC774 \\uC601\\uD5A5\\uC744 \\uBC1B\\uC74C\\nNo newline at end of file\"), mdx(\"p\", null, \"\\uBA54\\uBAA8\\uB9AC \\uC8FC\\uC18C\\uB97C \\uD45C\\uD604\\uD558\\uB294 \\uD3EC\\uC778\\uD130\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&\"), \" goes in front of a variable when you want to get that variable's memory address.\"), mdx(\"h3\", null, \"call by value \\uAC12\\uC5D0 \\uC758\\uD55C \\uD638\\uCD9C\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"package main\\n \\nimport \\\"fmt\\\"\\n \\nfunc inc(i int) {\\n    i = i + 1\\n}\\n \\nfunc main() {\\n    i := 10\\n    inc(i)\\n    fmt.Println(i)\\n}\\n\\n\")), mdx(\"p\", null, \"\\uC2E4\\uD589\\uD558\\uBA74 10\"), mdx(\"h3\", null, \"call by reference\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"package main\\n \\nimport \\\"fmt\\\"\\n \\nfunc inc(i *int) {\\n    *i = *i + 1\\n}\\n \\nfunc main() {\\n    i := 10\\n    inc(&i)\\n    fmt.Println(i)\\n}\\n\\n\")), mdx(\"p\", null, \"\\uC2E4\\uD589\\uD558\\uBA74 11\"), mdx(\"h3\", null, \"\\uD3EC\\uC778\\uD130 \\uB9AC\\uC2DC\\uBC84\"), mdx(\"p\", null, \"func (w *Wallet) DepositWithValueReceiver(amount int) {\\nw.balance += amount\\n}\"), mdx(\"p\", null, \"// Production add: 0xc000016378, value: 0\\n// Test add: 0xc000016378, value: 10\\nstruct \\uD0C0\\uC785\\uB9CC! \\uD3EC\\uC778\\uD130 \\uB9AC\\uC2DC\\uBC84\\uAC00 \\uC790\\uB3D9 \\uC5ED\\uCC38\\uC870\\uD574\\uC900\\uB2E4.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://thebook.io/006806/ch02/04/02/\"\n  }, \"https://thebook.io/006806/ch02/04/02/\"), \"\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://programmers.co.kr/learn/courses/13\"\n  }, \"https://programmers.co.kr/learn/courses/13\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://ponyozzang.tistory.com/162\"\n  }, \"https://ponyozzang.tistory.com/162\"), \"\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/react-router-ga\"\n  }, \"https://www.npmjs.com/package/react-router-ga\")), mdx(\"p\", null, \"\\uC608\\uC2DC\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"package example\\n\\ntype Person struct {\\n    Age  uint\\n    Name string\\n    BirthDay string\\n}\\n\\nfunc (p *Person) ChangeAge (newAge uint) {\\n    p.Age = newAge\\n    /*if p.Age != nil {\\n    }*/\\n}\\n\\nfunc (p *Person) SetBirthDay(birthday *BirthDay) {\\n    p.BirthDay = birthday.Day\\n    birthday.Year = \\\"2002\\\"\\n}\\n\\ntype BirthDay struct {\\n    Year string\\n    Month string\\n    Day string\\n}\\n\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"package example\\n\\nimport (\\n    \\\"github.com/stretchr/testify/assert\\\"\\n    \\\"testing\\\"\\n)\\n\\nfunc TestPerson_ChangeAge(t *testing.T) {\\n    //given\\n    person := Person{\\n        Age:  29,\\n        Name: \\\"\\uCCA0\\uC218\\\",\\n    }\\n\\n    //when\\n    person.ChangeAge(2)\\n\\n    //then\\n    actual := person.Age\\n    expected := uint(2)\\n\\n    assert.Equal(t, expected, actual)\\n}\\n\\nfunc TestPerson_SetBirthDay(t *testing.T) {\\n    //given\\n    person := Person{\\n        Age:  29,\\n        Name: \\\"\\uCCA0\\uC218\\\",\\n    }\\n    /*\\n    person := Person{\\n        Age:  29,\\n        Name: \\\"\\uBC14\\uBCF4\\\",\\n    }*/\\n    //2\\uAC1C\\uC758  \\uC778\\uC2A4\\uD134\\uC2A4 \\uC0DD\\uC131=> \\uBA54\\uBAA8\\uB9AC2\\uAC1C\\n    //when\\n    birthDay := BirthDay{\\n        Year:  \\\"1998\\\",\\n        Month: \\\"06\\\",\\n        Day:   \\\"04\\\",\\n    }\\n\\n    person.SetBirthDay(&birthDay)\\n\\n    //then\\n    actual := person.BirthDay\\n    expected := \\\"04\\\"\\n\\n    assert.Equal(t, expected, actual)\\n    assert.Equal(t, birthDay.Year, \\\"2002\\\")\\n}\\n\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Call by value 값 복사되어 값 보존된다\n복사가 되기 때문에 메모리량이 늘어난다 Call by reference 복사하지 않고 직접 참조\n직접 참조를 해서 원래 값이 영향을 받음\n No newline at end of file…","timeToRead":1,"banner":null}},"pageContext":{"slug":"/golang/2021-08-22-go-functionCall","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["2744905544","3090400250","318001574"]}