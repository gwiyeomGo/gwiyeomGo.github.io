{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/golang/2022-03-09-go-map","result":{"data":{"post":{"slug":"/golang/2022-03-09-go-map","title":"golang map","date":"09.03.2022","tags":[{"name":"GOLANG","slug":"golang"}],"description":null,"canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"golang map\",\n  \"date\": \"2022-03-09T00:00:00.000Z\",\n  \"slug\": \"/golang/2022-03-09-go-map\",\n  \"tags\": [\"GOLANG\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"\\uBC30\\uACBD\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uC2E0\\uADDC \\uD504\\uB85C\\uC81D\\uD2B8\\uB97C \\uC2DC\\uC791\\uD558\\uBA74\\uC11C join\\uC744 \\uC0AC\\uC6A9\\uD558\\uC9C0 \\uC54A\\uACE0 \\uCF54\\uB4DC\\uC5D0\\uC11C join\\uC744 \\uD558\\uAE30\\uB85C \\uACB0\\uC815\\uD588\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"A table \\uC5D0\\uC11C \\uC815\\uBCF4\\uB97C \\uC870\\uD68C\\uD558\\uACE0\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"B table \\uC5D0\\uC11C \\uC815\\uBCF4\\uB97C \\uC870\\uD68C\\uD588\\uC744\\uB54C\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uAC01\\uAC01\\uC758 \\uAC12\\uC744 service\\uC5D0\\uC11C \\uD569\\uCCD0\\uC11C \\uBC18\\uD658\\uD55C\\uB2E4.\")), mdx(\"p\", null, \"\\uC774\\uB54C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"map[string]interface{}\"), \" ,\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[]interface{}\"), \" \\uB4F1 \\uC0AC\\uC6A9\\uD574\\uC11C\\n\\uBC18\\uD658\\uAC12\\uC758 \\uD0C0\\uC785\\uC744 \\uC9C0\\uC815\\uD55C\\uB2E4.\"), mdx(\"h1\", null, \"\\uD544\\uC694\\uD55C \\uCF54\\uB4DC\\uB294?\"), mdx(\"p\", null, \"\\uBC18\\uD658\\uAC12 (\\uD569\\uCE5C \\uD615\\uD0DC\\uAC00)\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[{name:\\\"test\\\"},{name:\\\"test2\\\"}]\"), \" \\uD615\\uD0DC  \\uD544\\uC694\\uD560\\uB54C\"), mdx(\"h1\", null, \"\\uC0C1\\uD669 1\"), mdx(\"p\", null, \"[]\\uBC30\\uC5F4\\uD615\\uD0DC\\uB97C \\uC5B4\\uB5BB\\uAC8C \\uD45C\\uD604\\uD558\\uC9C0?\"), mdx(\"h3\", null, \"append\\uB85C \\uBC30\\uC5F4\\uC5D0 \\uAC1D\\uCCB4{}\\uB97C \\uCD94\\uAC00\"), mdx(\"p\", null, \"\\uAD6C\\uAE00\\uC5D0\\uC11C \\uAC80\\uC0C9 \\uD574\\uC11C \\uC544\\uB798\\uBC29\\uBC95\\uC744 \\uCC3E\\uC558\\uB2E4\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://stackoverflow.com/questions/34293572/golang-prepend-a-string-to-a-slice-interface\"\n  }, \"\\uCC38\\uACE0\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"append() can only append values of the type matching the element type of the slice:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"s := \\\"first\\\"\\nrest := []interface{}{\\\"second\\\", 3}\\nall := append([]interface{}{s}, rest)\\nfmt.Println(all)\\n//Output (try it on the Go Playground):\\n\")), mdx(\"h1\", null, \"\\uC0C1\\uD669 2\"), mdx(\"p\", null, \"\\uADF8\\uB807\\uB2E4\\uBA74 []\\uC548\\uC5D0 \\uAC1D\\uCCB4\\uB294 \\uC5B4\\uB5BB\\uAC8C \\uB123\\uC9C0?\"), mdx(\"h3\", null, \"key value \\uD615\\uD0DC \\uAC1D\\uCCB4\\uB9CC\\uB4DC\\uB294 \\uBC29\\uBC95\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"type MyStruct struct {\\n    Name string\\n    Age  int64\\n}\\nfunc main() {\\n    myData := make(map[string]interface{})\\n    myData[\\\"Name\\\"] = \\\"Tony\\\"\\n    myData[\\\"Age\\\"] = int64(23)\\n\\n    result := &MyStruct{}\\n}\\n\")), mdx(\"h2\", null, \"\\uC2E4\\uD589 \\uCF54\\uB4DC\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A B \\uBAA8\\uB450 \\uC544\\uB798 \\uBA54\\uC18C\\uB4DC \\uCC98\\uB7FC \\uAC12\\uC744 \\uC870\\uD68C\\uD568\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"(1) A \\uC758 GetList \\uB294 *[]A\\uB97C \\uBC18\\uD658\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"type A struct {\\n    Id   sring\\n}\\nfunc (A) GetList() *[]A {\\n    var results []A\\n    //builder.Find(&results) db\\uC5D0\\uC11C A\\uC870\\uD68C\\n    return &results\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"(2) B \\uC758 GetLst \\uB294 *[]map\", \"[string]\", \"string \\uBC18\\uD658\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"func (B) GetList() *[]map[string]string {\\n    var results []map[string]string\\n    //builder.Find(&results) db\\uC5D0\\uC11C A\\uC870\\uD68C\\n    return &results\\n}\\n\")), mdx(\"h2\", null, \"\\uCF54\\uB4DC\\uC5D0\\uC11C \\uC870\\uC778\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"func Sum() {\\n    a := A{}.GetList()\\n    b := B{}.GetLsit()\\n    var results []interface{} //\\uBC30\\uC5F4 []\\n    for _,aVal := range *a {\\n        result :=  map[string]interface{}{\\n            \\\"id\\\":aVal.Id,\\n        }\\n        //map[string]interface{}\\uC5D0 \\uAC12 \\uCD94\\uAC00\\uB428\\n        for _,bVal range b {\\n            if bVal[\\\"id\\\"] == aVal.Id {\\n                rsult[\\\"name\\\"] = bVal[\\\"name\\\"]\\n            }\\n        }\\n    }\\n    \\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"배경 신규 프로젝트를 시작하면서 join을 사용하지 않고 코드에서 join을 하기로 결정했다. A table 에서 정보를 조회하고 B table 에서 정보를 조회했을때 각각의 값을 service에서 합쳐서 반환한다. 이때  map[string…","timeToRead":1,"banner":null}},"pageContext":{"slug":"/golang/2022-03-09-go-map","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["2744905544","3090400250","318001574"]}