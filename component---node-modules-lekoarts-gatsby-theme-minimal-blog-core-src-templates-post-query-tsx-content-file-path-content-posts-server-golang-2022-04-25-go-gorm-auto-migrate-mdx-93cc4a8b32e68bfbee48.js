"use strict";(self.webpackChunkgwiyeom_blog=self.webpackChunkgwiyeom_blog||[]).push([[6943],{8999:function(e,t,n){n.r(t),n.d(t,{Head:function(){return c.F},default:function(){return m}});var r=n(7294),l=n(1151);function o(e){const t=Object.assign({h3:"h3",p:"p",a:"a",pre:"pre",code:"code",blockquote:"blockquote",ul:"ul",li:"li"},(0,l.ah)(),e.components);return r.createElement(r.Fragment,null,r.createElement(t.h3,null,"배경"),"\n",r.createElement(t.p,null,"어드민의 조직및 권한 관리 서비스 코드는 xorm 이 아닌 gorm 을 사용합니다.\r\nxorm 에는 이 기능이 있는지 모르겠지만.\r\ngorm 에는 entity 값으로 db 를 자동으로 테이블을 생성해주는 코드가 존재한다"),"\n",r.createElement(t.h3,null,r.createElement(t.a,{href:"https://gorm.io/docs/migration.html"},"Auto Migration")," 코드"),"\n",r.createElement(t.pre,null,r.createElement(t.code,null,"type User struct {\r\n  ID     uint\r\n  Name   string\r\n  Age    int\r\n  Gender string\r\n}\n")),"\n",r.createElement(t.pre,null,r.createElement(t.code,null,'db, err := gorm.Open(sqlite.Open("gorm.db"), &gorm.Config{\r\n\t\tLogger: logger.Default.LogMode(logger.Info),\r\n})\r\n  \r\ndb.AutoMigrate(&User{}, &Product{}, &Order{})\n')),"\n",r.createElement(t.h3,null,"AutoMigrate 은 table 에 컬럼도 자동으로 추가해 주는가?"),"\n",r.createElement(t.p,null,"현재 우리가 사용하는 권한 관리 서비스 코드에서는 ",r.createElement(t.code,null,"update_by,created_by")," 가 존재하지 않는다.\r\n삭제 이슈가 발생했고 (누군가 역할을 삭제했다)\r\n마녀사냥이 아닌! 시스템적으로 기록을 남기기 위해서 삭제한 사람및 수정한 사람의 Id 를 남기기록 했다.\r\n기존에는 없었기 때문에 처음에는 alter 문으로 추가해야하나 고민했다."),"\n",r.createElement(t.p,null,"그러다 코드에 새 필드를 추가하고 실행시키니 table 에 컬럼이 추가되었다."),"\n",r.createElement(t.pre,null,r.createElement(t.code,null,"AutoMigrate will create tables, missing foreign keys, constraints, columns and indexes. \r\nIt will change existing column’s type if its size, precision, nullable changed.\r\nIt WON’T delete unused columns to protect your data.\n")),"\n",r.createElement(t.p,null,"automigrate는 이후에 추가되는 컬럼도 추가해 준다고 한다."),"\n",r.createElement(t.h3,null,"struct 에 필드 type 이 uint 일때 왜? bitint 로 들어가지?"),"\n",r.createElement(t.blockquote,null,"\n",r.createElement(t.p,null,"uint ? int?\r\nint 값은 음~양 영역,uint 값은 unsinged integer 로 부호가 없다는 것(양수만)\r\n음의 수가 필요 없어서 uint 가 int 보다 많은 값을 표현할 수 있다"),"\n"),"\n",r.createElement(t.pre,null,r.createElement(t.code,null,"int\t–2,147,483,648 ~ 2,147,483,647\r\nuint\t0 ~ 4,294,967,295\n")),"\n",r.createElement(t.p,null,"uint 를 DB의 필드로 연결하면 int 보다 더 큰 값을 써야 하기 때문에 bigint 로 매핑하는 것으로 판단이 됩니다.\r\nmysql 에 unsinged 데이터 타입이 없는 지 찾아보니\r\n",r.createElement(t.code,null,"id INT(11) UNSIGNED")," 처럼  int 나 bigint 데이터 타입과 함께 UNSIGNED 써야하나보다...."),"\n",r.createElement(t.h3,null,r.createElement(t.a,{href:"https://gorm.io/docs/models.html#gorm-Model"},"gorm.Model")," 과 AutoMigrate 을 함께 쓴다면  ??"),"\n",r.createElement(t.p,null,r.createElement(t.code,null,"gorm.Model")," 은 ",r.createElement(t.code,null,"ID, CreatedAt, UpdatedAt, DeletedAt")," 을 모아 놓은 것으로"),"\n",r.createElement(t.pre,null,r.createElement(t.code,null,'type Model struct {\r\n    ID        uint `gorm:"primarykey"`\r\n    CreatedAt time.Time\r\n    UpdatedAt time.Time\r\n    DeletedAt DeletedAt `gorm:"index"`\r\n}\r\n\n')),"\n",r.createElement(t.p,null,"예를 들어 아래 ",r.createElement(t.code,null,"User")," struct 는  ",r.createElement(t.code,null,"ID, CreatedAt, UpdatedAt, DeletedAt,Name")," 필드를 포함하고 있다."),"\n",r.createElement(t.pre,null,r.createElement(t.code,null,"\r\ntype User struct {\r\n    gorm.Model //ID, CreatedAt, UpdatedAt, DeletedAt,Name\r\n    Name   string\r\n}\n")),"\n",r.createElement(t.p,null,"또한 gorm 의 경우 사용자가 지정해서 ",r.createElement(t.a,{href:"https://gorm.io/docs/models.html#embedded_struct"},"원하는 필드를 모아서 커스텀도 가능하다")),"\n",r.createElement(t.pre,null,r.createElement(t.code,null,'type Author struct {\r\n  Name  string\r\n  Email string\r\n}\r\n\r\ntype Blog struct {\r\n  ID      int\r\n  Author  Author `gorm:"embedded"`\r\n  Upvotes int32\r\n}\r\n// equals\r\ntype Blog struct {\r\n  ID    int64\r\n  Name  string\r\n  Email string\r\n  Upvotes  int32\r\n}\n')),"\n",r.createElement(t.h3,null,r.createElement(t.a,{href:"https://gorm.io/docs/delete.html#Soft-Delete"},"SoftDelete")," ? gorm.Model 에 DeletedAt 을 살펴보자!"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(t.code,null,"gorm.Model"),"의 경우 ",r.createElement(t.code,null,"gorm.DeletedAt")," 필드를 포함하고 있는데 해당 필드를 쓸 경우 데이터가 완전 삭제되는 것이 아닌 Soft Delete 방식인 ",r.createElement(t.code,null,"delete_at")," 컬럼에 삭제 시간이 입력된다."),"\n",r.createElement(t.li,null,r.createElement(t.code,null,"AutoMigrate")," 을 사용할 경우 ",r.createElement(t.code,null,"idx_users_deleted_at")," 인덱스가 자동 생성"),"\n",r.createElement(t.li,null,"gorm 에서 ",r.createElement(t.code,null,"Find")," 로 전체 기록을 조회할 때 deletedAt 에 표시된 데이터를 제외하고 조회한다 => 실행 쿼리에 ",r.createElement(t.code,null,"deleted_at Is Null")," 이 포함된다."),"\n"),"\n",r.createElement(t.h3,null,"그럼  반대로 지워진 필드는 어떻게 찾지 ?"),"\n",r.createElement(t.p,null,r.createElement(t.code,null,"Unscoped")," 를 추가하면  ",r.createElement(t.code,null,"deleted_at")," 이 존재한 데이터도 조회 가능하다"),"\n",r.createElement(t.pre,null,r.createElement(t.code,null,"users, err := db.WithContext(ctx).Unscoped().Where(u.Age.Eq(20)).Find()\r\n// SELECT * FROM users WHERE age = 20;\n")),"\n",r.createElement(t.h3,null,"how to set deleted_at field is nil"),"\n",r.createElement(t.pre,null,r.createElement(t.code,null,"type DeletedAt sql.NullTime\r\n\r\n// Scan implements the Scanner interface.\r\nfunc (n *DeletedAt) Scan(value interface{}) error {\r\n\treturn (*sql.NullTime)(n).Scan(value)\r\n}\r\n\r\n// Value implements the driver Valuer interface.\r\nfunc (n DeletedAt) Value() (driver.Value, error) {\r\n\tif !n.Valid {\r\n\t\treturn nil, nil\r\n\t}\r\n\treturn n.Time, nil\r\n}\n")),"\n",r.createElement(t.h3,null,"20230202 mysql 에 날짜 데이터가 utc 로 서울 시간이랑 다른 상황"),"\n",r.createElement(t.p,null,"account 써비스에 날짜가 현재 시간과 다르게 들어가고 있다는 사실을 알았다\r\n알아보니 utc 로 들어가고 있어서\r\ndns 에 서울을 명시해줘야 제대로된 시간이 mysql table 에 추가되었다\r\n처럼 ",r.createElement(t.code,null,"&loc=Asia%2FSeoul")," 를 추가해주면 해결된다."),"\n",r.createElement(t.pre,null,r.createElement(t.code,null,'    var dialector gorm.Dialector\r\n    dsn := fmt.Sprintf("%s:%s@tcp(%s)/%s?charset=utf8mb4&parseTime=True",\r\n        os.Getenv(EnvDbUser),\r\n        os.Getenv(EnvDbPassword),\r\n        os.Getenv(EnvDbHost),\r\n        os.Getenv(EnvDbName)) + "&loc=Asia%2FSeoul"\r\n    dialector = mysql.Open(dsn)\r\n\r\n    db, err := gorm.Open(dialector, &gorm.Config{\r\n        Logger: logger.Default.LogMode(logger.Info),\r\n    })\n')),"\n",r.createElement(t.h3,null,"참조"),"\n",r.createElement(t.p,null,r.createElement(t.a,{href:"https://ellieya.tistory.com/134"},"https://ellieya.tistory.com/134"),"\r\n",r.createElement(t.a,{href:"https://jsonobject.tistory.com/378"},"https://jsonobject.tistory.com/378"),"\r\n",r.createElement(t.a,{href:"https://github.com/go-gorm/gorm/issues/4855"},"https://github.com/go-gorm/gorm/issues/4855"),"\r\n",r.createElement(t.a,{href:"https://dev.to/rahulkarmore/how-to-parse-time-of-time-time-in-golang-work-with-sql-db-in"},"https://dev.to/rahulkarmore/how-to-parse-time-of-time-time-in-golang-work-with-sql-db-in")))}var a=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,l.ah)(),e.components);return t?r.createElement(t,e,r.createElement(o,e)):o(e)},c=n(8804);function m(e){return r.createElement(c.Z,e,r.createElement(a,e))}c.Z}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-golang-2022-04-25-go-gorm-auto-migrate-mdx-93cc4a8b32e68bfbee48.js.map