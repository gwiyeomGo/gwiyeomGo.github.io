{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-infra-2023-09-07-infra-docker-kafka-external-connection-mdx-0f395a7cebfc476a5898.js","mappings":"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","sources":["webpack://gwiyeom-blog/./content/posts/server/infra/2023-09-07-infra-docker-kafka-external-connection.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    hr: \"hr\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    ol: \"ol\",\n    code: \"code\",\n    pre: \"pre\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"내 mac 에서 도컬를 실행하고 카프카 컨테이너를 실행했다\\n옆사람이 pc 에서 내 카프카 컨테이너에 토픽을 생성하고 메세지를 받고싶다\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h1, null, \"방법1.Tunnels\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"다른 사용자의 pc 의 원격 호스트에 접속\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"SSH\"), \"\\n\", React.createElement(_components.p, null, \"사용자(클라이언트)와 서버(호스트)는 각각의 키를 보유하고 있으며 키를 이용해 연결 상대를 인증\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"authorized_keys 라는 파일에 접속할 pc 의 공개 키 전문을 저장\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"vim ~/.ssh/authorized_keys\"), \"  //실행 후 공개 키 전문을 저장\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"2\"\n  }, \"\\n\", React.createElement(_components.li, null, \"sshd_config 파일에 설정을 변경\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"sudo vim /etc/ssh/sshd_config \"), \" 명령어 실행 후 편집\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"PasswordAuthentication no\\nUseDNS no\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"패스워드 인증을 허용(yes)/허용안함(no)\"), \"\\n\", React.createElement(_components.li, null, \"클라이언트 호스트 주소를 DNS 해석(yes)/허용안함(no)\"), \"\\n\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"3\"\n  }, \"\\n\", React.createElement(_components.li, null, \"앞에 설정을 완료 했다면 ssh [이름]@[ip] 로 상태방 pc 에 접근 가능\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"(클라이언트 pc) \", React.createElement(_components.code, null, \"ssh -R 9092:127.0.0.1:9092 [서버 이름]@[서버 ip]\"), \" 실행\"), \"\\n\", React.createElement(_components.p, null, \"(서버 pc) \", React.createElement(_components.code, null, \"ssh -L 9092:127.0.0.1:9092 [클라이언트 이름]@[클라이언트 ip]\"), \" 실행\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"4\"\n  }, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"상대방 pc 터미널에 접근 성공\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"이후 카프카에 토픽생성하고 메세지 추가\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"(클라이언트 pc) 카프카 서비스 코드를 실행해서 서버pc의 도커-카프카로 접근\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"pwd\"), \" 명령어로 사용자 이름 확인\"), \"\\n\", React.createElement(_components.li, null, \"공개 키 생성(mac) -> \", React.createElement(_components.code, null, \"ssh-keygen -t -rsa -b 4096\")), \"\\n\", React.createElement(_components.li, null, \"공개 키 보기(mac) -> \", React.createElement(_components.code, null, \"cat ~/.ssh/id_rsa.pub\")), \"\\n\", React.createElement(_components.li, null, \"ip 확인 -> \", React.createElement(_components.code, null, \"ipconfig | grep inet\")), \"\\n\", React.createElement(_components.li, null, \"TCP/IP 네트워크로 루프백 주소 = 127.0.0.1 주소 = localhost 주소\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h1, null, \"방법2.Kafka brokers\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"mac 에서 특정 host 에 kafka cluster dns 셋팅 방법\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"가상의 호스트 이름 : kafka.example.com\"), \"\\n\", React.createElement(_components.p, null, \"1.호스트 파일(/etc/hosts) 편집\\nMac에서 호스트 이름을 DNS로 해석하려면 먼저 /etc/hosts 파일에 해당 호스트 이름과 IP 주소의 매핑을 추가\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"sudo nano /etc/hosts\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"##\\n# Host Database\\n#\\n# localhost is used to configure the loopback interface\\n# when the system is booting.  Do not change this entry.\\n##\\n\\n192.168.1.100   kafka.example.com\\n\")), \"\\n\", React.createElement(_components.p, null, \"Kafka 클러스터의 실제 IP 주소 = 192.168.1.100\\n\", React.createElement(_components.code, null, \"192.168.1.100 kafka.example.com\"), \"내용을 추가\\n(nano) 저장: Ctrl + o , 나가기: Ctrl + x\"), \"\\n\", React.createElement(_components.h1, null, \"Kafka 클라이언트 설정 파일(server.properties)에 외부호스트 설정\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"advertised.listeners\"), \" Kafka 브로커가 클라이언트에게 알려주는 브로커의 주소입니다. 주로 외부에서 접근 가능한 주소\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"advertised.listeners=PLAINTEXT://kafka.example.com:9092 //브로커의 주소 지정\\n\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://hanamon.kr/dns%EB%9E%80-%EB%8F%84%EB%A9%94%EC%9D%B8-%EB%84%A4%EC%9E%84-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B0%9C%EB%85%90%EB%B6%80%ED%84%B0-%EC%9E%91%EB%8F%99-%EB%B0%A9%EC%8B%9D%EA%B9%8C%EC%A7%80/\"\n  }, \"https://hanamon.kr/dns란-도메인-네임-시스템-개념부터-작동-방식까지/\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://blog.voidmainvoid.net/327\"\n  }, \"https://blog.voidmainvoid.net/327\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://blog.voidmainvoid.net/500\"\n  }, \"https://blog.voidmainvoid.net/500\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://mycup.tistory.com/428\"\n  }, \"https://mycup.tistory.com/428\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://deep-dive-dev.tistory.com/42\"\n  }, \"https://deep-dive-dev.tistory.com/42\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://devocean.sk.com/vlog/TechDay/03_se4.pdf\"\n  }, \"https://devocean.sk.com/vlog/TechDay/03_se4.pdf\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://shinwusub.tistory.com/133\"\n  }, \"https://shinwusub.tistory.com/133\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/gwiyeomgo.github.io/gwiyeomgo.github.io/content/posts/server/infra/2023-09-07-infra-docker-kafka-external-connection.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","hr","ul","li","h3","ol","code","pre","a","_provideComponents","components","React","start","href","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}