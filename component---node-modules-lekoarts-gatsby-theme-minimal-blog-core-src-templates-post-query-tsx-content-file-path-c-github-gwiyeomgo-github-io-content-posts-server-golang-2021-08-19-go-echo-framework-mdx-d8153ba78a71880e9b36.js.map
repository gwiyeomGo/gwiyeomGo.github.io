{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-c-github-gwiyeomgo-github-io-content-posts-server-golang-2021-08-19-go-echo-framework-mdx-d8153ba78a71880e9b36.js","mappings":"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","sources":["webpack://gwiyeom-blog/./content/posts/server/golang/2021-08-19-go-echo-framework.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h3: \"h3\",\n    a: \"a\",\n    blockquote: \"blockquote\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\",\n    h1: \"h1\",\n    ul: \"ul\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h3, null, React.createElement(_components.a, {\n    href: \"https://echo.labstack.com/\"\n  }, \"ehco프레임워크\"), \" 를 사용하면서 사용했던 내용 기록\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"ctx ? ctx echo.Context\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"     Context represents the context of the current HTTP request. It holds request and response objects, path, path parameters, data and registered handler.\\n\")), \"\\n\", React.createElement(_components.h3, null, \"ctx가 필요한 이유\"), \"\\n\", React.createElement(_components.p, null, \"인터페이스?\\r\\n팩토리를 통해서 의존성주입\\r\\n폴더만들때 복수?사상의차이\\r\\n팩토리난에 스트럭트 이름은 new로시작\\r\\n쉬프투 f6\\r\\n싱글톤\\r\\n리시버\\r\\n목객체?mock\\r\\n덕타이핑\\r\\n의존성을 느슨하게\\r\\nmock을 자동으로 준다\"), \"\\n\", React.createElement(_components.p, null, \"단위테스트\\r\\ns-r2\"), \"\\n\", React.createElement(_components.h3, null, \"omitempty 가 뭐지?\"), \"\\n\", React.createElement(_components.h2, null, \"db를 dev에 만들고\"), \"\\n\", React.createElement(_components.p, null, \"echo 가 하는일이\\r\\nrequest,response 를 할때 중간에 middleware가 잡아주는 역할을 한다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"e.Use\"), \"의 argument로 넣은 함수가 moddleware\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"e.HTTPErrorHandler\"), \" 에러가 발생하면 발동한다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"e.Pre\"), \" 는 url 에 /가 있다면 빼주는 역할\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"middleware.CORS\"), \" 받을 메소드를 지정한다\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"e.Validator\"), \" validator 지정 => registernumber 등등 코드에는 RegisterValidation 함수를 넣어 커스톰 해줬다\"), \"\\n\", React.createElement(_components.p, null, \"main() config ,xormDb(db설정 셋팅) 는 1번만 설정된다\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"e.Use(handel.Create~)\"), \"\\r\\nNewSession =>  트랜젝션 시작 (세션을 열어준다)\"), \"\\n\", React.createElement(_components.p, null, \"echo의 context 는  결국 변수다\"), \"\\n\", React.createElement(_components.p, null, \"request 에는 많은 정보가  잇고 이것을 echo가 담아놓은것\"), \"\\n\", React.createElement(_components.p, null, \"echo 자체에 토큰을 파싱해주는 parsendToken.Claims.~\"), \"\\n\", React.createElement(_components.p, null, \"토큭 파싱한 정보를 우리 코드에 설정\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"CreateTokenWithExpire\"), \"\\r\\n처음 접근할때 memberId있는거 확인하고 토큰을 생성해 프론트로 보낸다\\r\\n서버쪽 코드에서 cookie가 있는지도 확인하는 코드도 있다\"), \"\\n\", React.createElement(_components.p, null, \"routing\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"e.Start\"), \" webserver start\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"Logger\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"middleware.ReauestId\"), \" call마다 유니크한 id 를 생성한다.\"), \"\\n\", React.createElement(_components.p, null, \"JWTWithConfig => jwt 토큰 확인\\r\\nsetSession => echo가 token을 분석해 꺼내서 user consetx로\\r\\nsetXormSession으로 이름 변경\"), \"\\n\", React.createElement(_components.p, null, \"get할때는 session.Begin 을 안한다 sessioin 하면 비용 많이듬\"), \"\\n\", React.createElement(_components.p, null, \"db session 과 log session 같이 만듬\"), \"\\n\", React.createElement(_components.p, null, \"de seesion은 중간 오류시 rollback,commit\\r\\nlog session은 끝까지 간다\"), \"\\n\", React.createElement(_components.p, null, \"context.DB(c) => 이런식으로\"), \"\\n\", React.createElement(_components.p, null, \"exp 등 고정된 key값을 echo가 자동으로 알고 분석\"), \"\\n\", React.createElement(_components.p, null, \"echo\\r\\nContext 안에는\\r\\nUser\\r\\nRequest\\r\\nResponse 가 있는데 자동으로 echo가 넣음\"), \"\\n\", React.createElement(_components.p, null, \"setSession에서 c.Get(\\\"user\\\").(*jwt.Token) 으로 형변환\"), \"\\n\", React.createElement(_components.p, null, \"rawClaims 는 map으로 되어있어서 struct 로 바꿔주는 작업이 MapToStruct 를 만들어 쓰기로힘\"), \"\\n\", React.createElement(_components.p, null, \"request_id => echo기능으로 자동으로 얻음\"), \"\\n\", React.createElement(_components.p, null, \"function에서 function에서 값을 넘기려면 파라미터에 추가해서 넣어야 하는데\\r\\necho가 context에 넣어 줌으로 모든 function으로 이동이 자유롭도록\\r\\n\", React.createElement(_components.code, null, \"getUserClaim\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"serLogger\"), \"\\r\\n\", React.createElement(_components.code, null, \"c.Set\"), \" context에 저장한다는 뜻\"), \"\\n\", React.createElement(_components.p, null, \"기존에 log.infln 으로 했는데\"), \"\\n\", React.createElement(_components.p, null, \"requst _id를 logger에 같이 넣고 싶어서\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"l := logrus.WithFields )\\r\\n\\n\")), \"\\n\", React.createElement(_components.p, null, \"사용할때는 context.Log(c).Token(\\\"\\\")\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"e.HideBanner\")), \"\\n\", React.createElement(_components.p, null, \"실행시 echo 메세지 지움\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \".bodyDump\"), \" 를 하면 request ,response 정보모두 한눈에 log가 찍힘 => 이건 더 테스트\"), \"\\n\", React.createElement(_components.p, null, \"이제는 controller 대신 handler 로 이름 바꿔서 쓰다\"), \"\\n\", React.createElement(_components.p, null, \"assets => html 이나 이미지\"), \"\\n\", React.createElement(_components.p, null, \"common은 공통 func 넣을 예정\"), \"\\n\", React.createElement(_components.p, null, \"비즈니스로직은 handler\"), \"\\n\", React.createElement(_components.p, null, \"context.Log log 가져옴\\r\\ncontext.DB\\r\\n등 쉽게 가져오게 하려고 만듬\"), \"\\n\", React.createElement(_components.p, null, \"폴더 이름\\r\\norg\\r\\ngoods\\r\\napplication\\r\\nreports\"), \"\\n\", React.createElement(_components.p, null, \"enum?\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"CRUD 에 썼던 DTO => OrgCUD 에 공통함수\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"Query  =>orgQuery => get\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"dto를 만들지 않고 query에서는 *로 찾지 않고 필요한거 컬럼에 넣어서 해야 한다\"), \"\\n\", React.createElement(_components.p, null, \"interface적용\"), \"\\n\", React.createElement(_components.p, null, \"handerInterface\\r\\nRouteDefault\"), \"\\n\", React.createElement(_components.p, null, \"Org\", \".Init() 는 crud\\\\\"), \"\\n\", React.createElement(_components.p, null, \"internal에 entity 들어가 있음\"), \"\\n\", React.createElement(_components.p, null, \"dto service rpository 합친게 service 폴더\"), \"\\n\", React.createElement(_components.p, null, \"private public  handle까지 오픈하고 싶은데.. 그럼 딴데서 사용 x\\r\\ninternal 안에 있는 pulbic 대문자로 쓰더라도\\r\\nmoddleware에서는 부를 수 없다\\r\\nhandle 에서는 부를 수 잇다\\r\\n폴더 구조의 상위에서만 부를 수 있다\"), \"\\n\", React.createElement(_components.p, null, \"service 는 형제는 못부르고 부모handel만 부를 수 있다\\r\\n나머지는 다 안됨\"), \"\\n\", React.createElement(_components.p, null, \"entiyInterface\"), \"\\n\", React.createElement(_components.h1, null, React.createElement(_components.a, {\n    href: \"https://echo.labstack.com/guide/binding/\"\n  }, \"echo Struct Tag Binding\")), \"\\n\", React.createElement(_components.h1, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"2022/11/17\\r\\n그런데 field 의 타입을 json 으로 쓴 경우 request body 를 bind 한다고 생각하기 때문에\\r\\nbody 값이 없어서 required tag 로 에러가 발생했다.\\r\\n\", React.createElement(_components.code, null, \"Key: 'verification.Name' Error:Field validation for 'Name' failed on the 'required' tag\")), \"\\n\", React.createElement(_components.p, null, \"기존에 1.16 버전 사용시 ctx.Bind 를 했을 때 field 의 타입을 json 으로 써도 통과가 되었는데 더 엄격하게 변경된거 같다\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"Data Sources\\r\\nEcho supports the following tags specifying data sources:\\r\\n\\r\\nquery - query parameter\\r\\nparam - path parameter (also called route)\\r\\nheader - header parameter\\r\\njson - request body. Uses builtin Go json package for unmarshalling.\\r\\nxml - request body. Uses builtin Go xml package for unmarshalling.\\r\\nform - form data. Values are taken from query and request body. Uses Go standard library form parsing.\\n\")), \"\\n\", React.createElement(_components.h3, null, \"json 사용 경험\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"파일 업로드 기능이 필요\"), \"\\n\", React.createElement(_components.li, null, \"파일을 S3 에 저장하고 url을 받고 있음\"), \"\\n\", React.createElement(_components.li, null, \"client 에서 service로 여러개의 파일을 보내야 하는 상황\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"{data:\\\"https://test\\\",data2:\\\"https://test2\\\"}\\n\")), \"\\n\", React.createElement(_components.ol, {\n    start: \"4\"\n  }, \"\\n\", React.createElement(_components.li, null, \"client 에서 service로 json 데이터를 전송\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"{\\r\\n  files:{data:\\\"https://test\\\",data2:\\\"https://test2\\\"}\\r\\n}\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"(echo contex 를 사용할 경우) 서비스 에서는 어떻게 json 형태를 인식할까?\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"go에서는 encoding/json 패키지를 사용해서 JSON 인코딩을 합니다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Data struct filed 에 json.RawMessage 타입을 지정합니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"type Data struct {\\r\\n  files             json.RawMessage     `query:\\\"files'\\\"`\\r\\n}\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"echo.Context  \", React.createElement(_components.code, null, \"c.Bind(&Data)\"), \" 를 사용하면 Data struct 에 bind 됩니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h1, null, \"echo PathParamsBinder\"), \"\\n\", React.createElement(_components.p, null, \"4/18\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"var application service.ApplicationRepository\\r\\n\\r\\n\\tvar id int64\\r\\n\\tvar key int64\\r\\n\\tif err := echo.PathParamsBinder(c).Int64(\\\"id\\\", &id).Int64(\\\"key\\\", &key).BindError(); err != nil {\\r\\n\\t\\treturn err\\r\\n\\t}\\n\")), \"\\n\", React.createElement(_components.p, null, \"#참고\\r\\n\", React.createElement(_components.a, {\n    href: \"https://mingrammer.com/translation-go-walkthrough-encoding-json-package/\"\n  }, \"https://mingrammer.com/translation-go-walkthrough-encoding-json-package/\"), \"\\r\\n\", React.createElement(_components.a, {\n    href: \"https://github.com/labstack/echo/blob/master/binder_test.go\"\n  }, \"https://github.com/labstack/echo/blob/master/binder_test.go\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"C:/github/gwiyeomgo.github.io/content/posts/server/golang/2021-08-19-go-echo-framework.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h3","a","blockquote","p","pre","code","h2","ol","li","h1","ul","_provideComponents","components","React","href","start","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}