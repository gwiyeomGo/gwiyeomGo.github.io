{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-c-github-gwiyeomgo-github-io-content-posts-server-golang-2022-02-13-go-struct-filed-tag-mdx-d479b773699a0b92f814.js","mappings":"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","sources":["webpack://gwiyeom-blog/./content/posts/server/golang/2022-02-13-go-struct-filed-tag.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    h1: \"h1\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    a: \"a\",\n    ol: \"ol\",\n    li: \"li\",\n    ul: \"ul\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2), \"\\n\", React.createElement(_components.p, null, \"struct 는 go 에서 class 와 가장 비슷하다\"), \"\\n\", React.createElement(_components.h1, null, \"go 는 대소문자로 정보 은익?\"), \"\\n\", React.createElement(_components.p, null, \"go는 식별자의 첫 번째 문자가 대문자인지 소문자인지에 따라 public과 private 를 구분한다.\\r\\n마찬가지로 구조체의 필드도 대문자로 시작하는 필드는 패키지 외부에서 접근할 수 있고\\r\\n소문자로 시작하는 필드는 패키지 내부에서만 접근할 수 있다\"), \"\\n\", React.createElement(_components.h1, null, \"omitempty\"), \"\\n\", React.createElement(_components.h3, null, \"배경\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"type MemberInfo struct {\\r\\nID            int64     json:\\\"ID\\\" `\\r\\nName          string    json:\\\"title\\\"`\\r\\nAddress       string    json:\\\"address,omitempty\\\"`\\r\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"golang 을 사용하면 위 코드와 같이 struct 를 만들어서\\r\\n요청의 body 의 json 값을 받거나\\r\\n응답을 보내기전 dto 로 값을 채워 보낸다.\"), \"\\n\", React.createElement(_components.p, null, \"예를들어\\r\\n회원의 등록된  주소(address)가 없다면\\r\\n프론트에서 받은 응답 json 에 key 값이 안보이길 원한다.\"), \"\\n\", React.createElement(_components.h3, null, \"omitempty 적용 비교 ,json 등등...\"), \"\\n\", React.createElement(_components.p, null, \"보통 프론트에서 받는 응답값을 보면\"), \"\\n\", React.createElement(_components.p, null, \"1.omitempty 표시 안했을 떄\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"{ID :1,name:\\\"coco\\\",address:\\\"\\\"}\\n\")), \"\\n\", React.createElement(_components.p, null, \"1.omitempty 표시 했을 떄\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"{ID :1,name:\\\"coco\\\"}\\n\")), \"\\n\", React.createElement(_components.h1, null, React.createElement(_components.a, {\n    href: \"https://echo.labstack.com/guide/binding/\"\n  }, \"echo Struct Tag Binding\")), \"\\n\", React.createElement(_components.h1, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"2022/11/17\\r\\n그런데 field 의 타입을 json 으로 쓴 경우 request body 를 bind 한다고 생각하기 때문에\\r\\nbody 값이 없어서 required tag 로 에러가 발생했다.\\r\\n\", React.createElement(_components.code, null, \"Key: 'verification.Name' Error:Field validation for 'Name' failed on the 'required' tag\")), \"\\n\", React.createElement(_components.p, null, \"기존에 1.16 버전 사용시 ctx.Bind 를 했을 때 field 의 타입을 json 으로 써도 통과가 되었는데 더 엄격하게 변경된거 같다\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"Data Sources\\r\\nEcho supports the following tags specifying data sources:\\r\\n\\r\\nquery - query parameter\\r\\nparam - path parameter (also called route)\\r\\nheader - header parameter\\r\\njson - request body. Uses builtin Go json package for unmarshalling.\\r\\nxml - request body. Uses builtin Go xml package for unmarshalling.\\r\\nform - form data. Values are taken from query and request body. Uses Go standard library form parsing.\\n\")), \"\\n\", React.createElement(_components.h3, null, \"json 사용 경험\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"파일 업로드 기능이 필요\"), \"\\n\", React.createElement(_components.li, null, \"파일을 S3 에 저장하고 url을 받고 있음\"), \"\\n\", React.createElement(_components.li, null, \"client 에서 service로 여러개의 파일을 보내야 하는 상황\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"{data:\\\"https://test\\\",data2:\\\"https://test2\\\"}\\n\")), \"\\n\", React.createElement(_components.ol, {\n    start: \"4\"\n  }, \"\\n\", React.createElement(_components.li, null, \"client 에서 service로 json 데이터를 전송\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"{\\r\\n  files:{data:\\\"https://test\\\",data2:\\\"https://test2\\\"}\\r\\n}\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"(echo contex 를 사용할 경우) 서비스 에서는 어떻게 json 형태를 인식할까?\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"go에서는 encoding/json 패키지를 사용해서 JSON 인코딩을 합니다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Data struct filed 에 json.RawMessage 타입을 지정합니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"type Data struct {\\r\\n  files             json.RawMessage     `query:\\\"files'\\\"`\\r\\n}\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"echo.Context  \", React.createElement(_components.code, null, \"c.Bind(&Data)\"), \" 를 사용하면 Data struct 에 bind 됩니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h1, null, \"crypto test\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://wookiist.dev/127\"\n  }, \"참고\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"C:/github/gwiyeomgo.github.io/content/posts/server/golang/2022-02-13-go-struct-filed-tag.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","h1","h3","pre","code","a","ol","li","ul","_provideComponents","components","React","href","start","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}