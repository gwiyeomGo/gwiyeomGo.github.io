{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-c-github-gwiyeomgo-github-io-content-posts-etc-2022-06-14-rolebasedaccesscontrol번역-mdx-e331a3aa42e196e3da11.js","mappings":"mNAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,EAAG,MACFC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,GAAI,KAAM,2CAA4C,KAAMK,EAAAA,cAAoBR,EAAYI,EAAG,KAAMI,EAAAA,cAAoBR,EAAYK,EAAG,CACvNI,KAAM,6GACL,eAAgB,yCAA0C,KAAMD,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,kDAAmD,KAAMI,EAAAA,cAAoBR,EAAYG,GAAI,KAAM,MAAO,KAAMK,EAAAA,cAAoBR,EAAYI,EAAG,KAAMI,EAAAA,cAAoBR,EAAYK,EAAG,CACtSI,KAAM,6DACL,8DAA+D,KAAMD,EAAAA,cAAoBR,EAAYG,GAAI,KAAM,MAAO,KAAMK,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,2GAA4G,KAAMI,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,8HAA+H,KAAMI,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,0LAA2L,KAAMI,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,oGAAqG,KAAMI,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,kUAAmU,KAAMI,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,qKAAsK,KAAMI,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,0RAA2R,KAAMI,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,4IAA6I,KAAMI,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,mLAAoL,KAAMI,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,6CAA8C,KAAMI,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,8SAA+S,KAAMI,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,iJAAkJ,KAAMI,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,glBAAilB,KAAMI,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,kTAC75G,CAKA,MAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWZ,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,E,UCde,SAASa,EAAiBb,GACvC,OAAOS,EAAAA,cAAoBK,EAAAA,EAAed,EAAOS,EAAAA,cAAoBM,EAAqBf,GAC5F,CAHAc,EAAAA,C","sources":["webpack://gwiyeom-blog/./content/posts/etc/2022-06-14-rolebasedaccesscontrol번역.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h3: \"h3\",\n    p: \"p\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h3, null, \"역할 기반 접근 제어(Role-based access control )\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://ko.wikipedia.org/wiki/%EC%97%AD%ED%95%A0_%EA%B8%B0%EB%B0%98_%EC%A0%91%EA%B7%BC_%EC%A0%9C%EC%96%B4\"\n  }, \"역할 기반 접근 제어\"), \"\\r\\n는 권한이 있는 사용자들에게 시스템 접근을 통제하는 한 방법\"), \"\\n\", React.createElement(_components.p, null, \"RBAC 주요 규칙\\r\\n1.역할 할당\\r\\n2.역할 권한 부여\\r\\n3.권한 부여\"), \"\\n\", React.createElement(_components.h3, null, \"출처\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://en.m.wikipedia.org/wiki/Role-based_access_control\"\n  }, \"https://en.m.wikipedia.org/wiki/Role-based_access_control\")), \"\\n\", React.createElement(_components.h3, null, \"번역\"), \"\\n\", React.createElement(_components.p, null, \"Within an organization, roles are created for various job functions.\\r\\n조직 내에서 다양한 직무 기능에 대한 역할이 생성됩니다.\"), \"\\n\", React.createElement(_components.p, null, \"The permissions to perform certain operations /are assigned to/ specific roles.\\r\\n권한은 / 수행할 수 있는 /특정 작업들 /할당 됩니다./특정 역할들에\"), \"\\n\", React.createElement(_components.p, null, \"Members or staff (or other system users) are assigned particular roles,\\r\\nand through those role assignments /acquire the permissions /needed to perform particular system functions.\"), \"\\n\", React.createElement(_components.p, null, \"회원들 또는 스태프(또는 다른 시스템 사용자들) /할당 됩니다/특정 역할들이,\\r\\n그리고 이러한 역할 할당을 통해/  얻습니다./권한들/수행할 수 있는/특정 시스템 기능을\"), \"\\n\", React.createElement(_components.p, null, \"Since users are not assigned permissions directly,\\r\\nbut only acquire them through their role (or roles),\\r\\nmanagement of individual user rights becomes a matter of simply assigning appropriate roles\\r\\nto the user's account; this simplifies common operations, such as adding a user, or changing a user's department.\"), \"\\n\", React.createElement(_components.p, null, \"사용자에게 권한이 직접 할당되지 않기 때문에\\r\\n자신의 역할(또는 역할)을 통해서만 획득할 수 있습니다.\\r\\n개별 사용자 권한 관리는 단순히 사용자의 계정에 적절한 역할을 할당하는 것이 문제가 됩니다.\\r\\n이는 사용자 추가 또는 사용자 부서 변경과 같은 일반적인 작업을 단순화합니다.\"), \"\\n\", React.createElement(_components.p, null, \"Role based access control interference is a relatively new issue\\r\\nin security applications(응용 프로그램), where multiple user accounts\\r\\nwith dynamic access levels may lead to encryption key instability,\\r\\nallowing an outside user to exploit the weakness for unauthorized access.\"), \"\\n\", React.createElement(_components.p, null, \"역할 기반 접근 제어 간섭(방해)는 /비교적/새문제이다/보안 응용 프로그램에서\\r\\n동적 액세스 수준을 가진 여러 사용자 계정이 있는 경우 / 암호화 키가 불안정해질 수 있습니다.\\r\\n외부 사용자가 무단 액세스의 취약성을 이용할 수 있습니다.\"), \"\\n\", React.createElement(_components.p, null, \"Key sharing applications within dynamic virtualized environments\\r\\nhave shown some success\\r\\nin addressing this problem.\\r\\n동적 가상화 환경 내 키 공유 애플리케이션/ 성공을 거두었다/이 문제를 해결하는 데 있어\"), \"\\n\", React.createElement(_components.p, null, \"Three primary rules are defined for RBAC:\"), \"\\n\", React.createElement(_components.p, null, \"Role assignment: A subject can exercise a permission only if the subject has selected or been assigned a role.\\r\\nRole authorization: A subject's active role must be authorized for the subject.\\r\\nWith rule 1 above, this rule ensures that users can take on only roles for which they are authorized.\"), \"\\n\", React.createElement(_components.p, null, \"역할 할당: 제목의 역할이 선택되었거나 할당된 경우에만 권한을 행사할 수 있습니다.\\r\\n역할 권한 부여: 제목의 활성 역할이 해당 제목에 대해 인증되어야 합니다.\\r\\n위의 규칙 1에서 이 규칙은 사용자가 권한이 부여된 역할만 맡을 수 있도록 합니다.\"), \"\\n\", React.createElement(_components.p, null, \"Permission authorization: A subject can exercise a permission only if the permission is authorized for the subject's active role.\\r\\nWith rules 1 and 2, this rule ensures that users can exercise only permissions for which they are authorized.\\r\\nAdditional constraints may be applied as well, and roles can be combined in a hierarchy where higher-level roles subsume permissions owned by sub-roles.\\r\\nWith the concepts of role hierarchy and constraints, one can control RBAC to create or simulate lattice-based access control (LBAC). Thus RBAC can be considered to be a superset of LBAC.\"), \"\\n\", React.createElement(_components.p, null, \"권한 인증: 제목은 제목의 활성 역할에 대해 권한이 승인된 경우에만 권한을 행사할 수 있습니다.\\r\\n규칙 1과 2를 사용하면 이 규칙은 사용자가 권한이 부여된 권한만 행사할 수 있도록 합니다.\\r\\n추가 제약 조건도 적용될 수 있으며 역할은 하위 역할이 소유한 사용 권한을 더 높은 수준의 역할이 포함하는 계층에서 결합될 수 있습니다.\\r\\n역할 계층 및 제약 조건의 개념을 사용하여 RBAC를 제어하여 LBAC(격자 기반 액세스 제어)를 생성하거나 시뮬레이션할 수 있습니다. 따라서, RBAC는 LBAC의 상위 집합으로 간주될 수 있다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"C:/github/gwiyeomgo.github.io/content/posts/etc/2022-06-14-rolebasedaccesscontrol번역.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h3","p","a","_provideComponents","components","React","href","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}