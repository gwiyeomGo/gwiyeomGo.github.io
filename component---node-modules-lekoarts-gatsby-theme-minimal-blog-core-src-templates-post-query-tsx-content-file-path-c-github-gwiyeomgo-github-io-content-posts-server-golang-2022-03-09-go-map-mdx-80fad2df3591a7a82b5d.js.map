{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-c-github-gwiyeomgo-github-io-content-posts-server-golang-2022-03-09-go-map-mdx-80fad2df3591a7a82b5d.js","mappings":"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","sources":["webpack://gwiyeom-blog/./content/posts/server/golang/2022-03-09-go-map.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h3: \"h3\",\n    ol: \"ol\",\n    li: \"li\",\n    p: \"p\",\n    code: \"code\",\n    ul: \"ul\",\n    a: \"a\",\n    pre: \"pre\",\n    h1: \"h1\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h3, null, \"배경\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"신규 프로젝트를 시작하면서 join을 사용하지 않고 코드에서 join을 하기로 결정했다.\"), \"\\n\", React.createElement(_components.li, null, \"A table 에서 정보를 조회하고\"), \"\\n\", React.createElement(_components.li, null, \"B table 에서 정보를 조회했을때\"), \"\\n\", React.createElement(_components.li, null, \"각각의 값을 service에서 합쳐서 반환한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"이때 \", React.createElement(_components.code, null, \"map[string]interface{}\"), \" ,\", React.createElement(_components.code, null, \"[]interface{}\"), \" 등 사용해서\\r\\n반환값의 타입을 지정한다.\"), \"\\n\", React.createElement(_components.h3, null, \"필요한 코드는?\"), \"\\n\", React.createElement(_components.p, null, \"반환값 (합친 형태가)\\r\\n\", React.createElement(_components.code, null, \"[{name:\\\"test\\\"},{name:\\\"test2\\\"}]\"), \" 형태  필요할때\"), \"\\n\", React.createElement(_components.h3, null, \"상황 1\"), \"\\n\", React.createElement(_components.p, null, \"[]배열형태를 어떻게 표현하지?\"), \"\\n\", React.createElement(_components.h3, null, \"append로 배열에 객체\", \"를 추가\"), \"\\n\", React.createElement(_components.p, null, \"구글에서 검색 해서 아래방법을 찾았다\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://stackoverflow.com/questions/34293572/golang-prepend-a-string-to-a-slice-interface\"\n  }, \"참고\")), \"\\n\", React.createElement(_components.li, null, \"append() can only append values of the type matching the element type of the slice:\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"s := \\\"first\\\"\\r\\nrest := []interface{}{\\\"second\\\", 3}\\r\\nall := append([]interface{}{s}, rest)\\r\\nfmt.Println(all)\\r\\n//Output (try it on the Go Playground):\\n\")), \"\\n\", React.createElement(_components.h1, null, \"상황 2\"), \"\\n\", React.createElement(_components.p, null, \"그렇다면 []안에 객체는 어떻게 넣지?\"), \"\\n\", React.createElement(_components.h3, null, \"key value 형태 객체만드는 방법\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"type MyStruct struct {\\r\\n    Name string\\r\\n    Age  int64\\r\\n}\\r\\nfunc main() {\\r\\n    myData := make(map[string]interface{})\\r\\n    myData[\\\"Name\\\"] = \\\"Tony\\\"\\r\\n    myData[\\\"Age\\\"] = int64(23)\\r\\n\\r\\n    result := &MyStruct{}\\r\\n}\\n\")), \"\\n\", React.createElement(_components.h2, null, \"실행 코드\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"A B 모두 아래 메소드 처럼 값을 조회함\"), \"\\n\", React.createElement(_components.li, null, \"(1) A 의 GetList 는 *[]A를 반환\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"type A struct {\\r\\n    Id   sring\\r\\n}\\r\\nfunc (A) GetList() *[]A {\\r\\n    var results []A\\r\\n    //builder.Find(&results) db에서 A조회\\r\\n\\treturn &results\\r\\n}\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"(2) B 의 GetLst 는 *[]map[string]string 반환\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"func (B) GetList() *[]map[string]string {\\r\\n\\tvar results []map[string]string\\r\\n    //builder.Find(&results) db에서 A조회\\r\\n\\treturn &results\\r\\n}\\n\")), \"\\n\", React.createElement(_components.h2, null, \"코드에서 조인\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"func Sum() {\\r\\n\\ta := A{}.GetList()\\r\\n    b := B{}.GetLsit()\\r\\n    var results []interface{} //배열 []\\r\\n    for _,aVal := range *a {\\r\\n        result :=  map[string]interface{}{\\r\\n            \\\"id\\\":aVal.Id,\\r\\n        }\\r\\n        //map[string]interface{}에 값 추가됨\\r\\n        for _,bVal range b {\\r\\n            if bVal[\\\"id\\\"] == aVal.Id {\\r\\n                rsult[\\\"name\\\"] = bVal[\\\"name\\\"]\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n}\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"C:/github/gwiyeomgo.github.io/content/posts/server/golang/2022-03-09-go-map.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h3","ol","li","p","code","ul","a","pre","h1","h2","_provideComponents","components","React","href","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}