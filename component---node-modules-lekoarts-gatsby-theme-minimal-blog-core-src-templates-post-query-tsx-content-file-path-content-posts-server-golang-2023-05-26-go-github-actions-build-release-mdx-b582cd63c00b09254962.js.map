{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-golang-2023-05-26-go-github-actions-build-release-mdx-b582cd63c00b09254962.js","mappings":"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","sources":["webpack://gwiyeom-blog/./content/posts/server/golang/2023-05-26-go-github-actions-build-release.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    ol: \"ol\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"매번 module 을 사용하고 relase tag 를 생성해 최신버전으로 배포한다\\n코드를 머지하면 자동으로  배포하고 싶다\"), \"\\n\", React.createElement(_components.h1, null, \"사용기술\"), \"\\n\", React.createElement(_components.p, null, \"github/actions \", React.createElement(_components.a, {\n    href: \"https://github.com/features/actions\"\n  }, \"https://github.com/features/actions\"), \"\\ncodecov \", React.createElement(_components.a, {\n    href: \"https://about.codecov.io/\"\n  }, \"https://about.codecov.io/\")), \"\\n\", React.createElement(_components.h1, null, \"작업내용\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"GitHub Actions를 사용하여 Go 코드를 빌드하고 테스트커버리지를 확인하자\"), \"\\n\", React.createElement(_components.li, null, \"GitHub Actions를 사용하여 Go 코드를 자동으로 릴리스하고 버전을 증가시키자\"), \"\\n\", React.createElement(_components.li, null, \"README.md\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"![Build Status](https://github.com/{사용자명}/{repository 명}/actions/workflows/build.yml/badge.svg)\\n[![codecov](https://codecov.io/gh/beautiful-store/gosiren/branch/main/graph/badge.svg?token={???})](https://codecov.io/gh/{사용자명}/{repository 명})\\n![GitHub go.mod Go version](https://img.shields.io/github/go-mod/go-version/{사용자명}/{repository 명})\\n![GitHub release (latest SemVer)](https://img.shields.io/github/v/release/{사용자명}/{repository 명})\\n\")), \"\\n\", React.createElement(_components.p, null, \"codecov 는 토큰이 필요한거 같다 (아직 알아보는 중)\"), \"\\n\", React.createElement(_components.h1, null, \"build.yml\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"# This workflow will build a golang project\\n# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go\\n\\nname: Go\\n\\non:\\n  push:\\n    branches: [ \\\"main\\\" ]\\n  pull_request:\\n    branches: [ \\\"main\\\" ]\\n\\njobs:\\n\\n  build:\\n    runs-on: ubuntu-latest\\n    steps:\\n    - uses: actions/checkout@v3\\n\\n    - name: Set up Go\\n      uses: actions/setup-go@v3\\n      with:\\n        go-version: 1.19\\n\\n    - name: Build\\n      run: go build -v ./...\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"test 실행을 원한다면\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"    - name: Run coverage\\n      run: go test -race -coverprofile=coverage.txt -covermode=atomic\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"coverage 추가를 원한다면\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"    - name: Upload coverage to Codecov\\n      uses: codecov/codecov-action@v3\\n\")), \"\\n\", React.createElement(_components.h1, null, \"release.yml\"), \"\\n\", React.createElement(_components.p, null, \"배포시 relase 태그를 자동으로 올리려면 해당 파일도 추가함\\n만약 build.yml 이랑 같이 사용한다면\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \" - name: Build\\n        uses: ./build.yml\\n\")), \"\\n\", React.createElement(_components.p, null, \"이렇게 파일에 쓴다\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"actions/create-release@v1\"), \" 은 릴리스 생성과 버전 태그 설정을 한 번에 처리해준다\\n따라서 relase 전\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \" tag_name: v1.0.0  # 릴리스 버전을 여기에 지정합니다.\\n release_name: Release v1.0.0\\n\")), \"\\n\", React.createElement(_components.p, null, \"값을 꼭 변경해야 한다\"), \"\\n\", React.createElement(_components.p, null, \"(참고)\\n\", React.createElement(_components.code, null, \"secrets.GITHUB_TOKEN\"), \"은 워크플로우가 실행되는 동안 자동으로 생성되고,레포지토리와 관련된 권한을 가지고 있습니다.\\n따라서 별도로 토큰을 생성하거나 설정할 필요는 없습니다.\"), \"\\n\", React.createElement(_components.p, null, \"main 브랜치에 변경 사항이 푸시되고 머지될 때마다 릴리즈 버전이 자동으로 증가하여 새로운 릴리즈가 생성\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"name: Auto Release Workflow\\n\\non:\\n  push:\\n    branches: [ \\\"main\\\" ]\\n\\njobs:\\n\\n  build:\\n    runs-on: ubuntu-latest\\n    steps:\\n       - name: Checkout code\\n        uses: actions/checkout@v3\\n\\n      - name: Build\\n        uses: ./build.yml\\n\\n      - name: Create Release\\n        id: create_release\\n        uses: actions/create-release@v1\\n        env:\\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\\n        with:\\n          tag_name: v1.0.0\\n          release_name: Release v1.0.0\\n          draft: false\\n          prerelease: false\\n\\n\")), \"\\n\", React.createElement(_components.p, null, \"프로젝트 루트 디렉토리에 .github/workflows 폴더를 생성합니다.\\n.github/workflows 폴더 내에 새로운 YAML 파일을 생성합니다. 예를 들어, release.yml로 파일 이름을 지정할 수 있습니다.\\nYAML 파일 내에서 다음과 같은 구성을 추가합니다:\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/gwiyeomgo.github.io/gwiyeomgo.github.io/content/posts/server/golang/2023-05-26-go-github-actions-build-release.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","a","ol","li","pre","code","ul","_provideComponents","components","React","href","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}