{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-infra-2024-03-14-infra-messaging-system-kafka-mdx-1393a29b327758f077eb.js","mappings":"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","sources":["webpack://gwiyeom-blog/./content/posts/server/infra/2024-03-14-infra-messagingSystem-kafka.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"kafka\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"분산 메시지 프레임워크이다.\"), \"\\n\", React.createElement(_components.li, null, \"굉장히 안정되어 있고 속도가 빠르다.\"), \"\\n\", React.createElement(_components.li, null, \"병령성능과 가용성 기능이 핵심아다.\"), \"\\n\", React.createElement(_components.li, null, \"메시지는 여러 파티션에 분산 저장됨\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"토픽\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"메시지를 저장하는 영역이며\"), \"\\n\", React.createElement(_components.li, null, \"토픽은 여러개의 파티션으로 구성된 일련의 로그 파일\"), \"\\n\", React.createElement(_components.li, null, \"키와 값 기반의 메시지 구조이며 다양한 타입의 값 전달 가능\"), \"\\n\", React.createElement(_components.li, null, \"시간의 흐름에 따라 메시지가 순차적으로 물리적인 파일에 write 된다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"프로듀셔 :메시지를 보낸다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"성능/로드벨런싱/가용성/업무 정합성등 고려하여 어떤 브로커의 파티션으로 메시지를 보내야 할지 전략적으로 결정됨\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"컨슈머 : 메시지를 읽는다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"여러 컨슈머가 구성된 경우 어떤 브로커의 파티션에서 메시지를 읽어들일지 전략적으로 결정 subscribe & poll 하면서 데이터를 가져온다.\"), \"\\n\", React.createElement(_components.li, null, \"다른 메시지 시스템과다르게 컨슈머가 메시지를 받아도 카프카안에 메시지가 사라지지 않는다!\"), \"\\n\", React.createElement(_components.li, null, \"프로듀서에서 클리이언트 쪽으로 메시지를 보냈을때 카프카 안에 토픽안에 여러 파티션에 저장\"), \"\\n\", React.createElement(_components.li, null, \"컨슈머들이 파티션에서 저장된 메시지를 가져온다.\"), \"\\n\", React.createElement(_components.li, null, \"auto.offset.rest (중요)\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"컨슈머가 토픽에 처음 접속하여 메시지를 가져올 때 가장 오래된 처음 offset 부터 가져올지,가장 최근인 마지막 offset 부터 가져올지 결정하는 파라미터\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"컨슈머는 브로커에서 메시지를 가져올 때 자기가 지금 어디까지 읽었는지에 대한 정보를 먼저 참조\"), \"\\n\", React.createElement(_components.li, null, \"read offset 을 가지고 있어서 자기가 어디까지 읽어 왔는지 알 수 있다\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"오프셋 = 일련 번호\"), \"\\n\", React.createElement(_components.p, null, \"메시지를 잘못 보낸 경우? 변경 불가\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"개별 파티션은 정렬되고, 변경 할 수 없는(immutable) 일련의 레코드로 구성된 로그 메시지\"), \"\\n\", React.createElement(_components.li, null, \"개별 파티션 끼리 독립적\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"보통 동일 서버에서 분산 처리를 하지 않고\\n카프카 클러스터 안에\\nip 만 다른 동일한 하드웨어가 아니라 하드웨어가 아예 분리된 구조에서\"), \"\\n\", React.createElement(_components.h2, null, \"가용성?\"), \"\\n\", React.createElement(_components.p, null, \"분산 시스템을 구성했는데 한 서버가 내려가면?\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"replicate-fator = 2 로 쓴다면 가용성을 높힌다.\"), \"\\n\", React.createElement(_components.li, null, \"리더와 팔로워 구조로 복제 (메시지->파티션1 리더- >팔로워)\"), \"\\n\", React.createElement(_components.li, null, \"가용성(可用性, 영어: availability)이란 서버와 네트워크, 프로그램 등의 정보 시스템이 정상적으로 사용 가능한 정도를 말한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"메시지를 send 할때 객체 직렬화 한다 (시리얼라이저)가 동작해 string 을 바이트 코드로 바꿈 -> 파티셔닝 단계\"), \"\\n\", React.createElement(_components.h2, null, \"키 값을 가지지 않는 메시지 전송을 할 때 어떻게 파티션을 분배할지\"), \"\\n\", React.createElement(_components.p, null, \"라운드 로빈은 최대한 메시지를 파티션에 균일하게 분배하려는 전략으로\\n메시지 배치를 순차적으로 다른 파티션으로 전송\"), \"\\n\", React.createElement(_components.h2, null, \"션슈머 그룹\"), \"\\n\", React.createElement(_components.p, null, \"컨슈머 그룹과 컨슈머의 관계,파티션 등,컨슈머 그룹 삭제\"), \"\\n\", React.createElement(_components.h2, null, \"사용 예시\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"브로커 하나\"), \"\\n\", React.createElement(_components.li, null, \"서버 하나\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/gwiyeomgo.github.io/gwiyeomgo.github.io/content/posts/server/infra/2024-03-14-infra-messagingSystem-kafka.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","ul","li","h2","p","_provideComponents","components","React","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}