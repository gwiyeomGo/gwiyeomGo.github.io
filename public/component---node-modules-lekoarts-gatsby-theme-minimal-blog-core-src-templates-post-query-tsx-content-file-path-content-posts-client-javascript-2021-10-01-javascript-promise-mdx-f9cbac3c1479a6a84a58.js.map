{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-client-javascript-2021-10-01-javascript-promise-mdx-f9cbac3c1479a6a84a58.js","mappings":"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","sources":["webpack://gwiyeom-blog/./content/posts/client/javascript/2021-10-01-javascript-promise.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"현재 업무에서 나도모르는 사이에 promise를 쓰고 있었다.\\r\\nAPI를 통해 데이터를 받은 후에 대한 결과를 받기 위해서 사용했다.\"), \"\\n\", React.createElement(_components.h1, null, React.createElement(_components.a, {\n    href: \"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise\"\n  }, \"Promise\")), \"\\n\", React.createElement(_components.p, null, \"The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value\\r\\nPromise 객체는 비동기 작업이 맞이할 미래의 완료 또는 실패와 그 결과 값을 나타냅니다\"), \"\\n\", React.createElement(_components.h1, null, \"Promise 생성자 함수는 비동기 작업을 수행할 콜백 함수를 인자로 전달\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"const test = new Promise((resolve, reject) => {\\r\\n  setTimeout(() => {\\r\\n    resolve('Success');\\r\\n  }, 1000);\\r\\n});\\n\")), \"\\n\", React.createElement(_components.h3, null, \"Promise 상태\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"상태\"), React.createElement(_components.th, null, \"의미\"), React.createElement(_components.th, null, \"구현\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, \"pending\"), React.createElement(_components.td, null, \"비동기 처리가 아직 수행되지 않은 상태\"), React.createElement(_components.td, null, \"resolve 또는 reject 함수가 아직 호출되지 않은 상태\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"fulfilled\"), React.createElement(_components.td, null, \"비동기 처리가 수행된 상태 (성공)\"), React.createElement(_components.td, null, \"resolve 함수가 호출된 상태\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"rejected\"), React.createElement(_components.td, null, \"비동기 처리가 수행된 상태 (실패)\"), React.createElement(_components.td, null, \"reject 함수가 호출된 상태\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"settled\"), React.createElement(_components.td, null, \"비동기 처리가 수행된 상태 (성공 또는 실패)\"), React.createElement(_components.td, null, \"resolve 또는 reject 함수가 호출된 상태\")))), \"\\n\", React.createElement(_components.h1, null, \"Promise 4가지 정적 메소드\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"1. 성공: `new Promise((resolve,reject) => { resolve('Success') })`\\r\\n\\r\\nex) `Promise.resolve(123).then((value)=>{console.lgo(value}) //123`\\r\\n\\r\\n2. 실패: `new Promise((resolve,reject) => { reject(new Error()) })`\\r\\n\\r\\nex) `Promise.reject()`\\r\\n\\r\\n\\r\\n프라미스를 사용하면 비교적 안전하고 관리하기 쉬운 코드를 작성할 수 있습니다.\\r\\n프라미스는 콜백을 예측 가능한 패턴으로 사용할 수 있게 하며,프라미스 없이 콜백만 사용했을 때 나타날 수 있는 엉뚱한 현상이나 찾기 힘든 버그를 상당수 해결합니다.\\r\\n\\r\\n프라미스는 성공 또는 실패 둘 중 하나만 발생\\r\\n프라미스는 객체=> 전달 가능\\r\\n프라미스는 비동기 코드를 단순화하고 콜백이 두 번 이상 실행되는 문제를 방지\\r\\n단 resolve,reject를 꼭 호출해야됨\\r\\n프로미스가 결정되지 않은 문제를 자동으로 해결하지는 못함\\r\\n\\r\\nnew Promise(); // 대기 상태\\r\\n\\r\\nnew Promise((resoleve,reject)=>{\\r\\n\\tresolve(); \\r\\n\\t//성공 상태\\r\\n\\treject(); \\r\\n\\t//실패 상태\\r\\n})\\r\\n\\n\")), \"\\n\", React.createElement(_components.h1, null, \"2023-05-30\"), \"\\n\", React.createElement(_components.p, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"어드민 회원 상세에서 이력 관련된 API 를 7개 호출하는 경우와 같이\\r\\n여러 여러 API 를 호출하는 경우 \", React.createElement(_components.code, null, \"Promise.all\"), \"을 사용 했엇다\\r\\nPromise.all은 병렬로 모든 작업을 동시에 실행!\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"const fetchData = async () => {\\r\\n    // root/public/test.json\\r\\n    try {\\r\\n      const [test1, test2] = await Promise.all([\\r\\n        axios.get(\\\"/test1.json\\\"),\\r\\n        axios.get(\\\"/test2.json\\\")\\r\\n      ]);\\r\\n\\r\\n      Object.keys(test1.data).length > 0 &&\\r\\n        setData((pre) => ({\\r\\n          ...pre,\\r\\n          test1: test1.data\\r\\n        }));\\r\\n\\r\\n      Object.keys(test2.data).length > 0 &&\\r\\n        setData((pre) => ({\\r\\n          ...pre,\\r\\n          test2: test2.data\\r\\n        }));\\r\\n    } catch (error) {\\r\\n      console.log(error);\\r\\n    }\\r\\n  };\\n\")), \"\\n\", React.createElement(_components.h1, null, \"Promise.all  사용 예시\"), \"\\n\", React.createElement(_components.p, null, \"여러 개의 REST API PUT 요청을 동시에 보내고, 그 중 하나가 실패해도 다른 요청이 성공할 수 있도록 Promise.all을 사용\\r\\n\", React.createElement(_components.code, null, \"Promise.all([{id:1},{id:2}].map(item => update(item.id))) .then(results => {     results.forEach(result => {      console.log(result);     }); }) .catch(error => {     console.error('error'); });\")), \"\\n\", React.createElement(_components.h1, null, \"프라미스\"), \"\\n\", React.createElement(_components.p, null, \"비동기 프로그래밍을 단순화하도록 설계된 코어 기능인 프라미스\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"프라미스는 비동기 작업의 결과를 나타내는 객체\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"프라미스는 콜백을 사용하는 방법중 하나\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"프라미스는 중첩된 콜백을 좀 더 선형에 가까운 프라미스 체인으로 바꿔 주므로 읽기 쉽고 이해하기 쉽다\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"콜백에서 예외가 일어나면 이 예외를 비동기 동작의 최초 실행자에 전달할 수 있는 방법이 없다\\r\\n예외 처리 어려움\\r\\n프라미스는 에러를 처리하는 방벙을 표준화하고 프라미스 체인을 통해 에러를 정확히 전달하는 방법 제공\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"then() 메서드\\r\\n프라미스 기반 비동기 작업은 정상적으로 완료되면 then 의 첫 번째 인자인 함수에 전달\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"비동기적 작업에서 뭔가 잘못되면,처리할 catch 절을 만날 때까지 콜 스택을 거슬러 올라가서 전달될 예외를 일으킵니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"fetch 함수 : url을 받고 프라미스를 반환 ,메서드 체인\\r\\n프라미스 객체를 반환하며 프라미스가 이행될 때 등록된 콜백 함수에 응답 객체를 전달\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://codesandbox.io/s/datagetex-v621x2\"\n  }, \"전체 코드\")), \"\\n\", React.createElement(_components.h3, null, \"참고\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\"\n  }, \"Promise.resolve()\"), \"\\r\\n\", React.createElement(_components.a, {\n    href: \"https://learnjs.vlpt.us/async/02-async-await.html\"\n  }, \"https://learnjs.vlpt.us/async/02-async-await.html\"), \"\\r\\n\", React.createElement(_components.a, {\n    href: \"https://han41858.tistory.com/11\"\n  }, \"https://han41858.tistory.com/11\"), \"\\r\\n\", React.createElement(_components.a, {\n    href: \"https://programmingsummaries.tistory.com/325\"\n  }, \"https://programmingsummaries.tistory.com/325\"), \"\\r\\n\", React.createElement(_components.a, {\n    href: \"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise\"\n  }, \"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise\"), \"\\r\\n\", React.createElement(_components.a, {\n    href: \"https://dmitripavlutin.com/promise-all/\"\n  }, \"https://dmitripavlutin.com/promise-all/\"), \"\\r\\n\", React.createElement(_components.a, {\n    href: \"https://stackoverflow.com/questions/44182951/axios-chaining-multiple-api-requests\"\n  }, \"https://stackoverflow.com/questions/44182951/axios-chaining-multiple-api-requests\"), \"\\r\\n\", React.createElement(_components.a, {\n    href: \"https://medium.com/codex/how-to-use-promise-all-in-react-to-speed-up-api-requests-f13250d64491\"\n  }, \"https://medium.com/codex/how-to-use-promise-all-in-react-to-speed-up-api-requests-f13250d64491\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/Users/gwiyeom/Documents/etc/gwiyeomgo.github.io/content/posts/client/javascript/2021-10-01-javascript-promise.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","a","pre","code","h3","table","thead","tr","th","tbody","td","ul","li","_provideComponents","components","React","href","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}