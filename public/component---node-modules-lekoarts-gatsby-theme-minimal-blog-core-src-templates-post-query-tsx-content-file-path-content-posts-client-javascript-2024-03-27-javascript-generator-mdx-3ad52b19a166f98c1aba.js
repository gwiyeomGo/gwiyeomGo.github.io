"use strict";(self.webpackChunkgwiyeom_blog=self.webpackChunkgwiyeom_blog||[]).push([[6729],{8411:function(e,n,t){t.r(n),t.d(n,{Head:function(){return o.F},default:function(){return u}});var l=t(7294),r=t(1151);function a(e){const n=Object.assign({h1:"h1",ul:"ul",li:"li",code:"code",pre:"pre",p:"p",a:"a"},(0,r.ah)(),e.components);return l.createElement(l.Fragment,null,l.createElement(n.h1,null,"제너레이터"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"ex6 새 문법을 사용한 일종의 이터레이터"),"\n",l.createElement(n.li,null,"순회할 때 값이 데이터 구조가 아니라 계산 결과일 때 유용"),"\n",l.createElement(n.li,null,l.createElement(n.code,null,"function*")," function 에 * 붙음"),"\n",l.createElement(n.li,null,"ex6 yield 등장"),"\n"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"function* generateSequence() {\n  yield 1;\n  yield 2;\n  return 3;\n}\nlet generator = generateSequence();\nlet one = generator.next(); //1\nlet two = generator.next(); //2\nconsole.log(JSON.stringify(two)); // {value: 2, done: false}\nlet three = generator.next();\nconsole.log(JSON.stringify(three)); // {value: 3, done: true}\n\n")),"\n",l.createElement(n.p,null,"-> 제너레이터가 종료되어 마지막 요소에 done: true 로 반환"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"전달 받은 값을 순회하는 이터러블"),"\n"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"for(let value of generator) {\n  console.log(value); // 1, 2, 3\n}\n")),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"전개 구문(...) 사용 가능"),"\n"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"let sequence = [0, ...generateSequence()]; // 0, 1, 2, 3\n")),"\n",l.createElement(n.h1,null,"언제 쓰면 좋을까?"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"비동기 코드를 처리"),"\n"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"//비동기 작업을 순차적으로 처리\nfunction* fetchData() {\n  try {\n    const data1 = yield fetchDataFromAPI1();\n    const data2 = yield fetchDataFromAPI2();\n    // 데이터 처리 로직\n  } catch (error) {\n    // 에러 처리\n  }\n}\n")),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"반복적인 작업"),"\n"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,'function* validatePassword(password) {\n  yield password.length >= 8; //최소 8자 이상\n  yield /[!@#$%^&*()_+\\-=[\\]{};\':"\\\\|,.<>/?]+/.test(password); //특수문자 1개 이상 포함\n  yield /\\d/.test(password); // 숫자 1개 이상 포함\n  yield /[A-Z]/.test(password); // 대문자 1개 이상 포함\n  yield /[a-z]/.test(password); // 소문자 1개 이상 포함\n}\n\nconst checkPassword = (password) => {\n  const validator = validatePassword(password);\n  for (const valid of validator) {\n    if (!valid) {\n      return false; // 하나라도 조건에 맞지 않으면 false 반환\n    }\n  }\n  return true; // 모든 조건을 만족하면 true 반환\n};\n\nconst password = "////4Aaa";\nconsole.log(checkPassword(password)); // true\n\n')),"\n",l.createElement(n.h1,null,"제너레이터는 이터러블 ! 이터러블이 뭔데?"),"\n",l.createElement(n.h1,null,"참고"),"\n",l.createElement(n.p,null,l.createElement(n.a,{href:"https://ko.javascript.info/generators"},"https://ko.javascript.info/generators")))}var c=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?l.createElement(n,e,l.createElement(a,e)):a(e)},o=t(8804);function u(e){return l.createElement(o.Z,e,l.createElement(c,e))}o.Z}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-client-javascript-2024-03-27-javascript-generator-mdx-3ad52b19a166f98c1aba.js.map