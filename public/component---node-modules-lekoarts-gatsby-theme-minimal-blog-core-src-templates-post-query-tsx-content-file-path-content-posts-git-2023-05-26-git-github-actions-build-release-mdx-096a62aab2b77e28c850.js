"use strict";(self.webpackChunkgwiyeom_blog=self.webpackChunkgwiyeom_blog||[]).push([[7319],{9747:function(e,n,t){t.r(n),t.d(n,{Head:function(){return c.F},default:function(){return s}});var l=t(7294),r=t(1151);function a(e){const n=Object.assign({h1:"h1",p:"p",a:"a",ol:"ol",li:"li",pre:"pre",code:"code",ul:"ul",blockquote:"blockquote"},(0,r.ah)(),e.components);return l.createElement(l.Fragment,null,l.createElement(n.h1,null,"배경"),"\n",l.createElement(n.p,null,"매번 module 을 사용하고 relase tag 를 생성해 최신버전으로 배포한다\r\n코드를 머지하면 자동으로  배포하고 싶다"),"\n",l.createElement(n.h1,null,"사용기술"),"\n",l.createElement(n.p,null,"github/actions ",l.createElement(n.a,{href:"https://github.com/features/actions"},"https://github.com/features/actions"),"\r\ncodecov ",l.createElement(n.a,{href:"https://about.codecov.io/"},"https://about.codecov.io/")),"\n",l.createElement(n.h1,null,"작업내용"),"\n",l.createElement(n.ol,null,"\n",l.createElement(n.li,null,"GitHub Actions를 사용하여 Go 코드를 빌드하고 테스트커버리지를 확인하자"),"\n",l.createElement(n.li,null,"GitHub Actions를 사용하여 Go 코드를 자동으로 릴리스하고 버전을 증가시키자"),"\n",l.createElement(n.li,null,"README.md"),"\n"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"![Build Status](https://github.com/{사용자명}/{repository 명}/actions/workflows/build.yml/badge.svg)\r\n[![codecov](https://codecov.io/gh/beautiful-store/gosiren/branch/main/graph/badge.svg?token={???})](https://codecov.io/gh/{사용자명}/{repository 명})\r\n![GitHub go.mod Go version](https://img.shields.io/github/go-mod/go-version/{사용자명}/{repository 명})\r\n![GitHub release (latest SemVer)](https://img.shields.io/github/v/release/{사용자명}/{repository 명})\n")),"\n",l.createElement(n.p,null,"codecov 는 토큰이 필요한거 같다 (아직 알아보는 중)"),"\n",l.createElement(n.h1,null,"build.yml"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,'# This workflow will build a golang project\r\n# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go\r\n\r\nname: Go\r\n\r\non:\r\n  push:\r\n    branches: [ "main" ]\r\n  pull_request:\r\n    branches: [ "main" ]\r\n\r\njobs:\r\n\r\n  build:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n    - uses: actions/checkout@v3\r\n\r\n    - name: Set up Go\r\n      uses: actions/setup-go@v3\r\n      with:\r\n        go-version: 1.19\r\n\r\n    - name: Build\r\n      run: go build -v ./...\n')),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"test 실행을 원한다면"),"\n"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"    - name: Run coverage\r\n      run: go test -race -coverprofile=coverage.txt -covermode=atomic\n")),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"coverage 추가를 원한다면"),"\n"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"    - name: Upload coverage to Codecov\r\n      uses: codecov/codecov-action@v3\n")),"\n",l.createElement(n.h1,null,"release.yml"),"\n",l.createElement(n.p,null,"배포시 relase 태그를 자동으로 올리려면 해당 파일도 추가함\r\n만약 build.yml 이랑 같이 사용한다면"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null," - name: Build\r\n        uses: ./build.yml\n")),"\n",l.createElement(n.p,null,"이렇게 파일에 쓴다"),"\n",l.createElement(n.p,null,l.createElement(n.code,null,"actions/create-release@v1")," 은 릴리스 생성과 버전 태그 설정을 한 번에 처리해준다\r\n따라서 relase 전"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null," tag_name: v1.0.0  # 릴리스 버전을 여기에 지정합니다.\r\n release_name: Release v1.0.0\n")),"\n",l.createElement(n.p,null,"값을 꼭 변경해야 한다"),"\n",l.createElement(n.p,null,"(참고)\r\n",l.createElement(n.code,null,"secrets.GITHUB_TOKEN"),"은 워크플로우가 실행되는 동안 자동으로 생성되고,레포지토리와 관련된 권한을 가지고 있습니다.\r\n따라서 별도로 토큰을 생성하거나 설정할 필요는 없습니다."),"\n",l.createElement(n.p,null,"main 브랜치에 변경 사항이 푸시되고 머지될 때마다 릴리즈 버전이 자동으로 증가하여 새로운 릴리즈가 생성"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,'name: Auto Release Workflow\r\n\r\non:\r\n  push:\r\n    branches: [ "main" ]\r\n\r\njobs:\r\n\r\n  build:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n       - name: Checkout code\r\n        uses: actions/checkout@v3\r\n\r\n      - name: Build\r\n        uses: ./build.yml\r\n\r\n      - name: Create Release\r\n        id: create_release\r\n        uses: actions/create-release@v1\r\n        env:\r\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\r\n        with:\r\n          tag_name: v1.0.0\r\n          release_name: Release v1.0.0\r\n          draft: false\r\n          prerelease: false\r\n\n')),"\n",l.createElement(n.p,null,"프로젝트 루트 디렉토리에 .github/workflows 폴더를 생성합니다.\r\n.github/workflows 폴더 내에 새로운 YAML 파일을 생성합니다. 예를 들어, release.yml로 파일 이름을 지정할 수 있습니다.\r\nYAML 파일 내에서 다음과 같은 구성을 추가합니다:"),"\n",l.createElement(n.h1,null,"packge.json 스크립트로 배포"),"\n",l.createElement(n.blockquote,null,"\n",l.createElement(n.p,null,"[에러]could not read Username for '",l.createElement(n.a,{href:"https://github.com"},"https://github.com"),"': No such device or address\r\n",l.createElement(n.a,{href:"https://github.com/tschaub/gh-pages/issues/384"},"https://github.com/tschaub/gh-pages/issues/384")),"\n"),"\n",l.createElement(n.p,null,"에서 찾았다..\r\n",l.createElement(n.code,null,"git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY"),"\r\n지정해서 배포 성공"))}var o=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?l.createElement(n,e,l.createElement(a,e)):a(e)},c=t(8804);function s(e){return l.createElement(c.Z,e,l.createElement(o,e))}c.Z}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-git-2023-05-26-git-github-actions-build-release-mdx-096a62aab2b77e28c850.js.map