"use strict";(self.webpackChunkgwiyeom_blog=self.webpackChunkgwiyeom_blog||[]).push([[5193],{1024:function(e,t,n){n.r(t),n.d(t,{Head:function(){return s.p},default:function(){return o}});var l=n(6540),r=n(8453);function a(e){const t=Object.assign({h1:"h1",p:"p",a:"a",pre:"pre",code:"code",h3:"h3",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",ul:"ul",li:"li"},(0,r.RP)(),e.components);return l.createElement(l.Fragment,null,l.createElement(t.h1,null,"배경"),"\n",l.createElement(t.p,null,"현재 업무에서 나도모르는 사이에 promise를 쓰고 있었다.\nAPI를 통해 데이터를 받은 후에 대한 결과를 받기 위해서 사용했다."),"\n",l.createElement(t.h1,null,l.createElement(t.a,{href:"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise")),"\n",l.createElement(t.p,null,"The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value\nPromise 객체는 비동기 작업이 맞이할 미래의 완료 또는 실패와 그 결과 값을 나타냅니다"),"\n",l.createElement(t.h1,null,"Promise 생성자 함수는 비동기 작업을 수행할 콜백 함수를 인자로 전달"),"\n",l.createElement(t.pre,null,l.createElement(t.code,null,"const test = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('Success');\n  }, 1000);\n});\n")),"\n",l.createElement(t.h3,null,"Promise 상태"),"\n",l.createElement(t.table,null,l.createElement(t.thead,null,l.createElement(t.tr,null,l.createElement(t.th,null,"상태"),l.createElement(t.th,null,"의미"),l.createElement(t.th,null,"구현"))),l.createElement(t.tbody,null,l.createElement(t.tr,null,l.createElement(t.td,null,"pending"),l.createElement(t.td,null,"비동기 처리가 아직 수행되지 않은 상태"),l.createElement(t.td,null,"resolve 또는 reject 함수가 아직 호출되지 않은 상태")),l.createElement(t.tr,null,l.createElement(t.td,null,"fulfilled"),l.createElement(t.td,null,"비동기 처리가 수행된 상태 (성공)"),l.createElement(t.td,null,"resolve 함수가 호출된 상태")),l.createElement(t.tr,null,l.createElement(t.td,null,"rejected"),l.createElement(t.td,null,"비동기 처리가 수행된 상태 (실패)"),l.createElement(t.td,null,"reject 함수가 호출된 상태")),l.createElement(t.tr,null,l.createElement(t.td,null,"settled"),l.createElement(t.td,null,"비동기 처리가 수행된 상태 (성공 또는 실패)"),l.createElement(t.td,null,"resolve 또는 reject 함수가 호출된 상태")))),"\n",l.createElement(t.h1,null,"Promise 4가지 정적 메소드"),"\n",l.createElement(t.pre,null,l.createElement(t.code,null,"1. 성공: `new Promise((resolve,reject) => { resolve('Success') })`\n\nex) `Promise.resolve(123).then((value)=>{console.lgo(value}) //123`\n\n2. 실패: `new Promise((resolve,reject) => { reject(new Error()) })`\n\nex) `Promise.reject()`\n\n\n프라미스를 사용하면 비교적 안전하고 관리하기 쉬운 코드를 작성할 수 있습니다.\n프라미스는 콜백을 예측 가능한 패턴으로 사용할 수 있게 하며,프라미스 없이 콜백만 사용했을 때 나타날 수 있는 엉뚱한 현상이나 찾기 힘든 버그를 상당수 해결합니다.\n\n프라미스는 성공 또는 실패 둘 중 하나만 발생\n프라미스는 객체=> 전달 가능\n프라미스는 비동기 코드를 단순화하고 콜백이 두 번 이상 실행되는 문제를 방지\n단 resolve,reject를 꼭 호출해야됨\n프로미스가 결정되지 않은 문제를 자동으로 해결하지는 못함\n\nnew Promise(); // 대기 상태\n\nnew Promise((resoleve,reject)=>{\n\tresolve(); \n\t//성공 상태\n\treject(); \n\t//실패 상태\n})\n\n")),"\n",l.createElement(t.h1,null,"2023-05-30"),"\n",l.createElement(t.p,null,"배경"),"\n",l.createElement(t.p,null,"어드민 회원 상세에서 이력 관련된 API 를 7개 호출하는 경우와 같이\n여러 여러 API 를 호출하는 경우 ",l.createElement(t.code,null,"Promise.all"),"을 사용 했엇다\nPromise.all은 병렬로 모든 작업을 동시에 실행!"),"\n",l.createElement(t.pre,null,l.createElement(t.code,null,'const fetchData = async () => {\n    // root/public/test.json\n    try {\n      const [test1, test2] = await Promise.all([\n        axios.get("/test1.json"),\n        axios.get("/test2.json")\n      ]);\n\n      Object.keys(test1.data).length > 0 &&\n        setData((pre) => ({\n          ...pre,\n          test1: test1.data\n        }));\n\n      Object.keys(test2.data).length > 0 &&\n        setData((pre) => ({\n          ...pre,\n          test2: test2.data\n        }));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n')),"\n",l.createElement(t.h1,null,"프라미스"),"\n",l.createElement(t.p,null,"비동기 프로그래밍을 단순화하도록 설계된 코어 기능인 프라미스"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"\n",l.createElement(t.p,null,"프라미스는 비동기 작업의 결과를 나타내는 객체"),"\n"),"\n",l.createElement(t.li,null,"\n",l.createElement(t.p,null,"프라미스는 콜백을 사용하는 방법중 하나"),"\n"),"\n",l.createElement(t.li,null,"\n",l.createElement(t.p,null,"프라미스는 중첩된 콜백을 좀 더 선형에 가까운 프라미스 체인으로 바꿔 주므로 읽기 쉽고 이해하기 쉽다"),"\n"),"\n",l.createElement(t.li,null,"\n",l.createElement(t.p,null,"콜백에서 예외가 일어나면 이 예외를 비동기 동작의 최초 실행자에 전달할 수 있는 방법이 없다\n예외 처리 어려움\n프라미스는 에러를 처리하는 방벙을 표준화하고 프라미스 체인을 통해 에러를 정확히 전달하는 방법 제공"),"\n"),"\n",l.createElement(t.li,null,"\n",l.createElement(t.p,null,"then() 메서드\n프라미스 기반 비동기 작업은 정상적으로 완료되면 then 의 첫 번째 인자인 함수에 전달"),"\n"),"\n",l.createElement(t.li,null,"\n",l.createElement(t.p,null,"비동기적 작업에서 뭔가 잘못되면,처리할 catch 절을 만날 때까지 콜 스택을 거슬러 올라가서 전달될 예외를 일으킵니다."),"\n"),"\n",l.createElement(t.li,null,"\n",l.createElement(t.p,null,"fetch 함수 : url을 받고 프라미스를 반환 ,메서드 체인\n프라미스 객체를 반환하며 프라미스가 이행될 때 등록된 콜백 함수에 응답 객체를 전달"),"\n"),"\n"),"\n",l.createElement(t.p,null,l.createElement(t.a,{href:"https://codesandbox.io/s/datagetex-v621x2"},"전체 코드")),"\n",l.createElement(t.h3,null,"참고"),"\n",l.createElement(t.p,null,l.createElement(t.a,{href:"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve"},"Promise.resolve()"),"\n",l.createElement(t.a,{href:"https://learnjs.vlpt.us/async/02-async-await.html"},"https://learnjs.vlpt.us/async/02-async-await.html"),"\n",l.createElement(t.a,{href:"https://han41858.tistory.com/11"},"https://han41858.tistory.com/11"),"\n",l.createElement(t.a,{href:"https://programmingsummaries.tistory.com/325"},"https://programmingsummaries.tistory.com/325"),"\n",l.createElement(t.a,{href:"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise"),"\n",l.createElement(t.a,{href:"https://dmitripavlutin.com/promise-all/"},"https://dmitripavlutin.com/promise-all/"),"\n",l.createElement(t.a,{href:"https://stackoverflow.com/questions/44182951/axios-chaining-multiple-api-requests"},"https://stackoverflow.com/questions/44182951/axios-chaining-multiple-api-requests"),"\n",l.createElement(t.a,{href:"https://medium.com/codex/how-to-use-promise-all-in-react-to-speed-up-api-requests-f13250d64491"},"https://medium.com/codex/how-to-use-promise-all-in-react-to-speed-up-api-requests-f13250d64491")))}var c=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,r.RP)(),e.components);return t?l.createElement(t,e,l.createElement(a,e)):a(e)},s=n(7292);function o(e){return l.createElement(s.A,e,l.createElement(c,e))}s.A}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-client-javascript-2021-10-01-javascript-promise-mdx-d629031e4ef54cb5ec14.js.map