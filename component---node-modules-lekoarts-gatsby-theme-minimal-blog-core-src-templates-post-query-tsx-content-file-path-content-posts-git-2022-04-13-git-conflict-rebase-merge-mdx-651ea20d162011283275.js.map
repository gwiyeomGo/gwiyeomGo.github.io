{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-git-2022-04-13-git-conflict-rebase-merge-mdx-651ea20d162011283275.js","mappings":"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","sources":["webpack://gwiyeom-blog/./content/posts/git/2022-04-13-git-conflict-rebase-merge.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    h2: \"h2\",\n    blockquote: \"blockquote\",\n    a: \"a\",\n    h3: \"h3\",\n    ol: \"ol\",\n    li: \"li\",\n    pre: \"pre\",\n    ul: \"ul\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"github 에서 main 을 pull 받았을 때 충돌이 발생했다\\n변화된 내용이 만아 branch 에서 \", React.createElement(_components.code, null, \"git pull origin main\"), \"을 하고\\n코드를 병합했다. (merge)\\n모든 코드를 변경했는데 에러가 끝나지 않았다\\n병합을 끝내는 방법은 뭐지?\\n또한\\n업무에서는 gitLab 을 사용하고 있다.\\n그리고 conflict  가 발생하면 rebase 하고 있다\\n각각의 차의를 알아보고\\ngitLab 과 github 에서 왜 다르게 충돌을 해결하는지 궁금했다\"), \"\\n\", React.createElement(_components.h2, null, \"병합을 끝내려면?\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"With Git 2.12 (Q1 2017), you will have the more natural command:\\n\", React.createElement(_components.a, {\n    href: \"https://stackoverflow.com/questions/2474097/how-do-i-finish-the-merge-after-resolving-my-merge-conflicts\"\n  }, \"How do I finish the merge after resolving my merge conflicts\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"글에서는 \", React.createElement(_components.code, null, \"git merge --continue\"), \" 를 실행하라고 했다 문제를 해결해서\\n다시 origin branch 로 push 하고 main 으로 머지했다.\"), \"\\n\", React.createElement(_components.h2, null, \"conflict 은 뭐지?\"), \"\\n\", React.createElement(_components.p, null, \"특정 branch 에서 다른 branch 를 pull 받을때\"), \"\\n\", React.createElement(_components.h3, null, \"지금까지 git rebase  는 언제 사용헸지?\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"git rebase -i HEAD~2\")), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"직전 커밋 2개를 합쳐준다\"), \"\\n\", React.createElement(_components.li, null, \"충돌 후 해결\"), \"\\n\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"***tip:\\ngit 에서는 pull의 기본 설정이 rebase가 false로 되어있다.\\n이 부분에 대해 rebase가 true가 되도록 바꿔주는 설정작업이 필요하다\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"힌트: You have divergent branches and need to specify how to reconcile them.\\n힌트: You can do so by running one of the following commands sometime before\\n힌트: your next pull:\\n힌트:\\n힌트:   git config pull.rebase false  # merge\\n힌트:   git config pull.rebase true   # rebase\\n힌트:   git config pull.ff only       # fast-forward only\\n힌트:\\n힌트: You can replace \\\"git config\\\" with \\\"git config --global\\\" to set a default\\n힌트: preference for all repositories. You can also pass --rebase, --no-rebase,\\n힌트: or --ff-only on the command line to override the configured default per\\n힌트: invocation.\\nfatal: Need to specify how to reconcile divergent branches.\\n\")), \"\\n\", React.createElement(_components.p, null, \"-> \", React.createElement(_components.code, null, \"git config --global pull.rebase true\"), \" 명령어로 config 설정함\"), \"\\n\", React.createElement(_components.p, null, \"github,gitLab 상관없이\\n이 git config 설정에 따라서 pull 했을 때 rebase 할지 merge 할지 선택 가능하다.\"), \"\\n\", React.createElement(_components.h3, null, \"git conflict 이후에도 rebase --continue or merge --continue 를 해준다 왜?\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://baeji77.github.io/dev/git/etc/git-rebase-and-confilct-resolve/\"\n  }, \"rebase 를 통한 conflict 해결 방법Permalink\")), \"\\n\", React.createElement(_components.h3, null, React.createElement(_components.a, {\n    href: \"https://git-scm.com/book/ko/v2/Git-%EB%B8%8C%EB%9E%9C%EC%B9%98-Rebase-%ED%95%98%EA%B8%B0\"\n  }, \"rebase vs merge 차이\"), \" 정리\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Git에서 한 브랜치에서 다른 브랜치로 합치는 방법에는 merge 와 rebase 가 있다\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.h4, null, \"merge\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"master 브랜치에서 갈라져 나온 특정 브랜치를 master 브랜치에 합칠때 merge  merge 사용\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://en.wikipedia.org/wiki/Merge_(version_control)\"\n  }, \"3-way-merge\"), \" 로 커밋 두 개(C3, C4)와 공통 조상(C2)을 사용하는 3-way Merge로 새로운 커밋을 만든다\"), \"\\n\", React.createElement(_components.li, null, \"Merge 의 경우는 두 브랜치의 최종결과만을 가지고 합친다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.h4, null, \"rebase\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"rebase 명령으로 한 브랜치에서 변경된 사항을 다른 브랜치에 적용할 수 있다\"), \"\\n\", React.createElement(_components.li, null, \"Rebase는 보통 리모트 브랜치에 커밋을 깔끔하게 적용하고 싶을 때 사용\"), \"\\n\", React.createElement(_components.li, null, \"Rebase 의 경우는 브랜치의 변경사항을 순서대로 다른 브랜치에 적용하면서 합친다\"), \"\\n\", React.createElement(_components.li, null, \"로컬 브랜치에서 작업할 때는 히스토리를 정리하기 위해서 Rebase 할 수도 있지만, 리모트 등 어딘가에 Push로 내보낸 커밋에 대해서는 절대 Rebase 하지 말아야 한다\"), \"\\n\"), \"\\n\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/gwiyeomgo.github.io/gwiyeomgo.github.io/content/posts/git/2022-04-13-git-conflict-rebase-merge.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","code","h2","blockquote","a","h3","ol","li","pre","ul","h4","_provideComponents","components","React","href","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}